,video,timestamp,text
0,08-29,0:03,all right so today uh we are going to start the first lecture
1,08-29,0:09,um introduction to networks let me firstly discuss the structure of our class the very first chapter is
2,08-29,0:17,going to be um introduction to the networks okay then the second check beginning from the
3,08-29,0:24,second chapter we are going to discuss the uh application layer then transport layer the network layer and then finally
4,08-29,0:31,the link layer okay those are the four main layers we are going to cover in this class each chapter you can imagine
5,08-29,0:37,because we we have uh only these many chapters in this semester so we are
6,08-29,0:43,going to have super long chapters so be prepared for that uh in this chapter what we are going to discuss is
7,08-29,0:50,basically firstly we want to know what is internet and then the second thing we are going to discuss is what is a
8,08-29,0:57,protocol then after that we are going to discuss network edge network call these
9,08-29,1:02,are very important definitions okay um and then we will discuss how to
10,08-29,1:08,measure the network basically what is the uh the performance of the network okay then we will discuss the security
11,08-29,1:16,part of uh network this is this security part is uh is very basic okay very basic
12,08-29,1:25,um if you want to learn more you should probably take 154 class the networking and network security class to to learn
13,08-29,1:32,more okay and then we will discuss the layers i mentioned we will we will
14,08-29,1:37,discuss several layers in this class then why do we have layers what is the
15,08-29,1:43,functionality for each layer okay so what are the protocols containing this each layer then we will discuss that so
16,08-29,1:50,for history we will just skip that okay all right so then let's start the first
17,08-29,1:55,question what is an internet um if we take a nas and both view i think
18,08-29,2:03,last time we did the discussion many of you mentioned notes and the links yeah
19,08-29,2:08,those are very important two things or two components that will compose the
20,08-29,2:14,internet okay so when we see knows basically we mean the computers the
21,08-29,2:20,devices right some of you mentioned servers pay attention servers is just
22,08-29,2:25,one type of note okay servers are although the the the same huge usually
23,08-29,2:32,this sounds like huge things right but actually servers are just irregular computers may they may have a more uh
24,08-29,2:40,computer power computation power they may have more storage etc but they are
25,08-29,2:47,still like a computing device okay so here we can see uh okay the servers is just a
26,08-29,2:54,type of device but in addition to the servers okay you can see this is one type in addition to the servers we may
27,08-29,3:01,have the pcs we may have a laptop we may have the smartphones we may have the
28,08-29,3:07,tablets and we may even have uh the smart devices okay what which we call as
29,08-29,3:14,we now we have a idea of internet of things you hear about iot again and
30,08-29,3:21,again right so what is iot iot is internet of things so here are the
31,08-29,3:26,things may refer to a lot of things okay later i'm going to show you a slide on this
32,08-29,3:33,um so that all those computing devices as long as they as long as they are able
33,08-29,3:38,they can be connected to the internet then we call them as the nodes okay or
34,08-29,3:45,we calculate them as the hot okay the hots or the n devices okay and the
35,08-29,3:51,systems well these are all the possible names for this uh computing devices and
36,08-29,3:56,usually these computing devices are able to run the network applications okay so for example on your computer you may run
37,08-29,4:04,uh uh email okay outlook so this is
38,08-29,4:10,actually later when we talk about the email service union you will know this is actually the client program for email
39,08-29,4:17,service okay and then we need to have some kind of
40,08-29,4:23,server program on the email server okay similarly if you you're using a web
41,08-29,4:29,page using uh sorry not available
42,08-29,4:45,[music]
43,08-29,5:06,okay in addition to that in addition to those computing devices we also need
44,08-29,5:13,some kind of links or um cables or whatever to connect them
45,08-29,5:19,together okay so those are called communication links
46,08-29,5:25,so the communication links uh so far they can be either white links or
47,08-29,5:32,wireless links okay so for for example we may have uh fiber we know this is
48,08-29,5:37,super fast and it has a very low error rate okay it's very reliable uh we may
49,08-29,5:44,also have copper um uh corporate cables right so those are
50,08-29,5:53,like uh wide links but we miss we may also have wireless links like radio
51,08-29,5:58,satellite okay those are all the wireless links um and for these links there is a very
52,08-29,6:06,important matter uh that is that that is used uh to show
53,08-29,6:12,the speed of the links so this is called transmission rate and this is this
54,08-29,6:18,transmission rate is later we will learn it is actually very important it will
55,08-29,6:23,um affect something we call a transmission delay okay so sometimes if
56,08-29,6:28,the transmission also has another name which is bandwidth i think you are all you all know the term bandwidth right
57,08-29,6:35,but what is uh what is the bandwidth the formal name is actually the transmission rate
58,08-29,6:41,um and this bandwidth if you have a bigger bandwidth then your your network
59,08-29,6:50,is faster what does this mean faster faster means you have less delays okay why
60,08-29,6:56,does higher transmission rate cause lower delays later uh i will show you i
61,08-29,7:02,will give you a formula for that okay then now we have the links connecting
62,08-29,7:07,the computing devices that is this sufficient is this enough
63,08-29,7:15,you think about this if we have if we have the
64,08-29,7:23,um links and devices then avida can we build a network on top of this only
65,08-29,7:32,so now we can imagine for example if we have most of you say no right so we say no in
66,08-29,7:39,the in the chat right we cannot we cannot we may we may
67,08-29,7:44,be able to build a very small network but we want we are not able to build a large area network
68,08-29,7:51,or will not be able to build a internet why you think about this if you only
69,08-29,7:57,have cables and all vehicle links or on the devices then if you have a computer let's say in
70,08-29,8:07,u.s and another computer in europe then we have another one in asia okay so now
71,08-29,8:15,if you want to connect these two then you need you need to have third direct links between these authorities three
72,08-29,8:22,computers apparently it's very hard okay first it's hard to use white links if you use
73,08-29,8:29,wireless links then you may you may need to have a very very very very powerful
74,08-29,8:36,um uh transmitter and receiver but usually that is not possible
75,08-29,8:42,okay even when you think about someone someone of you may say oh i can use
76,08-29,8:48,satellite satellite i i'll i'll uh explain this
77,08-29,8:53,later satellite is actually also itself is not able to directly connect to those
78,08-29,9:00,devices okay it needs to firstly connect to this kind of tower okay and then the tower is
79,08-29,9:07,actually connected to the browser okay so that's why okay that's why this
80,08-29,9:13,these two things are not enough we need a third type of thing which is called
81,08-29,9:18,tacky switches okay package which is means routers and switches okay so this
82,08-29,9:27,kind of thing is use the two forward the package so as
83,08-29,9:32,you can see these devices are all connected to a router or switch
84,08-29,9:39,okay and then in the middle of the network we actually have a bunch of routers a lot of routers okay then we do
85,08-29,9:48,your level do not have direct link between two computing devices actually those two compute devices when they talk
86,08-29,9:54,to each other they have to go through a lot of routers okay so which we call you
87,08-29,10:00,lyrical as a for example a path okay so
88,08-29,10:07,um that is uh that is a uh the package which part okay this this packets which
89,08-29,10:13,are like the uh post offices if you think about uh the postal service so
90,08-29,10:19,those packages are like the postal offices at different um areas so they are they are able to
91,08-29,10:26,forward the uh packets or the letters for you okay
92,08-29,10:33,um and as i mentioned again some of you may think about the satellite so the
93,08-29,10:39,satellite okay the satellite in the sky is actually connected to a tower for us your
94,08-29,10:47,computer when you think about it for example some of you may think oh i'm using 4g or lt
95,08-29,10:53,uh when you use this kind of cellular network okay your phone is not connected
96,08-29,11:00,to the satellite directly because your phone is not that powerful enough okay
97,08-29,11:05,it's not that powerful it does not have the power to send signal directly to to
98,08-29,11:12,the uh to the satellite okay as a matter of fact your phone as is actually
99,08-29,11:20,connected to uh some of the towers okay so some of
100,08-29,11:25,the towers here um and then the towers
101,08-29,11:30,actually is connected to the uh satellite okay and then you may think
102,08-29,11:36,how then how could the towers be connected to the internet as you can see here the towers is actually connected to
103,08-29,11:42,a router okay that is how the signals are uh finally uh connected into the
104,08-29,11:51,internet so actually it's through a router all right okay so uh do remember i just
105,08-29,11:58,mentioned the internet of things okay so what are the things so we now have a lot of internet
106,08-29,12:06,uh devices like for example you may have your picture from connect to the
107,08-29,12:11,internet or you may have uh the refrigerator connected to the internet
108,08-29,12:16,okay so you may you may even have a toaster which is able to do a weather
109,08-29,12:23,forecast so we can have a lot of devices connected into the internet and now
110,08-29,12:30,smart devices are we have more and more varieties okay so maybe
111,08-29,12:36,um and now you can even for example you may for example have a smart clock which
112,08-29,12:41,is able to send some kind of alarm to maybe a coffee maker in the morning and
113,08-29,12:48,say hey a master has a waking up please make a copy for him or her so
114,08-29,12:55,um yeah so all those devices you can see are now kind of connected but of course
115,08-29,13:00,with those devices it connects with each other and you are actually exposing more
116,08-29,13:05,attack surface to the attackers so they are more they have more opportunities to
117,08-29,13:12,happen to your network that's something you need to pay attention to um i remember maybe one or two years ago
118,08-29,13:19,there was a incident actually uh taking advantage of the cameras so those
119,08-29,13:26,cameras actually all they all use the default password okay it's very easy to hack
120,08-29,13:34,into those cameras and then the attackers basically use those cameras to conduct a ddos attack okay later we'll
121,08-29,13:42,explain more about this kind of uh ddos attack
122,08-29,13:47,okay so um and that's the uh the the basic the basic components of network uh
123,08-29,13:55,in addition to that okay in addition to that we need something more as we mentioned
124,08-29,14:00,so we have the heart those hardware right then the device is the links we
125,08-29,14:06,also have the uh the routers and switches like the packet switches okay
126,08-29,14:11,so is that enough no okay why because we
127,08-29,14:17,still need some kind of uh rules or standards for all those devices to
128,08-29,14:23,follow okay if we do not have any rules you can imagine you can imagine if we do
129,08-29,14:28,not have any rules then how could those devices understand each other right those are just the devices those they
130,08-29,14:36,are not human beings okay they can they cannot understand each other so that's why we also need something called
131,08-29,14:42,protocols okay those protocols usually control
132,08-29,14:48,um when to do the sending how can we do the sending those kind of things right how can we do the receiving when to do
133,08-29,14:55,the receiving so it can chose the sending and receiving of messages okay so for example you can see at least the
134,08-29,15:02,protocols here actually uh so this is a combination of
135,08-29,15:08,protocols from different layers okay we may basically for each layer we have
136,08-29,15:15,some protocols for example as a higher layer as application layer women talk
137,08-29,15:22,about the emails the web services we may for at least for example you may know
138,08-29,15:27,http right you heard about this a lot at least you see this in the url right it's
139,08-29,15:33,sometimes you see http sometimes you say https okay that's basically means
140,08-29,15:40,um the web service is using http protocol okay of course
141,08-29,15:48,um this protocol adds up as application layer when it comes to lower layer you
142,08-29,15:53,you may have to use tcp protocol and that's transport layer when it comes to the network layer you may use ip
143,08-29,16:01,protocol so later we will learn this is called some this is called for example
144,08-29,16:07,we have http here then we have tcp here we may have ip here okay so this thing is called a
145,08-29,16:16,protocol stack
146,08-29,16:23,okay so this is called a protocol stack and later we are going to spend quite
147,08-29,16:29,some time explaining this protocol stack um but for now you only need to know
148,08-29,16:35,okay we may use a bunch of protocols in the internet to control uh those diy
149,08-29,16:41,those devices okay um and this heroes skype is uh is one uh
150,08-29,16:49,propriet protocol and 80211 is actually for wireless network okay for wi-fi
151,08-29,16:57,um and we may also have some internet standards okay so they are usually
152,08-29,17:02,documented in formats such as rfc rfc means request for comments and we may
153,08-29,17:09,also have ietf internet engineering task force for for the standards
154,08-29,17:16,okay then now let's take uh take a service view we just look at the nard
155,08-29,17:21,and nuts and both view which means we are looking at all those components okay now if we change our perspective if we
156,08-29,17:29,look at the service view um then basically the internet is uh is
157,08-29,17:36,the infrastructure that provides the services two applications okay we know the
158,08-29,17:44,internet is run it's uh i mean has a lot of different applications it is for
159,08-29,17:51,example we may have a web application uh email application you may play video
160,08-29,17:57,games right we may do social you may use social networks like facebook every day
161,08-29,18:02,so then the internet is basically
162,08-29,18:07,providing the infrastructure to support those applications okay so you think
163,08-29,18:14,about this for example um if you are designing a new application
164,08-29,18:20,if one day you say oh i want to design application that can be used for
165,08-29,18:26,um for mobile phone okay um then when you design this application
166,08-29,18:34,you need to of course do the programming for this application to to implement
167,08-29,18:39,some of the functionalities right but when you do the programming for this
168,08-29,18:45,application do you need to consider the routers
169,08-29,18:51,do need to consider how to do the routine do you need to consider how to achieve
170,08-29,18:57,reliable debt transfer so for example if a packet is dropped
171,08-29,19:02,what what should you do you need to consider a vote
172,08-29,19:08,if you think more if you think more you actually you don't need to right thank you james for the response right so you
173,08-29,19:16,don't need to consider those you only need to consider oh i want to realize this functionality i want to have two
174,08-29,19:25,clients talking to each other for example okay um but you don't really need to consider
175,08-29,19:31,about the routers the switches the protocols of them and how to rely how to
176,08-29,19:40,achieve the reliable digital transfer protocol those kind of things so so you only need to focus the real
177,08-29,19:47,functionality for your application okay of course you may for example you
178,08-29,19:53,may call some apis okay you may call some function calls to use some of the
179,08-29,20:00,services provided by the internet for example later when we learned the spoki program assignment you will know
180,08-29,20:05,sometimes you need to call um call some functions to do to use tcp
181,08-29,20:13,sometimes you may use udp okay and you don't need to know what the what's your
182,08-29,20:19,tcp is what udp is you don't need to know for now there are just some protocols but what i mean here is uh you
183,08-29,20:27,only need to implement the the functionalities of the application you
184,08-29,20:33,don't need to implement the functionalities of the internet so internet is basically the
185,08-29,20:39,infrastructure that provides the services to support your application
186,08-29,20:44,okay this is like when you use postal service okay when you want to for example email
187,08-29,20:51,uh send a letter or gift to a friend you only need to
188,08-29,20:58,um write a letter or prepare a package right and then drop it to the postal
189,08-29,21:04,office or you can even have them to pick up okay but do you need to worry how
190,08-29,21:11,would this package arrive at new york how would they deliver this package you don't really worry about that right so
191,08-29,21:18,uh that is very similar okay so postal service is again also kind of
192,08-29,21:24,infrastructure that provides the services to you okay it's like that
193,08-29,21:30,um yes that's correct it's like the middleman yeah
194,08-29,21:36,um and then what is a protocol okay so we need to look further about
195,08-29,21:41,the protocol so for human being uh basically uh we also have our own
196,08-29,21:47,protocol for example if you uh have a question about something usually you say
197,08-29,21:52,oh you say hi and the other person say hi and then you say i have a question uh
198,08-29,21:58,can you can you please help me answer that then the other person responds so we have some kind of implicit rules that
199,08-29,22:06,we follow right uh then it's the same thing for the network the network um because they are they are machine
200,08-29,22:12,they are not human so the communication activities have to be defined very
201,08-29,22:18,strictly okay otherwise um they are not able to communicate with
202,08-29,22:25,each other okay so those uh definition those those activities are actually
203,08-29,22:31,defined in the or defined and manage it in the protocols okay so here you can
204,08-29,22:37,see this is a like a definition for protocol protocols define the format order of
205,08-29,22:45,messages sent and received among the network entities and actions taken on message receipt transmission and receipt
206,08-29,22:51,okay so this is a very important definition and this may appear on the
207,08-29,22:57,test okay so in the midterm or final exam i may give you a test like this asking
208,08-29,23:04,what is the definition for protocol okay please pay attention to that
209,08-29,23:11,and if you look at this example on the left this is a human protocol the one person
210,08-29,23:18,say hi the other person say hi then uh the the female on the left is that got
211,08-29,23:23,the time and the other person say yes two o'clock okay uh then in networking is similar okay
212,08-29,23:32,it's similar for example here we have a server and a client okay this client may send a tcp
213,08-29,23:40,connection request this connection request is like a handshaking kind of thing okay it's like saying hi hi to
214,08-29,23:48,each other okay so the client personally say can i connect with you then the
215,08-29,23:54,server responds and say yes let's connect so after the connection is established then the client may say can
216,08-29,24:01,i get this as you can see this is actually a web page
217,08-29,24:07,okay this this can be a web page or maybe a file or whatever so this is url
218,08-29,24:12,so then the server may say yes sure so then this is the file to you
219,08-29,24:17,okay so if this is a web page then this file is a web page
220,08-29,24:23,okay it's a html file then this file can be displayed on the
221,08-29,24:30,client as a web page on the client when i see on the client with me i mean the client program which means the firefox
222,08-29,24:39,okay which means the chrome those are those um web browsers okay so for now
223,08-29,24:47,you don't need to understand the details like when i say display this on the client program is that we don't need to
224,08-29,24:53,know that i i'll spend quite some time explaining the server
225,08-29,24:58,and client uh the client and server model so now we don't need to know you
226,08-29,25:04,only need to know oh okay there's two machines are actually communicating each with each other okay so uh one is making
227,08-29,25:12,a request the other one is serving uh the the client or the first machine
228,08-29,25:20,the next topic we are going to discuss is the network edge okay
229,08-29,25:25,so what is network edge network edge basically includes those things we see
230,08-29,25:30,here the end systems which means n devices the access networks and the links okay
231,08-29,25:38,so in the network edge in the network edge
232,08-29,25:44,we are talking about those machines okay those hosts clients or servers okay
233,08-29,25:53,those horse or those devices okay that's the edge and you may ask okay if
234,08-29,26:01,that's the edge then what is the core okay so network core
235,08-29,26:08,is purely the routers the interconnected routers okay so as you can see here we
236,08-29,26:16,can see this approach
237,08-29,26:22,this part is the code okay you can see you only see routers
238,08-29,26:28,there that is the core or you can think uh you can also view
239,08-29,26:34,for example you can sometimes we also view these ad vouchers they are they are
240,08-29,26:39,in the edge okay so we may say okay this car is the code both are fine okay it's
241,08-29,26:44,not it's not important so both are fine but at least you know okay this part at least you know this
242,08-29,26:51,part is the code okay so there are purely purely ruptures
243,08-29,26:59,nothing else nothing else keep this in mind and then the network edge includes
244,08-29,27:06,the remaining things like the horse okay so for example here the mobile
245,08-29,27:12,phone is belongs to the edge this computer the pc laptop belongs to the
246,08-29,27:18,edge okay so some of you may think how about the servers
247,08-29,27:23,okay i know in your mind in your mindset probably service is something huge is a
248,08-29,27:29,huge center kind of thing okay uh and later you will learn actually when we do
249,08-29,27:35,our own programming you will learn server maybe certain way to just steal a
250,08-29,27:41,piece of code okay it's just a piece of code which sits on the machine
251,08-29,27:49,okay then the machine can be a regular machine for example your computer your
252,08-29,27:55,pc can can work as a service it's a absolutely fine okay the server doesn't need to be
253,08-29,28:03,a huge center okay but of course sometimes the servers do belong to a huge center
254,08-29,28:10,especially for those huge companies like google amazon okay they need to have
255,08-29,28:16,their own servers they may have a center to host the service okay but you may get
256,08-29,28:23,confused you may think oh does the server belong to the core or the app what do you think
257,08-29,28:30,do you think the servers belong to the ad or the core so that's something you need to pay attention the servers no matter how big
258,08-29,28:38,they are okay no matter if they belong to the data center or not they are they
259,08-29,28:44,still belong to the edge network edge why because no matter how huge they are
260,08-29,28:50,they are still computing devices okay
261,08-29,28:57,they are still like computers okay so that's why they still belong to
262,08-29,29:04,the network edge and as we said in the network core the network code contains
263,08-29,29:11,only only routers okay only routers nothing else
264,08-29,29:17,yes this question are they are the servers just bigger computers
265,08-29,29:24,as i said the servers are actually just a piece of code okay this piece of code may sit on a
266,08-29,29:33,regular computer like your pc it's okay it's fine your pc can be a server or it
267,08-29,29:39,may sit in a much bigger computer with much powerful memory
268,08-29,29:45,computing power etc okay oh it belongs to a data center it's
269,08-29,29:51,also fine but anyway it's just a piece of code does this make sense now okay okay good
270,08-29,29:58,um so pay attention and this may be a test problem so in the test i may give
271,08-29,30:03,you for example a true or false question or just a short answer question i may ask you i may say the servers belong to
272,08-29,30:11,the network code you know this is this statement correct actually this is a force okay pay
273,08-29,30:17,attention to that and then in the network edge we may also have access networks okay so what is accessible
274,08-29,30:23,networks access network means the network that is used to access
275,08-29,30:30,internet okay so for example here we actually have three types of access
276,08-29,30:36,networks mobile network
277,08-29,30:41,okay home network or institutional network
278,08-29,30:48,prayer all belong to access networks so for example when you are at home you are
279,08-29,30:54,using home network that is access network can you for example you can see you are using your home network you connect it
280,08-29,31:00,to this browser and then when you are at the um
281,08-29,31:05,maybe when you are on campus okay when for all when you are you find a job for example you work for a company
282,08-29,31:12,then you may use some um institutional network
283,08-29,31:17,okay bigger or enterprise network okay so those kind of networks are also one
284,08-29,31:24,type of access network so your machine is connected to some switches or routers
285,08-29,31:31,and then finally connected to the internet okay or if you are driving uh or if you are
286,08-29,31:38,in the outside okay then you may use mobile network so mobile network in this case
287,08-29,31:45,as i mentioned your machine your device is actually connected to the tower first
288,08-29,31:51,sometimes we call this tower as base station is connected to the space station and
289,08-29,31:57,then further connected to this router here and then this router is further
290,08-29,32:04,connected to the internet so this is called mobile network and then this is
291,08-29,32:09,also one type of access network so then um we have explained this how to connect
292,08-29,32:16,the end devices to a router we can use
293,08-29,32:21,either whole network we call as also as residential network okay or
294,08-29,32:27,institutional network or mobile access network okay so we can use those uh network to connect to these ad routers
295,08-29,32:36,so these are all ad routers okay
296,08-29,32:43,this one is also edgewater and this one is also eye drops so you can see the
297,08-29,32:48,edge router is actually used to connect the access network and the internet
298,08-29,32:55,core okay the internet code um so you need to keep in mind here uh when
299,08-29,33:04,we see access network the access network me have different bandwidth okay so
300,08-29,33:10,sometimes depends width is higher than you have faster speed if the bandwidth is lower than you have slower speed okay
301,08-29,33:17,and also um the link may be shared or maybe
302,08-29,33:22,dedicated for now you don't need to know this later we are going to spend quite some time explaining explaining this
303,08-29,33:29,okay all right so then let's talk let's
304,08-29,33:34,continue to discuss a little bit more about the access network let's think about the exact network
305,08-29,33:39,for the access network uh if we want to build this how would you build this you
306,08-29,33:45,think about this i think last time i'm going to the discussion some of you mentioned this uh
307,08-29,33:52,mentioned this excellent point so since we already have some kind of structure
308,08-29,33:58,there for example we already have telephony network right so in the in the old days we all have we do not use
309,08-29,34:05,mobile phone actually we every every home uh has a telephone at home right so we
310,08-29,34:11,have the telephone network then at the very beginning when people firstly design the internet
311,08-29,34:17,um they will think oh okay let's let's directly use the infrastructure from the telephone network okay that's why as you
312,08-29,34:25,can see um at a home okay at home we may have a
313,08-29,34:31,telephone we may have a computer okay then you think about this
314,08-29,34:38,um the telephone network the telephone can be connected to the network directly
315,08-29,34:44,but the computer cannot why because it is using a different type of
316,08-29,34:50,signal which cannot be understand by the telephone network so that's why we need
317,08-29,34:57,some kind of a model in between okay so the functionality of
318,08-29,35:03,modem is actually to convert the signal or the digital signal zeros and ones
319,08-29,35:10,from the computer into the signals that can be understand by the telephone network so that is the
320,08-29,35:18,function of modem of course it can also do the reverse transform which means when the when the signal comes back
321,08-29,35:26,okay then it can also transfer convert the signals from the telephone network
322,08-29,35:32,into the detail signal that can be understand by the computer okay so that
323,08-29,35:37,is this one and then you can see there is also splitter the splitter here is to use is used to split the signals into
324,08-29,35:45,two parts y is going to the telephone the other one is going to computer okay
325,08-29,35:52,and you can see this is a one home and then we may have the other home a lot of
326,08-29,35:58,homes they are actually all connected together uh they are all connected
327,08-29,36:04,finally to some kind of central office in this central office we may have dsl
328,08-29,36:10,access multiplexer okay and then finally this multiplexer is connected to the
329,08-29,36:17,internet to the routers here okay so this is actually the design of
330,08-29,36:24,the very old days um internet it is using the digital
331,08-29,36:32,subscriber line okay which is a part of the the telephone network okay
332,08-29,36:39,um at that time the speed is actually slow okay it's not very fast because you
333,08-29,36:46,think about this the telephone network for that the speed is really slow okay
334,08-29,36:52,any special name for the upstream transmission rate the upstream which
335,08-29,36:58,means um from home to upload to the internet the speed is usually smaller than 2.5
336,08-29,37:05,mach bps so mega bps bps means beat pure
337,08-29,37:11,seconds okay um and then the uh downstream
338,08-29,37:19,transmission rate which is the downloading speed is usually faster it's smaller than
339,08-29,37:25,um 24 megabits per second okay
340,08-29,37:31,um so alex is asking is this multiplexer similar to the one in cpu architecture
341,08-29,37:39,um so this multiplexer is uh actually used to
342,08-29,37:45,um thank you actually a sign the packets or signals
343,08-29,37:51,to different home home networks okay and
344,08-29,37:57,later we are going to learn more about this so the multiplexer is like a friday
345,08-29,38:02,for example at home your parents okay make may receive a lot of letters
346,08-29,38:09,letters from letters for you and for your siblings okay
347,08-29,38:15,um for your browsers sorry brother and sisters etc and then
348,08-29,38:21,your parents need to say hey alex this is your letter and then uh maybe another
349,08-29,38:27,and then say to a sister let me say hey this is your letter so basically assign
350,08-29,38:32,the letters to different person that is for multiplexing and later we are going to more learn more about oh this is
351,08-29,38:38,called d multiplexing for example uh and then we also have multiplexing okay
352,08-29,38:44,multiplexing is like collecting the letters from all of you and then send it to the uh the the postal office it's
353,08-29,38:52,like that okay um so here's dsl multiplexer and this
354,08-29,38:59,this is actually like assigning the signal to different uh home networks
355,08-29,39:05,okay is there any server or edge components
356,08-29,39:12,in the telephony network any server or edge component this is a great question
357,08-29,39:18,so um so here the edge components we also have the computers they are this
358,08-29,39:23,belong to the edge it's similar so you can see uh these computers no
359,08-29,39:28,matter how it is connected finally it eventually connected to the routers okay
360,08-29,39:34,so here the routers are still the core and then we may we have those computer
361,08-29,39:39,itself belonging to the edge okay growing to the edge and of course
362,08-29,39:45,here when we we are kind of zoomed out and let you see the details for example in the edge you need to you need to have
363,08-29,39:51,some kind of modem okay this is actually built upon the dsl and later we will see
364,08-29,39:57,if it's built upon the cable it's similar things okay
365,08-29,40:02,um and then do we have several of course we have servers okay so for example we
366,08-29,40:07,may have google's computer here google server here the web server for google we
367,08-29,40:15,may have the web server from csus server okay of course these are just web
368,08-29,40:22,servers and you may also have email several files server again service a lot of servers okay so they are all
369,08-29,40:28,connected in some way to the browsers okay
370,08-29,40:34,then this is the dsl and after that we uh after some
371,08-29,40:40,development we finally realized that the telephone network is not not fast enough because it's usually it only transfer it
372,08-29,40:48,always only uh yes um transfer the digital sorry the the
373,08-29,40:54,audio signals right so it's not fast enough and then after we had tvs and
374,08-29,41:02,then we know okay the cable network is much more powerful than the telephone network because in cable network we can
375,08-29,41:09,hold videos videos basically contain both images and also the audios right so
376,08-29,41:17,a video is basically composed of images and audios
377,08-29,41:22,and then we all know the video actually has much bigger capacity right uh i mean
378,08-29,41:30,and then the cable network are much faster than the telephone network that's why eventually uh we decided to switch
379,08-29,41:38,our infrastructure from dsl to cable but you can think about this even if you
380,08-29,41:45,are using cable still the signal types are different we still need a modem to convert the
381,08-29,41:54,signals from computer into the signals that can be accepted by the cable network
382,08-29,41:59,okay so that's why you in your lane in your home network i guess most of you
383,08-29,42:05,know oh okay we have a router you can probably guess what the router is used for but we also in addition to the round
384,08-29,42:12,trip we also need a modem then what is the modem used for right now you know
385,08-29,42:18,okay the modem is you basically use the for converting the signals and also we
386,08-29,42:23,need a splitter okay the splitter is used to split the signals okay so you
387,08-29,42:28,can see this is an example of the home network and all those home networks are
388,08-29,42:35,connected to a mainline this main line is actually finally converted to the
389,08-29,42:41,keyboard hadn't um so because here there is actually a problem because there are multiple home
390,08-29,42:48,networks connecting to this main line as you can see here then there is a problem the problem is
391,08-29,42:57,um how can we accommodate the signals from different home networks
392,08-29,43:03,right if they all want to transmit something then how can we allow them to transmit at the
393,08-29,43:10,same time then this this is actually uh what we call as a multiple access problem and
394,08-29,43:17,later we are going to especially in the link layer we are going to dedicate some time to discuss that the protocols for
395,08-29,43:24,multiple access okay for now you uh you only need to know we actually have
396,08-29,43:29,different different methods to split the signals or to split
397,08-29,43:35,the entire uh bandwidth to different home networks okay
398,08-29,43:42,for example here you can see for this cable for this one cable we may have
399,08-29,43:47,multiple channel nodes okay we may have here you can see we have actually nine
400,08-29,43:53,channels then the first five the first six channels are for the video
401,08-29,43:58,it's for the caliber okay and then we have two signals two channels for the
402,08-29,44:06,data and one channel for the control so um then for each channel you can see
403,08-29,44:11,both channels one two six even if they are all for the video but
404,08-29,44:18,they still have different frequency right low frequency high frequency so
405,08-29,44:24,for this kind of a um method we call this frequency division multiplexing
406,08-29,44:31,okay that means the different channels transmit the signals in different
407,08-29,44:36,frequency bands okay so then in this way we can tell uh
408,08-29,44:41,the we can we can distinguish the signals from different channels okay
409,08-29,44:47,any questions so far okay
410,08-29,44:53,then um we can use for example we can use for this main
411,08-29,44:59,line we can use a high hybrid fiber coax to do that usually pay attention uh the bandwidth
412,08-29,45:07,the speed is is actually a symmetric for downstream transmission rate and
413,08-29,45:13,upstream transmission rate this is actually very very common usually because most of the users are
414,08-29,45:19,downloading okay uploading is usually very i would say we have less
415,08-29,45:24,opportunity to upload usually so that's why the downloading speed is really much
416,08-29,45:30,faster than the uploading speed okay or we can see the downstream transmission rate is much higher than upstream
417,08-29,45:39,transmission rate okay the transmission rate we know it also has a very well known name it's called bandwidth
418,08-29,45:51,as i mentioned again see how it might process problem okay what if we have multiple users they
419,08-29,45:59,all want to send some signals transmit signal at the same time then they have come some kind of computation to compete
420,08-29,46:06,for for this uh available uh bandwidth here in the main line then
421,08-29,46:12,this is the multi-process network so we will discuss that later that means
422,08-29,46:18,the homes actually share the access network to the cable head end okay
423,08-29,46:24,all right um if we take a closer look at the home network
424,08-29,46:29,you can see here is to and from the head end of the central office then we here
425,08-29,46:37,we have the cable modem all the dsl modem depending which kind of network
426,08-29,46:42,you are using and then we also have the voucher
427,08-29,46:48,here the router is usually now the router is actually very advanced
428,08-29,46:53,originally um in the old days the routers are just router they are just responsible for
429,08-29,46:59,routine but gradually routers integrated the functionality of firewall also okay
430,08-29,47:05,you may ask why how can we integrate firewall why can we increase integrate
431,08-29,47:10,the firewind router if you think about firewall firewall is like a filter okay
432,08-29,47:16,it allows the traffic uh allows specific traffic to come in
433,08-29,47:22,and deny some of the traffic okay so we use basically do some rules to define
434,08-29,47:28,um which traffic can come in which traffic can will be denied so especially if you think about this for example now
435,08-29,47:37,if you want to refuse the traffic from a certain ip address then you can say okay
436,08-29,47:43,if the source ip address is from this this address a for example then all the
437,08-29,47:52,track traffic will be denied that means every time if there is a packet comes in
438,08-29,47:57,then we will check the ip address the source ip address for that package if
439,08-29,48:02,that packet is from a package is from the address we don't like then we just
440,08-29,48:08,deny that package we refuse to pass this to the destination computers
441,08-29,48:14,okay so that's how the file will work the reason we can combine firewall and
442,08-29,48:20,router is because actually all the traffic needs to go through the
443,08-29,48:26,router first and then go to the destination computers that's why we can
444,08-29,48:32,actually filter the traffic here at the router okay and that is another thing
445,08-29,48:37,that is called network address translation i don't want to spend more time here discussing that we will also
446,08-29,48:46,dedicate some time discuss this but uh just to let you know the router can also
447,08-29,48:51,certify that functionality it's basically trans i would say translate the network address from public address
448,08-29,48:59,to private address or from private address to public address okay
449,08-29,49:04,so those are the solar functions for the router
450,08-29,49:09,and then here we also have this this is these are called the wireless access
451,08-29,49:14,point okay most of the time you will say oh that's how the router look like yes
452,08-29,49:21,that's exactly how the router look like at your home usually actually we combine
453,08-29,49:27,this wireless access point with the router okay these two are combined in
454,08-29,49:33,one single box that means your router your router also has the wireless access
455,08-29,49:39,point that's why you see this device at your home okay and in addition to that you will sometimes if you do not use
456,08-29,49:46,wireless you do not use wi-fi you can see this computer is using wi-fi okay so for the other computers they are
457,08-29,49:54,connected to the router directly with the cable okay so then that is called
458,08-29,50:02,that is usually called the ethernet the wider ethernet okay and we may also have
459,08-29,50:08,the wife the phones connecting to the uh what is success point
460,08-29,50:14,so that is about the home network
461,08-31,1:31,they're mean the same thing you really okay in the enterprise network
462,08-31,1:36,the protocol we use is usually ethernet of course we have some like
463,08-31,1:44,wireless network okay but most of the pcs servers are connected via cables
464,08-31,1:51,okay the my cables the protocol guys version is
465,08-31,1:56,the ethernet okay and in the enterprise networks usually we firstly we have the
466,08-31,2:02,servers okay the servers are some machines that are
467,08-31,2:10,dedicated to provide some service to the you to the clients to the users okay depending
468,08-31,2:17,on different type of services we call them different servers but again
469,08-31,2:23,as i mentioned the memory c servers the servers are the computers firstly they
470,08-31,2:29,are the computers and also we refer to the server program sometimes you'll be you may even for
471,08-31,2:36,example install you may even install one sorry
472,08-31,2:42,you may install multiple server program on one machine okay so
473,08-31,2:49,here for example
474,08-31,3:10,foreign
475,08-31,3:17,so if your machine your physical machine is powerful enough and if you're if you
476,08-31,3:24,only serve a small group of people small group of users then sometimes don't even
477,08-31,3:30,need multiple physical machines you can install multiple server programs on one
478,08-31,3:37,machine and then use that one machine to service the server that is also possible okay of course you can also for example
479,08-31,3:44,deploy a number of virtual machines in one physical
480,08-31,3:49,um in one physical machine and then each washing machine serves as a server that is also possible so you can see there
481,08-31,3:56,are multiple ways of implementing this so then in the future when you talk
482,08-31,4:02,about servers we think about this they you don't always think that those servers are big machines sitting in a
483,08-31,4:09,large roomy okay uh we may have a rack of servers it's not like that it may be
484,08-31,4:15,just a regular computer okay depending on how many users you are serving
485,08-31,4:20,and then those servers again those servers they may for example you be used
486,08-31,4:26,as mail servers they need to be used as web servers um there are multiple servers in one
487,08-31,4:32,organization usually and then in addition to that of course we need to have some pieces right
488,08-31,4:38,so these are the pieces personal computers um those personal computers are usually
489,08-31,4:44,by used by regular users okay of course we have multiple client programs
490,08-31,4:50,installed on those client programs are corresponding to the server program for example if you have an email server
491,08-31,4:57,okay then you have email clients so so for example on these emotions you may
492,08-31,5:03,have outlook you may have um apple mail okay so that you can check
493,08-31,5:09,emails or you can even use the web browser to check emails okay and then if
494,08-31,5:15,you have web server then on those clients you may have web web clients
495,08-31,5:20,okay web service clients like the firefox the chrome they are all kinds programs okay so those are the pcs and
496,08-31,5:29,then we need to connect those machines together okay so if this is a small
497,08-31,5:34,network then we can directly connect those machines to one voucher so this
498,08-31,5:40,router we call it as a ad router
499,08-31,5:47,the reason we call this as agile trace because it will be connected to the
500,08-31,5:52,internet directly okay it helps to connect this entire access network to
501,08-31,5:59,the internet that's why we call it address if this network is big
502,08-31,6:06,okay sometimes we are not able to connect those machines directly to one router we may connect them to
503,08-31,6:14,the switch first and then never switch to the router okay so this is a very
504,08-31,6:20,very common and later we will learn the difference between switch and the router
505,08-31,6:25,well now we don't need to know okay so this is like a basic structure for enterprise network or we call it
506,08-31,6:31,institutional network um this is a very commonly used in
507,08-31,6:37,companies universities organizations governments okay and then depending on the size of the
508,08-31,6:45,network and the requirements the demands of the network the benefit of these networks may be different we may have 10
509,08-31,6:51,megaps 100 megaps or two even 10 gigabits transmission rates or bandwidth
510,08-31,6:58,okay so that's the structure so then let's
511,08-31,7:03,continue to look at the mobile network or we could add code column sometimes as
512,08-31,7:08,widest extent works so for our wireless access networks we have usually two
513,08-31,7:13,types one type is called the wireless lens wireless local area networks
514,08-31,7:18,another type is called wireless ones okay wide area network okay wide area
515,08-31,7:27,network
516,08-31,7:32,okay this is a one so for lens we are usually uh they are
517,08-31,7:39,the line is basically means local area network
518,08-31,7:51,okay so wireless lens are usually very small range okay uh it covers a small
519,08-31,7:58,area it's usually within a building for example you can have uh it can cover 100
520,08-31,8:04,feet and though protocol use is usually the wi-fi okay
521,08-31,8:10,or we we call it 80 to 11. so the transmission rate is usually very high
522,08-31,8:17,so that's for land and for what for one it's a usually covers much much wider
523,08-31,8:25,area so usually those ones are using the cellular network okay we'll refer to
524,08-31,8:31,those as cellular network and the speed are usually lower than wi-fi okay much lower than wi-fi
525,08-31,8:39,um and now we have we have 3g 4g lte okay and even 5g is
526,08-31,8:45,coming so that is the one and again pay attention when we talk
527,08-31,8:51,about with the cellular network okay those devices these devices
528,08-31,8:57,do not connect to satellite in directly okay they have to be connected to a
529,08-31,9:02,tower first and then tower is connected to the router to foot and then further to the internet okay so they are not
530,08-31,9:10,connected to the satellite directly pay attention to that so with those in your mind now i want to
531,08-31,9:16,talk some talk about something um that's how the host hits and the package
532,08-31,9:23,to the link okay we want to talk more a little bit more about the bandwidth now
533,08-31,9:28,because we in the past in the networks index all the different type of assets access networks we talk about the
534,08-31,9:35,bandwidth right and we said the bandwidth will affect the speed of the network or the speed of
535,08-31,9:41,transmission then how can the benefit affect that okay so
536,08-31,9:46,we want to know so now let's see this is a computer or a
537,08-31,9:52,horse so this computer is trying to send the
538,08-31,9:57,package out okay so now we have two packets packet one and package two okay each
539,08-31,10:04,packet has l beats lbs okay and we want
540,08-31,10:09,to send each packet out we know the link transmission rate or
541,08-31,10:14,what we call as bandwidth foreign
542,08-31,10:24,then now if we want to send this l b or lbs out into the link
543,08-31,10:34,so it's like we are pushing we are pushing the data
544,08-31,10:40,in this packing one into the cable and if you imagine this cable as a
545,08-31,10:47,if you imagine this cable as a pipe okay and if you imagine the data as water
546,08-31,10:55,then we are trying to push the water into the water pipe okay of course if you have a white water
547,08-31,11:04,pipe then we can push it out much faster right but if you have a very narrow very
548,08-31,11:11,narrow pipe then we can push the data very very slow
549,08-31,11:17,okay then we may take a longer time to push all the water into the water pipe
550,08-31,11:22,so this makes sense to you the width of the pipe reference the benefit so when i see a white uh wider
551,08-31,11:30,pipe i mean a higher bandwidth uh narrower pipe i mean a lower bandwidth
552,08-31,11:37,so now if you think about the time we used to push the data or push the water
553,08-31,11:43,into the water pipe okay it's like the time we used to push
554,08-31,11:49,the data into the link okay so this time we call it as
555,08-31,11:56,transmission delay okay the time is called packet transmission
556,08-31,12:02,delay
557,08-31,12:29,okay the time spent to push the data into the link like like the time spent to pushing the water into the pipe
558,08-31,12:36,now how do we define this transmission delay the transmission delay is defined by l over r k l divided by r so l is the
559,08-31,12:45,number of bits in this packet and r is the transmission rate or the bandwidth
560,08-31,12:50,okay so all you can see is how many bits we can take per second then if the error
561,08-31,12:58,is bigger then the delay is is smaller that means if we have a wider pipe or if
562,08-31,13:05,we have a higher bandwidth then we spend less time transmitting the data also in
563,08-31,13:11,the data out okay does this make sense foreign
564,08-31,13:21,okay so this is a very important this slide is very important
565,08-31,13:28,this may appear on the test and we are going to spend more time actually discussing all the different
566,08-31,13:34,type of delays and transmission delay is one very important type okay one more
567,08-31,13:40,important type and pay attention this time is simply the transmission delay
568,08-31,13:46,it's simply the time you spent on pushing the data out
569,08-31,13:51,okay it actually happens here between the computer the host and or the
570,08-31,13:56,the link okay um question has a time a question are
571,08-31,14:03,packing the same amount of bits each time that's a great question
572,08-31,14:09,i'll say no okay uh the packets have different amounts of bits actually in
573,08-31,14:15,reality okay depending on different protocols um so each packet may have different
574,08-31,14:22,size and even sometimes if one packet has a work it's very big okay especially
575,08-31,14:28,in ipv4 in the ordering four of internet protocol sometimes if one pack is too
576,08-31,14:35,big when it comes to a very narrow network which uh very very narrow
577,08-31,14:41,let's say very uh come to a link with a small bandwidth and also maybe
578,08-31,14:47,especially this link may only allow small size or package going uh going to
579,08-31,14:54,the road then sometimes we even break this one big pack into smaller parts so
580,08-31,14:59,this is called fragmentation and we will learn that later but as you can see as you can see it's
581,08-31,15:06,like when you drive on the road sometimes the road are very wide they can they allow big trucks going through
582,08-31,15:13,but sometimes the roads are very narrow and they allow only small cards to go
583,08-31,15:19,through so it's like that the the amount of bits are different that's great
584,08-31,15:24,question question and other questions
585,08-31,15:30,okay yeah keep this formula in your mind is very important
586,08-31,15:36,okay so then let's continue to discuss the physical media and this part is not very important it's just like introduce
587,08-31,15:43,you to different types of uh medias we may use for the network okay so the
588,08-31,15:50,physical media basically will carry the beats from the transmitter to the
589,08-31,15:55,receiver okay the base will rock it between the transmission receiver
590,08-31,16:01,then the physical link will carry those beats those physical colleagues can even
591,08-31,16:07,can be either guided or unguided usually guided means cables okay we may have for
592,08-31,16:13,example different type of cables copper coax fiber and then for unguided media
593,08-31,16:20,we may have um wi-fi okay we may have radio for example okay so basically the signals
594,08-31,16:26,project propagate freely into all directions it's like that okay
595,08-31,16:32,so here on the right side you can see the twisted pair i think here you are probably very familiar with this i i saw
596,08-31,16:39,this a lot especially in the old days now now it's not very not very common
597,08-31,16:45,obviously um but yeah you you see this a lot actually
598,08-31,16:52,um so this is actually this twist pair is made with copper okay and then you
599,08-31,16:58,may also see the coaxial cable okay the classic cable can transmit the signals
600,08-31,17:05,bi-directionally the signals can go two directions um and then you may also see fiber so
601,08-31,17:13,fiber is really really high speed and usually the it has two advantages
602,08-31,17:19,actually one is high speed second one inside has a very low average okay so
603,08-31,17:25,that's why um later we talk we may talk about error correction error detection and error
604,08-31,17:32,correction let me talk about the reliability transfer usually if you are using like wi-fi you have to really pay
605,08-31,17:38,attention to the error direction detection and the correction but if you are using fiber you don't really need to
606,08-31,17:45,pay attention to pay a lot of attention to that because the low the average is
607,08-31,17:51,very low okay um and then for what is networks we have
608,08-31,17:59,radio so the signals are carried uh basically uh in electron magnetic spectrum okay so
609,08-31,18:07,the signals can go to different directions and also this can be a
610,08-31,18:12,bi-directional that means transmitter consent to receive and receiver can send it to the transmitter and sometimes they
611,08-31,18:20,may sometimes the signal may go two directions and then they may meet in the
612,08-31,18:25,middle so this is for this kind of thing we call this as clearance this is also uh something we need to to address
613,08-31,18:33,actually networking okay uh the i would say the drawbacks of radio is um it may
614,08-31,18:40,be affected by multiple factors like you may have reflection okay you may experience obstruction by
615,08-31,18:48,objects like for example if especially if you're in new york or if san
616,08-31,18:54,francisco when where you see the high buildings and everywhere then in that
617,08-31,18:59,case the mobile the signals can be uh really bad okay and then you may also
618,08-31,19:04,have interference between signals that's another thing you need to pay attention
619,08-31,19:10,um we also have different uh radio link types as we mentioned before we have microwave micro reactive we didn't
620,08-31,19:17,mentioned but we mentioned in the line right wi-fi so we may have white microwave wi-fi cellular network and
621,08-31,19:24,even the satellite network okay so light signals so those are the things
622,08-31,19:30,um about the physical media for this part you don't need to
623,08-31,19:35,remember you don't need to um these are just knowledge for you to
624,08-31,19:41,know like more like the introduction and and in the test i will not asking
625,08-31,19:46,you about the like the fiber coax etc no
626,08-31,19:51,don't worry about that the next thing we are going to talk about is the network core so now we focus now we're called
627,08-31,19:58,again in your mind when we see core we mean the routers okay pay attention to
628,08-31,20:03,that so let's look at the core
629,08-31,20:12,so the network code is basically a mesh of interconnected routers
630,08-31,20:17,we we the routers we also call them packy switch okay uh them basically what
631,08-31,20:25,will happen in the network is if we have if we think
632,08-31,20:31,about different layers again i'm talking about layers because we can never go around with layers
633,08-31,20:37,so
634,08-31,20:50,okay so in now working we have multiple layers and now
635,08-31,20:55,application layer you all know right so application we have those applications like emails webs etc and then eventually
636,08-31,21:03,it will come down to network layer so the routers are actually working on this
637,08-31,21:08,network layer the routers work
638,08-31,21:15,especially on the network layer of course it will also it also has the lower layer like uh link layer and the
639,08-31,21:22,physical layer okay i will see up to network layer okay routers work up to
640,08-31,21:27,networking and then what will happen is in
641,08-31,21:32,networking is if we have a big message okay this message is an application
642,08-31,21:40,layer recorded message and at each later it has a different name okay so usually what we do is we need to break this
643,08-31,21:47,application layer message into smaller pieces
644,08-31,21:55,add different layers okay and then these pieces will finally
645,08-31,22:00,be passed to the network layers then for at the network layer we call
646,08-31,22:05,these pieces as uh the packets okay sometimes we say packages used a lot in
647,08-31,22:12,network but package it's like a general term but a package
648,08-31,22:18,actually if we be very formal package should be used in the network layer okay
649,08-31,22:25,it means the network layer thing and then basically what the router will do is
650,08-31,22:31,the router will carry this packet okay
651,08-31,22:37,carry this packet and pass it so for example if this is the sauce this is the destination then the router will
652,08-31,22:45,carry this package and forward it to the correct router
653,08-31,22:54,okay and you can see we may have different parts here here is called the routing actually okay and later again we are
654,08-31,23:01,going to talk more about this but now you can see this is uh the major functionality of the router okay the two
655,08-31,23:09,functions are one of the function is actually called the routine okay the other section is called forwarding
656,08-31,23:17,forwarding forwarding basically means for example when this package when this router receives a packet and then this
657,08-31,23:25,router needs to decide should i forward it to this router if we have a b
658,08-31,23:33,c and d okay this router a it receives a packet
659,08-31,23:38,it will need to decide should i forward this package to b or to c
660,08-31,23:43,okay so this is called forwarding and routine is more like more big picture
661,08-31,23:49,right routine is like choosing a path like this okay
662,08-31,24:00,but for wording as you can see forwarding is actually like it's local and locally i need to decide which
663,08-31,24:07,interface i should forward to okay question is mentioning using diagram
664,08-31,24:13,great yeah that's great point when we do the routine we need to use it we usually
665,08-31,24:19,need to choose the shortest path right or the least cost part so di construct
666,08-31,24:26,algorithm is actually one very important uh component in the routing although
667,08-31,24:31,this is not the only um algorithm used in your routine but it's a very important one okay and a
668,08-31,24:39,very commonly useful one in routine and we are going to talk more about that in the network layer
669,08-31,24:44,thanks for pointing out thanks for pointing out the question
670,08-31,24:51,any other questions or comments okay then now let's talk about how a
671,08-31,25:00,router worked okay and here again you can see we have a source computer a destination computer
672,08-31,25:07,and you can see the link has a bandwidth of our again rbps vps i
673,08-31,25:14,mean beats per second okay this one also has rbps okay they may i
674,08-31,25:21,mean the link capacity may be the same or maybe different it doesn't really
675,08-31,25:27,matter okay so here we can have r1 r2 maybe okay but force us
676,08-31,25:33,um simplicity here we just assume those two links should have the same bandwidth
677,08-31,25:40,which are okay and now we have three packets
678,08-31,25:45,one two three each packet has l beats
679,08-31,25:51,okay each pack has all these and they pay attention the router when
680,08-31,25:57,it works if you use a mechanism called store and forward what does this mean
681,08-31,26:03,this means when the routes are forward the package
682,08-31,26:08,it needs to wait for the whole package to arrive okay
683,08-31,26:15,yes this packet is not complete then the router will not send this out
684,08-31,26:20,it will not send an incomplete packet out okay so it will wait until the
685,08-31,26:27,entire package comes in the package is stored in the launcher and then the
686,08-31,26:32,router forward it out so this is called store and forward
687,08-31,26:38,okay and now you can see if you recall what we have just learned
688,08-31,26:48,here do you still remember here when we talk about pushing the data into the link right so it happens at the computer
689,08-31,26:55,side basically this computer needs to spend l
690,08-31,27:02,over r time to push the data into the link this is called the transmission
691,08-31,27:09,delay this is the delay happened at the route at the computer side okay at the
692,08-31,27:15,computer side and now if you look at this scenario
693,08-31,27:24,in this scenario the data first will be put will be pushed from the computer
694,08-31,27:30,let's see if this is a and a b okay it will be pushed from a into the link
695,08-31,27:38,and can you tell me the transmission delay we spent here
696,08-31,27:44,can you tell me how much time do we need to push
697,08-31,27:49,do we need to push one packet into the link
698,08-31,27:54,based on what we have learned before can you tell me the time let's see this is arrow one this is l2
699,08-31,28:02,from a to l1 we see the time we spend is lor actually right it's l over
700,08-31,28:10,this panahira is our or okay and then when the packet won when the
701,08-31,28:18,packaging one arrives at the router thus the router need to push it out
702,08-31,28:25,again yes the router need to push it out again
703,08-31,28:31,to link l2 why because here we haven't received we haven't
704,08-31,28:39,arrived at the destination yet right so of course the router need to push it out again can you tell me how much time do we need
705,08-31,28:47,to spend here at the router to push the data out
706,08-31,28:54,or formally we can see how much time what is the transmission delay as the
707,08-31,29:01,router that should be l over right that should be l over r
708,08-31,29:09,again okay of course if these are a different then here for l y if this is
709,08-31,29:15,r1 okay for l2 if this is r2 then i would say l-o-r-2 it depends on
710,08-31,29:22,the link right so then if r1 equal to r2 then in total
711,08-31,29:30,finally i mean the next step is the packet arrived at the destination right so when the packet arrives at the
712,08-31,29:37,destination do we need to push it out again no need right because it already arrived
713,08-31,29:43,at the next destination why do we need to push it again so then in total if you think about this
714,08-31,29:49,entire process how much time do we spend to push the
715,08-31,29:54,data to the link what is the total transmission delay if
716,08-31,29:59,you think about this
717,08-31,30:12,the total transmission delay is actually the time we spend at r1
718,08-31,30:20,sorry the ethnic one and the time we spent at the launcher link two
719,08-31,30:26,so it's lor1 plus lor2 if if r1 equal to
720,08-31,30:31,r2 then we have 2 l over r okay so in this example if l equal to
721,08-31,30:37,7.5 magnitude max this and r equal to 1.5 microbps then the one-hub
722,08-31,30:44,transmission is actually 7.5 over 1.5 which is a this is 7.5 over 1.5 which is 5 right
723,08-31,30:54,then at basically that means at at the computer a we need to spend five seconds
724,08-31,30:59,at the router side we need to simplify five seconds so in total the transmission delay is actually 10
725,08-31,31:06,seconds okay and we are going to discuss more about the delay in the future but this is a
726,08-31,31:15,definitely the beginning okay i really hope you pay attention to this and this
727,08-31,31:20,will be on the test
728,09-01,0:03,transmission delay which is actually the time you spent to push the data to push
729,09-01,0:10,the data out to the link it's like you have water here in the water tank and
730,09-01,0:16,then the water takes time to flow into the link to completely follow into the
731,09-01,0:22,link okay into the water pipe so it's the same thing so for 1.3 we will introduce network
732,09-01,0:30,core can you still record what is in our core
733,09-01,0:37,are the data centers in our core are the servers in the network core
734,09-01,0:43,so the network record is just just to the routers okay so
735,09-01,0:49,um it's basically a match of internet interconnecting routers like this okay
736,09-01,0:55,and um so basically what the function of the
737,09-01,1:02,network call is to forward the package from one router to another and then to
738,09-01,1:07,another and then to another and finally it will arrive at the destination okay
739,09-01,1:13,so that is the function for network call um each packet is transmitted at the
740,09-01,1:18,four link capacity um so
741,09-01,1:24,then some of you may ask how can we get the packets so we generally
742,09-01,1:30,um later you will learn uh when we send something out this something is called
743,09-01,1:36,message after the application layer okay for example email message http request
744,09-01,1:41,message okay it's called a message and then when it goes to a layer below like
745,09-01,1:48,the transport layer we will we have to break this message into smaller pieces which are called
746,09-01,1:56,packets okay of course are different later they have different names sometimes they'll cause the datagram
747,09-01,2:02,sometimes they are called packets okay sometimes they are called frames uh and
748,09-01,2:07,for now we will just call them packets but later uh we you will learn the names
749,09-01,2:14,at each layer okay so here again we want to talk about the
750,09-01,2:20,lor thing okay so pack a switch
751,09-01,2:25,um package which include the ruptures and the um switches so here we are we talk about
752,09-01,2:33,routers for now okay the functionality for pack switch is the
753,09-01,2:39,package switching we call it package switching okay and it use it use some
754,09-01,2:44,method or mechanism called store and forward so what is stone forward
755,09-01,2:49,let's look at this example here in this example we have three packets okay uh
756,09-01,2:55,one two three and you can see uh we will send the package we will send the data
757,09-01,3:01,to the link okay and then they have arrived at the router
758,09-01,3:08,so stone forward means the entire package must arrive at the
759,09-01,3:16,router before it can be transmitted onto next link
760,09-01,3:22,okay so for example if you look at the packet of one half of the packet has already been sent
761,09-01,3:29,had already been delivered to the router okay and the other half is still here at the computer
762,09-01,3:35,now in this case the router cannot send this half onto the link because this
763,09-01,3:43,packet is not complete yet okay it will wait until the entire packet is clicked
764,09-01,3:50,is is complete and then send the data to this link
765,09-01,3:55,okay so this is called store and forward why do we need to discuss stone forward
766,09-01,4:02,because we need to understand the transmission delay again okay do you
767,09-01,4:09,still remember transmission delay i told you here right i said is the time we use
768,09-01,4:17,to push the data to the link okay push the data out to
769,09-01,4:23,the name and you can think about this in this example in this example okay
770,09-01,4:30,so of course at the computer side firstly we need to put this push the
771,09-01,4:35,data out okay let's assume again that the package
772,09-01,4:40,is lbs okay now how much time and also the
773,09-01,4:46,bandwidth of the transmission rate for the first link is our okay
774,09-01,4:52,r bts rbs per second then let me ask you the question how much time is needed
775,09-01,5:02,to push the data to push one package out to to the link
776,09-01,5:10,can tell me anybody want to a gas or i will try
777,09-01,5:20,how much time is needed to push one package
778,09-01,5:25,to the knee kyle and uh hey kyle said uh uh l over r
779,09-01,5:35,that is correct excellent so yes the time we need it here we can go to dt1
780,09-01,5:43,transmission delay 1 equals 2 l over r okay
781,09-01,5:49,and then those data will flow flow flow and then come to the launcher
782,09-01,5:57,so again the router will and wait until the entire packet is complete and then
783,09-01,6:04,push data out again okay so let me ask you a question do we
784,09-01,6:10,have transmission delay at the router
785,09-01,6:15,the way how transmission delay at the router that means do we need to spend some time
786,09-01,6:22,pushing the data out again from the router
787,09-01,6:28,yes because the data now the package is arrived at the router right we also need
788,09-01,6:33,to push it out so yes it still takes time to push out again it's like the
789,09-01,6:39,water flows from one tank to another tank okay it needs to flow off again so then
790,09-01,6:46,the time spent here can you tell me the time spent here equal to what
791,09-01,6:51,dt2 equal to what so that is l over r again why because
792,09-01,6:58,the package size is still l okay and the link the second link also
793,09-01,7:05,has a bandwidth of r so that's why it's l over r again okay
794,09-01,7:11,and then finally the data now arrived at the computer okay at the destination
795,09-01,7:17,if you consider the entire process if we do not consider any other delays
796,09-01,7:23,whatever okay we only consider the transmission delay we only consider the time we spent on pushing the data out
797,09-01,7:30,how much time in total did we spend on pushing the data out to
798,09-01,7:37,the link so it's just a dt1 plus dt2 right okay
799,09-01,7:43,that's great if you look at the example on the right one hop numerical example
800,09-01,7:49,in example l equals 7 0.5 mbps mbs and r equals to 1.5 mbps
801,09-01,7:58,so then lor equal to 5. that means for
802,09-01,8:04,one hub transmission delay that is uh five seconds okay so what what does one
803,09-01,8:10,hop mean one hop means here you can say uh from from here to here is one half from
804,09-01,8:18,here to here is another half okay um then in this example in total we say
805,09-01,8:25,okay the dt equals to d t one plus dt2
806,09-01,8:31,can you tell me the total number foreign
807,09-01,8:36,that equals 2 actually 10 seconds
808,09-01,8:43,okay so that equal to second in this example that is the transmission delay
809,09-01,8:48,we spent okay so the reason we have dt2 is because
810,09-01,8:55,of these store and forward mechanism okay any questions
811,09-01,9:06,all right so actually there are many other types of delays okay in this one
812,09-01,9:13,we only talk about uh some some of them and later when we talk about the
813,09-01,9:18,performance of the network i will introduce more okay for now let's consider another type of delay that is
814,09-01,9:26,queuing delay so what is you think about this when the pack is
815,09-01,9:32,arrive at the barometer the router needs some time to work on those packets for
816,09-01,9:37,example it may check the headers let me check the ip address it may
817,09-01,9:44,do some error checking etc okay it takes time for the router to deal with this
818,09-01,9:50,package that means the router may be slow but the incoming
819,09-01,9:57,rate can be fast okay that means that there
820,09-01,10:02,there are more and more packets coming in so those packets cannot be dealt with
821,09-01,10:09,quickly now in this case they will be queued in the router and waiting to be
822,09-01,10:15,sent out okay so that is the queuing delay it's like it's just like uh when you go
823,09-01,10:22,to my office hours okay for example i need to spend time
824,09-01,10:28,um students okay on each student and then you that if there are so many students
825,09-01,10:35,coming in then this you don't have to be queue there okay that is the queuing delay
826,09-01,10:41,um currently usually indicates the network in the launcher at least the router is very busy
827,09-01,10:48,okay indicates the launcher is busy that's further indicates the network is
828,09-01,10:53,probably congested okay it's probably congested um but this is uh this is a
829,09-01,11:02,not the worst scenario okay even worse is sometimes the round should get too busy
830,09-01,11:09,okay uh and the router as you can see the launcher needs in some place to
831,09-01,11:16,store those um those packets so that is called the buffer
832,09-01,11:22,okay each router has a buffer to store those cute packets and sometimes the buffer is a full if
833,09-01,11:29,the buffer is a 4 and if there are still incoming packets what will happen
834,09-01,11:37,the the router will say oh i cannot hold more packets i cannot accomplish more so
835,09-01,11:43,i have to drop you okay then in this case we will have
836,09-01,11:49,data loss okay packet loss the package can be dropped if the memory
837,09-01,11:55,or buffer fills up okay it's just like when you go to my office hours i say oh
838,09-01,12:01,i can my my office can only outcome the 10 students okay if you are the 11th one
839,09-01,12:06,if you come in then i'll just kick you out okay so that is why the loss happens
840,09-01,12:12,in the test i may ask you
841,09-01,12:17,uh what are the reasons for queuing delay and what are the reasons for loss
842,09-01,12:24,okay uh you can see the reason for q delay is because the incoming rate is much faster
843,09-01,12:31,than uploading rate okay the reason that the loss can happen is because the memory or the buffer of
844,09-01,12:38,the voucher is for okay so then let's continue to discuss the two network core functionalities
845,09-01,12:46,so the network code usually have two functions one is routing another one forwarding routine means determine the
846,09-01,12:54,source to destination routes taken by the packets okay um
847,09-01,13:00,the forwarding means move the packets from the wrong stress input to appropriate output okay so you may say
848,09-01,13:09,what are the differences what are the difference between routing and forwarding it is very different
849,09-01,13:17,um let's use the analogy of travel again okay so if you travel from new york to
850,09-01,13:26,chicago sorry yeah sorry and if you travel from let's say sacramento
851,09-01,13:34,okay to new york
852,09-01,13:40,okay and if this is chicago
853,09-01,13:48,and if this is l a okay so you may decide to travel from chicago
854,09-01,13:55,to new york or you want to travel from la to new york okay so these are the
855,09-01,14:03,different rocks different ones when you choose the rubs that is the
856,09-01,14:10,routine okay for wording is like when you arrive at chicago
857,09-01,14:17,okay she covered me how many incoming links and outgoing links to other cities okay
858,09-01,14:23,so when you arrived at chicago chicago need to decide oh okay so you need to go
859,09-01,14:29,to a biscuit okay in order to go to new york
860,09-01,14:34,so this is like forward forwarding you from the input ports to the output port
861,09-01,14:41,took to the appropriate output port and you may ask how could we do the
862,09-01,14:47,forwarding okay so routine is like determining the route okay foreign is like uh forward
863,09-01,14:56,the the packet from the incoming port input port
864,09-01,15:02,to the appropriate output cost does this make sense it's like when you
865,09-01,15:08,arrive at chicago chicago will need to determine oh there are so many gates okay these are all the gates
866,09-01,15:16,foreign for you to to board again to fly again
867,09-01,15:24,how can we determine the route right who will determine the route the routing algorithm will determine the route and
868,09-01,15:31,who how can we determine the forwarding how can we do the forwarding okay i haven't talked about that part yet so
869,09-01,15:38,when we do the forwarding here for this example analogy you know okay i want to forward this person to this gate okay
870,09-01,15:47,how do we determine that uh in in networking it's similar things in networking we have something called the
871,09-01,15:53,local forwarding table local foreign people will check the header value of
872,09-01,15:58,each packet okay so the header value usually contains for example the ip address later we are going to talk more
873,09-01,16:03,about that but for now you only need to know oh okay each packet may have a header value
874,09-01,16:09,and then the router will check the header value to decide the output link
875,09-01,16:15,for example this one is zero one one so zero one one means oh i need to forward
876,09-01,16:20,this package to up output link two that means this one
877,09-01,16:25,okay so that is how the forwarding is done and some of you may ask uh then how
878,09-01,16:31,can we determine this local 4 on the table that is a great question so determining
879,09-01,16:38,local foreign table we have to use routing amazon the
880,09-01,16:43,routing algorithm the router will basically run the wrong key algorithm to determine the local forwarding table and
881,09-01,16:51,then the router will follow this local community board to do the forwarding okay answer for how we will discuss this
882,09-01,17:00,later in the network layer okay in the one two three four probably the fourth
883,09-01,17:05,capture okay we will determine uh the how we can run rough calcium and then
884,09-01,17:11,determine the local following table okay next the last discuss another type of
885,09-01,17:17,core okay we just talk about the packet switching after there is another type of
886,09-01,17:24,network code which is called circuit switching okay
887,09-01,17:30,so what is circuit switching um circuit switching is very special
888,09-01,17:35,okay for now let's say you have destination you have computer a and computer b they want to communicate okay
889,09-01,17:44,surface which is like reserved around for them
890,09-01,17:49,okay reserve are right for them for example you can see now each link we have four links now okay this link
891,09-01,17:56,this is called a link and each link has a full circuit as you can see circuit
892,09-01,18:01,one two three and four
893,09-01,18:06,okay so each link has a four third circuits
894,09-01,18:11,if a wants to talk to b what we can do is we reserve
895,09-01,18:19,this link sorry this circuit and
896,09-01,18:24,this circuit so we reserve these two circuits for the
897,09-01,18:30,communication between a and b nobody else can use it only a and b can use
898,09-01,18:35,this to communicate so it's like telephone network okay it's uh that means it's dedicated
899,09-01,18:43,resource okay and there's no sharing it has a certain like performance the
900,09-01,18:49,performance is guaranteed because nobody else is competing with you okay
901,09-01,18:54,you can use this this uh this link uh this circuit
902,09-01,18:59,um uh if you want okay and pay attention
903,09-01,19:05,because no sharing happens okay so this surface segment may idle may get idle if
904,09-01,19:13,no one is using it if a is not using this circuit okay nobody else can use it
905,09-01,19:20,so then the circuit is is it becomes idle okay so this is commonly used in traditional
906,09-01,19:27,telephony networks uh it is not used very often now okay it's not usable now
907,09-01,19:34,it's all like also time design any questions
908,09-01,19:43,okay so pay attention again circuits which is like reserved okay reserved
909,09-01,19:50,resources dedicated resources okay uh but when we see reserved or dedicated
910,09-01,19:56,that doesn't mean uh a and b will will take this circuit forever
911,09-01,20:03,okay no no it's not like that okay it's just the mains it's just the means
912,09-01,20:10,um uh this uh this this this uh this
913,09-01,20:16,circuit may be reserved for example for a certain time so between this for
914,09-01,20:22,example this is a second nobody else can use it okay between this second this is
915,09-01,20:27,a reserved for end okay or it can be um reserved in some other way for
916,09-01,20:33,example uh as as here we will see it can be frequency different okay so let's
917,09-01,20:38,talk about two ways for reserving huawei is called free consideration
918,09-01,20:49,okay let's see if we have four users and then we we have only one channel how
919,09-01,20:56,can we allow for users to communicate at the same time if they all want to use this channel
920,09-01,21:03,what we can do is we divide the this entire channel into different frequencies okay then each user will use
921,09-01,21:11,its own uh frequency okay that's mommy another way is we do
922,09-01,21:20,time limit so time dna basically means oh i can divide the time and
923,09-01,21:28,um so at the for example if each each uh bar here is just one second so then the
924,09-01,21:36,blue user can use this many seconds okay first seconds uh fifth second it's like that okay the
925,09-01,21:43,green users can do this okay it is reserved in that second for
926,09-01,21:50,the blue users of reusers okay nobody else can use that does this make sense
927,09-01,21:57,this is time table time with emitter might flexing and
928,09-01,22:04,frequency dividend might collection okay um let me give you an analogy
929,09-01,22:11,when you drive on the road so you may have one rope and we have so
930,09-01,22:18,many different types of cars driving on the road right foreign is like oh i have this many cars
931,09-01,22:28,there's many different uh types then i can divide this road into different
932,09-01,22:34,lengths different lens
933,09-01,22:40,okay for example i may have buses
934,09-01,22:46,on this line and small cars on this line and trucks
935,09-01,22:52,i'm listening okay they can only drive on their own land they cannot use others
936,09-01,22:59,lens okay that is the frequency given time remainder is like
937,09-01,23:05,okay i have only one road okay so the first hour
938,09-01,23:16,for the first hour only buses can drive okay buses can be here for the entire
939,09-01,23:23,life can can use any any um we have no lens now okay
940,09-01,23:31,so the bus can drive in whatever way it is like it likes okay so the second
941,09-01,23:38,hour we will have smaller cuts to drive on the road nobody else can use this room
942,09-01,23:45,and the third hour only trucks
943,09-01,23:52,only trucks can drive on the road nobody else can use that so it's like that and
944,09-01,23:58,of course the fourth algorithm will help us again fifth we'll have cards again okay any questions
945,09-01,24:10,okay okay so then for circuit switching and packaging
946,09-01,24:16,we know they are different package switching we do not do any reservation which is not dedicated resources if you
947,09-01,24:23,want to send something you can go ahead to send it but we cannot guarantee the resources are available for you
948,09-01,24:31,okay for circuit switching we will guarantee you have resources okay which
949,09-01,24:37,way is better okay which way is better the conclusion is
950,09-01,24:43,packing switching allows more users to use the network
951,09-01,24:48,okay um how do we know that we can do some
952,09-01,24:53,calculation okay now we assume we have a link that is one mbps one m means one
953,09-01,25:02,mega bits per second okay so this is the benefit of the link
954,09-01,25:08,that's basically equals to 1000 kb per
955,09-01,25:15,second right one mega beats equal to one thousand kb
956,09-01,25:21,then um we assume
957,09-01,25:26,if the user is active active means it wants to communicate it
958,09-01,25:31,wants to transmit data then this user
959,09-01,25:37,will use 100 kb per second okay
960,09-01,25:43,and also for every user the average time for it to be active is
961,09-01,25:50,just 10 percent of the time okay it's not always working right it's it will
962,09-01,25:56,works only for 10 of the time okay
963,09-01,26:01,um then in this case let's do some calculation if we are using circuit switching how
964,09-01,26:09,many users can be accommodate you think about this for circuit switching we need to reserve the
965,09-01,26:18,resource for the users so how many how many users can be accommodate
966,09-01,26:27,so basically we have in total 1000 kb per second this is the total
967,09-01,26:34,resource we have right and each one each user want to use
968,09-01,26:40,100 pb per second
969,09-01,26:46,that means we can accommodate at most 10 users
970,09-01,26:52,right so it's like you have 1 000 airports each person
971,09-01,26:58,wants to get 100 airports so how many people can you can you can give airport
972,09-01,27:03,you can give only 10 people okay so it's like that
973,09-01,27:09,very simple very straightforward but how about pack is switching
974,09-01,27:15,for package switching how many users cannot complete
975,09-01,27:21,okay so here we give an example if we have 35 users
976,09-01,27:28,if we have 35 users keep in mind again those 35 users are
977,09-01,27:35,not always working each user will only be active for 10 percent of time
978,09-01,27:42,okay and again if they are all working of
979,09-01,27:47,course we cannot we cannot accommodate that many users right as long as there are less there are 10
980,09-01,27:54,or less users being active then we are good okay because we can accommodate and most
981,09-01,28:01,10 users at the same time then you may want to calculate
982,09-01,28:06,what is the probability for more than 10 users being active at the same time
983,09-01,28:14,because if this probability is very big very high
984,09-01,28:19,that means it's not good because there are always more than 10
985,09-01,28:24,million for example there are always modern users being active then
986,09-01,28:29,then um there are some users who cannot use the resources right but if the
987,09-01,28:35,probability is a very low that's a good thing okay
988,09-01,28:41,actually if you do the calculation the probability for 10 users being active at
989,09-01,28:48,the same time is less than 0.0004 it's a very small probability
990,09-01,28:56,okay that means it's a good thing okay that means we can actually accompany
991,09-01,29:03,a lot of users because not many will be active at the same time
992,09-01,29:09,okay so some of you may ask how do you how did we get this value this value is calculated using the
993,09-01,29:18,probability theory so basically for example if we have 11 users being active
994,09-01,29:24,at the same time the probability is a month 35
995,09-01,29:30,we randomly choose 11. okay and for the 11 users sorry
996,09-01,29:40,the 11 users we want them to be active at the same
997,09-01,29:46,time this is a 0.1 to the power 11. times
998,09-01,29:52,for all the others they have to be silent okay so that is 0.9
999,09-01,29:58,times all the others means the remaining 24 users
1000,09-01,30:04,okay plus if we have 12 users
1001,09-01,30:11,being active at the same time so that is 35 we choose tau randomly and then
1002,09-01,30:19,0.1 to the power of 12 times 0.9 to the
1003,09-01,30:25,power 23 because 23 also need to be silent plus c
1004,09-01,30:31,35 which was 13 0.1 13 0.9
1005,09-01,30:37,[music] uh 22 plus continue until you are done
1006,09-01,30:44,with all 35 users okay that's how we get the probability
1007,09-01,30:50,so for this class you do not need to understand or remember this one no need
1008,09-01,30:56,okay no need to remember the formula okay this is just to to uh show you how
1009,09-01,31:03,we get the probability so the takeaway message
1010,09-01,31:08,take away message is pack your switching can accommodate much
1011,09-01,31:15,more users than circuit switching as you can imagine okay
1012,09-01,31:20,but is package switching uh a slam dunk
1013,09-01,31:26,winner okay we will say not naturally but most of the time packs which is better than
1014,09-01,31:33,circuit switching okay package switching is great for birthday data
1015,09-01,31:40,um so for example uh if you want to send a lot
1016,09-01,31:46,of data the video data for example a lot of data i mean in a very short period
1017,09-01,31:51,okay then package switching is is of course much better because you don't need to reserve things for others you
1018,09-01,31:59,only need to utilize the resource as much as possible okay and it's very simple there is no
1019,09-01,32:06,core setup for circuit switch if you want to share data you want to transmit
1020,09-01,32:12,it and you have to set up a call first okay
1021,09-01,32:18,um but the the the the down point okay the
1022,09-01,32:23,drawback of the package meeting is that you may experience the packet delay and loss because of the excessive congestion
1023,09-01,32:31,you can imagine if a lot of users they all want to transmit data out then the network is too busy then in this case we
1024,09-01,32:38,may experience the packet loss and delay okay um so in this case we may want to
1025,09-01,32:44,address that issue what if packet is delayed what if a packet is lost so we
1026,09-01,32:50,may need some protocols to address that issue um the protocols is called reliable data
1027,09-01,32:56,transfer protocol okay and we may also need to do some congestion control to avoid a lot of users
1028,09-01,33:04,overwhelming the network at the same time okay so that is congestion control
1029,09-01,33:10,uh so then the question becomes oh how can we
1030,09-01,33:15,accommodate more users while we can steal uh guarantee the performance okay
1031,09-01,33:23,this is like the circle like behavior how to provide circular behavior which
1032,09-01,33:29,means guarantee the performance while we can still accommodate more users
1033,09-01,33:35,uh unfortunately this is steel and unsolved problem okay
1034,09-01,33:42,uh the the researchers are still working really hard to address this problem
1035,09-01,33:49,okay um so that's all about the package meeting and the circus meeting
1036,09-07,0:03,all right so the next thing i'm going to discuss is about a network uh structure
1037,09-07,0:08,or we say internet structure okay so we mentioned at the very first i mean the
1038,09-07,0:16,second class we've discussed or the third class act so when we do the discussion i asked what is network and
1039,09-07,0:22,most of usa network is a combination of nodes and links okay so basically we
1040,09-07,0:29,know okay we have a number of devices and we need to connect them together but the question is
1041,09-07,0:36,the question is how can we connect those devices together throughout the study we have we have
1042,09-07,0:43,done so far you learned that it is not possible to connect every device to the
1043,09-07,0:51,other device directly with one cable you imagine this this is this the scalability is is a really bad okay so
1044,09-07,1:00,that's why that's why instead of connecting those devices directly with
1045,09-07,1:06,cables okay we usually we need something called network code the routers in
1046,09-07,1:12,between right routers in return to connect those devices so basically we
1047,09-07,1:18,have access networks okay access now works means the
1048,09-07,1:23,institutional network the residential network the mobile networks okay so
1049,09-07,1:29,those devices will access internet through the access networks so those
1050,09-07,1:34,devices will need to be connected to the access networks first and then the
1051,09-07,1:39,access networks are connected to the routers to the internet core okay
1052,09-07,1:47,and we can see we can also support those access networks sometimes we also call them access isps okay so uh i shouldn't
1053,09-07,1:56,say this i should say the access is access internet service providers sp or
1054,09-07,2:03,internet service providers like comcast atnt they are all internet service providers so those access isps basically
1055,09-07,2:12,provide those access networks for you to connect okay
1056,09-07,2:18,so that's why we also have residential isp company isp university isp okay so
1057,09-07,2:26,then the question becomes oh we have those excess isps how can we connect
1058,09-07,2:31,them together okay because if you do not connect them together they are still isolated
1059,09-07,2:38,it's still it cannot be called as internet okay so then we need to connect
1060,09-07,2:44,them together how can we connect them together let's look at an example
1061,09-07,2:49,so the question is given millions of access isps how to connect them together
1062,09-07,2:56,we can imagine how many access isps we have right so your home network can
1063,09-07,3:02,become access network your company network university network they are all
1064,09-07,3:07,access networks okay how can we connect them together can we do this
1065,09-07,3:14,can we connect each isp to every other access isd
1066,09-07,3:19,select this what do you think
1067,09-07,3:27,how to set a weekend but not a good idea what do you think what do others think
1068,09-07,3:34,is this a good idea connect each one probably didn't see this clearly let's see connect each one
1069,09-07,3:41,with every other this can this we can do this right it's
1070,09-07,3:48,like we connect it's similar actually to the question we discussed before regarding devices we can of course
1071,09-07,3:55,connect each device with with every other device but it's not scalable
1072,09-07,4:01,okay okay so you all agree that this is not a good idea
1073,09-07,4:07,it's the same thing here in this in this question okay if we connect each access
1074,09-07,4:12,isp to every other it says ip isp this
1075,09-07,4:18,does not scale why if you think about this if we have n
1076,09-07,4:29,if we have any networks or an access networks okay so then
1077,09-07,4:35,when we connected the first one with every other one we need to make n minus
1078,09-07,4:40,one connections right then for the second one
1079,09-07,4:48,for the second one we need to connect to every other
1080,09-07,4:53,excel network we need to make another uh minus two connections because it is
1081,09-07,4:59,the second one is already connected to the first one okay so that's why it's a minus two
1082,09-07,5:05,then the third one and minus three the fourth one
1083,09-07,5:11,and minus four so we'll continue until we only need to make one connection so
1084,09-07,5:17,this is the number of connections we need to make if you have learned how to
1085,09-07,5:22,calculate this okay this basically equal to one plus
1086,09-07,5:29,a minus one this one plus this one
1087,09-07,5:37,time the number the number the total number is n minus 1 divided by two
1088,09-07,5:44,so this is basically n times n minus one divided by two so you can see
1089,09-07,5:54,okay so this is okay so that's why you can see the
1090,09-07,6:01,complexity is actually o big n2
1091,09-07,6:06,okay all big and square then this doesn't scale that's why this is not a good idea that's why we want to use
1092,09-07,6:15,something in the middle to connect every access network okay so
1093,09-07,6:20,now what is in the middle if what we put in the middle is called the isp global ist which can provide a
1094,09-07,6:29,number of routers okay but can we have one global isp
1095,09-07,6:36,apparently no why because
1096,09-07,6:43,we may have competitors okay
1097,09-07,6:48,you may have competitors
1098,09-07,6:54,jim said okay no problem james please go ahead to
1099,09-07,7:01,reconnect and rejoin if you need okay sorry for interrupting
1100,09-07,7:07,um so as we said we cannot have one global sp we may have competitors then
1101,09-07,7:13,the competitors here means we have a number of isps and we may have ispa ispb
1102,09-07,7:19,ispc okay or even more so it's like we have comcast att so this is
1103,09-07,7:29,this is within one country of course between the countries we may also have other competitors right so it's like in
1104,09-07,7:36,china we also have other uh sp providers okay so then
1105,09-07,7:43,now we have ice piece so you can see all the access networks are connected to isp
1106,09-07,7:48,to the isps but we still need to connect those isps together if they are not
1107,09-07,7:54,connected together then again this internet is is not an internet right it's not connected
1108,09-07,8:00,so then we will connect them using some peering links okay and on top of this okay we may have
1109,09-07,8:08,some internet exchange points okay it's still used to connect those
1110,09-07,8:14,um those isps okay the functionality is basically the same as the peer links okay
1111,09-07,8:23,and then we may also have some regional networks the regional networks can
1112,09-07,8:29,connect those access networks and then be connected to the global isps or
1113,09-07,8:34,connect to the to the isps okay on top of that we may also have some other
1114,09-07,8:41,content provider network so what are those uh basically some big companies
1115,09-07,8:46,like google you think about this like google microsoft especially for those
1116,09-07,8:52,um video providers like youtube right so they do not want to use
1117,09-07,8:59,the services from the internet service providers why because they need to pay a
1118,09-07,9:05,lot of money so some of those big companies they may run their own network
1119,09-07,9:11,they may want to bring the services closer to the users okay so the users
1120,09-07,9:18,can get faster speed you can access their resources faster like downloading videos faster like that so those those
1121,09-07,9:26,networks established by those big companies are called the content provider network okay
1122,09-07,9:33,later when we talk about the video applications we are going to discuss more about this
1123,09-07,9:38,but now you can see you can see the structure okay the structure of internet is basically a network of networks we
1124,09-07,9:47,have a bunch of excess ice piece and then on top of that
1125,09-07,9:52,we have regional isps which may connect to the access isps and then we have some
1126,09-07,9:58,tier 1 isps and also the content provider networks so those all these things are connected
1127,09-07,10:06,with each other okay they are interconnected so that's like the structure of the internet okay
1128,09-07,10:13,any questions so far i xp
1129,09-07,10:27,okay xp is internet exchange point so as we have
1130,09-07,10:33,learned here do you see okay so basically sometimes we use uh
1131,09-07,10:41,those those links called periodics to connect the isp together but sometimes we use
1132,09-07,10:46,internet exchange points to connect those isp together
1133,09-07,10:52,okay any other questions
1134,09-07,11:00,okay all right so then you can see uh this is a like the theorem or one example for
1135,09-07,11:08,tier one isp this is the network for sprint and uh you may say the those red points
1136,09-07,11:16,are called point of presence so those point of presents are very important so
1137,09-07,11:22,they have routers to connect to the backbone network and they also have the
1138,09-07,11:27,routers connected to the customers and then they need those routers be connected to each other okay so to make
1139,09-07,11:35,this entire network work all right so that's all about the network core any questions so far
1140,09-07,11:48,okay so the next thing we are going to discuss is about uh the performance of
1141,09-07,11:54,the networks including the delays the loss the throughput etc
1142,09-07,11:59,we have learned about some of the delays like transmission delay before but today
1143,09-07,12:05,we are going to cover more delays and we may have some calculations we may have some
1144,09-07,12:12,questions that may appear in the test so please pay attention to this section the first question is
1145,09-07,12:18,how do the delay and loss occur so i have just actually i explained in
1146,09-07,12:25,the review just now right when the package arrives okay when the packet arrival rate
1147,09-07,12:35,exceeds the output link capacity that means the incoming speed is faster
1148,09-07,12:42,than the outgoing speed then in this case we may have
1149,09-07,12:48,we may have the package queued here in the router so if the incoming speed
1150,09-07,12:56,is much faster than outgoing speed then we may have the
1151,09-07,13:01,package queued in the router this is called queuing delay okay
1152,09-07,13:07,then those are those packets have to be queued there waiting to be processed by
1153,09-07,13:12,the router if this if i mean the the speed are even
1154,09-07,13:19,faster the incoming speeds are even faster and finally the router run out of buffer
1155,09-07,13:28,then the router will say i do not have enough space to hold you okay so i have to drop
1156,09-07,13:35,here that is called the package drop okay this is how the loss happens okay it's
1157,09-07,13:44,like if in my office hours let's see if i can handle if if let's say in the physical office
1158,09-07,13:53,hours my office can handle at most common animals that 10 students in my
1159,09-07,14:00,office then if we have the 11th one tells one coming i will say oh sorry i
1160,09-07,14:06,cannot accommodate more students right now okay so please please leave then that's like package drop okay
1161,09-07,14:14,so as i said this may become a test question i may
1162,09-07,14:20,ask you how could the queen delay happen you
1163,09-07,14:25,know that's because the incoming speed is bigger than outgoing speed okay if i
1164,09-07,14:33,ask how could the loss happen then that's because the buffer of the routers
1165,09-07,14:42,are for okay
1166,09-07,14:48,okay um there is a question in the chat how is that corrected when a package is
1167,09-07,14:53,dropped this is a great question if a packet is dropped what will happen
1168,09-07,14:58,next what should we do okay this is actually one major topic we are going to
1169,09-07,15:04,discuss in the transportator about reliable data transfer okay there are
1170,09-07,15:10,actually a very complicated mechanism to correct that okay so for example we may
1171,09-07,15:16,notify the sender say hey the packet is lost i didn't receive that please resend
1172,09-07,15:22,it okay so the sender may resend it so that is one mechanism that may be used to correct this okay i don't want to
1173,09-07,15:30,dive deep into this topic because we are going to keep devote a lot of time to that topic but hopefully hopefully that
1174,09-07,15:37,gives you a basic idea to that problem great question question uh any other
1175,09-07,15:43,questions
1176,09-07,15:48,okay great so then let's look at the the
1177,09-07,15:55,packaging delay packet delay is actually a very
1178,09-07,16:00,important part in networking you think about uh if i'm not sure if you have
1179,09-07,16:05,used any of the functionality functionalities before for example when you're playing a network
1180,09-07,16:11,sometimes it will show how much time it takes for
1181,09-07,16:17,uh for a packet to um to arrive at the destination and then
1182,09-07,16:22,come back right or sometimes we say oh the network is very fast the network is very slow and what does this mean
1183,09-07,16:28,network fast basically means um your packets or your data can arrive
1184,09-07,16:34,at the destination very fast okay then
1185,09-07,16:40,um network is very slow means your packet can arrive at the network very slowly
1186,09-07,16:46,okay then pack a delay is actually one major component in this
1187,09-07,16:53,in this um in this process okay
1188,09-07,16:59,so then what are the what are the reasons for packet delay why do we have
1189,09-07,17:04,a pack really we have learned one reason one reason is called transmission delay
1190,09-07,17:11,okay why do we have transmission delay if your skill remember what we learned
1191,09-07,17:16,transmission delay basically happens because
1192,09-07,17:22,we may have a link okay the link is like water pipe then the data is like water
1193,09-07,17:28,you have to push the data into the link so that is the transmission delay okay
1194,09-07,17:35,and in addition to that we may also have a third other type of delays one type is
1195,09-07,17:43,called noodle processingly so what is nodal processingly no the processing link is usually used
1196,09-07,17:50,by the routers to check the bit errors to determine
1197,09-07,17:55,which output link i should forward this package to okay usually the noodle
1198,09-07,18:01,processing delay is very fast it's typically smaller than 10 seconds okay
1199,09-07,18:07,then that's another processionally it happens within the router okay that's the second type
1200,09-07,18:14,we talk about one type transmission delay another type is noodle processing delay the third type of delay is secure
1201,09-07,18:22,delay currently i have also mentioned right so q a happens because you need to
1202,09-07,18:27,wait at the launcher okay for transmission
1203,09-07,18:32,okay because there are so many packets written there it's like in my office hours again okay this depends on the
1204,09-07,18:40,congestion level of the router the community lane may be very long maybe very short okay so it varies
1205,09-07,18:49,m second season is a milliseconds
1206,09-07,18:54,okay yeah and then
1207,09-07,19:01,um that's the third type of delay the last type of delay is called propagation delay what is professionally propagation
1208,09-07,19:09,delay is the time we spent from one stop for for example after the package enters
1209,09-07,19:16,the this and enters the link from one stop and here it arrives at another stop that
1210,09-07,19:24,is the propagation delay okay so some of you may ask what is the
1211,09-07,19:30,difference between transmission delay and propagation delay let's think about this
1212,09-07,19:37,if um you are moving from sacramento to new york okay
1213,09-07,19:43,then the first thing you need to do is you need to pack all your stuff onto a trunk okay you need to push all your all
1214,09-07,19:50,your things onto the truck that's like the transmission deal you are moving things onto a truck and then after that you have to drive
1215,09-07,19:57,your truck from sacramento to new york it may take maybe months
1216,09-07,20:04,okay maybe days maybe months so that time is called the propagation delay so
1217,09-07,20:09,you see the difference between transmission delay and propagation delay transmission delay is like when you pack your stuff onto the truck okay and there
1218,09-07,20:17,is also another um now let's see here there is a formula
1219,09-07,20:22,here the formula here you can see the transmission the other propagation delay and this is how to calculate the
1220,09-07,20:29,transmission delay transmission element have learned it's actually related to the packet length and the link bandwidth
1221,09-07,20:37,okay so if we want to send 100 bits out and if we know the
1222,09-07,20:45,link pandemic is uh 20 let's see 20 bits per second then the transmission delay
1223,09-07,20:51,will be 100 over 20 that's fine okay so that's the transmission delay
1224,09-07,20:56,the propagation delay is actually related to two things one thing is the
1225,09-07,21:02,length of the physical link how long how long is this link the second is the
1226,09-07,21:08,propagation speed of the single law okay the signal propagation speed in the
1227,09-07,21:14,medium so then the propagation delay is very simple it's d over s
1228,09-07,21:19,okay the distance over speed i think i believe you have learned this before right
1229,09-07,21:26,i mean physics in facebook you have probably learned this
1230,09-07,21:32,so they are very different there is an example here a better example to explain the difference between transmission
1231,09-07,21:38,delay and propagation delay for example now if we view
1232,09-07,21:44,this caravan this tank caravan as one packet
1233,09-07,21:54,okay this is one packet this card ticket has 10 bits okay we have 10 cards each
1234,09-07,22:00,card is one bit then when they pass through when they pass through this table
1235,09-07,22:06,then it's like we are pushing data into the link okay so we may take we may take for
1236,09-07,22:14,example uh 12 seconds to push every uh to push every car okay
1237,09-07,22:21,12 seconds to push every car then in total we have 10 cards then we have 120
1238,09-07,22:29,seconds okay so this is like the transmission delay this is how this is
1239,09-07,22:34,when you push the cars or this caravan this team ain't throw the booth okay but
1240,09-07,22:42,after that we have after that between these two both to the next toe box we
1241,09-07,22:49,have such a long distance that's 100 kilometers okay then this card this car caroline
1242,09-07,22:55,has to draw uh maybe drive for two hours or three
1243,09-07,23:01,hours to arrive at the second tour bus okay so that is the propagation delay
1244,09-07,23:07,you see the difference okay so the time spent here
1245,09-07,23:14,is a transmission delay
1246,09-07,23:21,to push every character the time spent on the road
1247,09-07,23:34,is called propagation delay okay
1248,09-07,23:40,so now i want you to do a um maybe let's let me finish this let me
1249,09-07,23:47,finish this and i'll do a give you a question you you can work on okay
1250,09-07,23:52,so uh let's talk about the community a little bit okay the cunile is related to
1251,09-07,23:59,third things one thing is linked bandwidth second thing is the packy length and third thing is the average
1252,09-07,24:06,package arrival rate okay you can say that this this traffic is
1253,09-07,24:13,defined by the traffic intensity okay which is equal which equals to l a over
1254,09-07,24:20,r okay and as you can see if we have more package arrival
1255,09-07,24:26,okay if we have if this is a very large if a is very large okay then if this
1256,09-07,24:32,becomes bigger and bigger then the traffic intensity becomes higher and higher when it arrives at around one
1257,09-07,24:39,when it approaches one then the q delay is increasing
1258,09-07,24:44,sharply okay it's it is uh close to infinity that is uh that is the relationship
1259,09-07,24:52,between current delay and the traffic intensity so it's like when you drive on
1260,09-07,24:57,the road okay if there is no car you can see there's no car then of course we do not
1261,09-07,25:02,have a lot of community but if there are a lot of occurs if there are lots of
1262,09-07,25:08,cars then we may experience the queen delay okay
1263,09-07,25:15,so when the traffic intensity is very very high then you have to be stuck on
1264,09-07,25:20,the road for a long time okay so now let me give you a question to work on
1265,09-07,25:45,so we have computer a and b and we have vouchers in between we have our package which has this is
1266,09-07,25:51,the packet
1267,09-07,26:06,okay we have l equals to 100 bits
1268,09-07,26:12,r1 equals to
1269,09-07,26:24,beats per second r1 equals to 20 actually equal to 10 and
1270,09-07,26:30,r3 equals to 50 bps okay these are the link capacity for
1271,09-07,26:37,each link okay
1272,09-07,26:56,so the current delay is 0.5 seconds at each router
1273,09-07,27:09,thank you
1274,09-07,27:29,another processing delay is one second at each router
1275,09-07,27:34,foreign
1276,09-07,27:51,a and b is 100 kilometer
1277,09-07,27:56,okay the speed signal processing to be a signal propagation speed
1278,09-07,28:03,equals to 25 kilometer per second
1279,09-07,28:10,now i want you to calculate the total delay
1280,09-07,28:16,equals to what so if you look at this
1281,09-07,28:21,this is a formula here
1282,09-07,28:26,this is wrong okay this is not total this is this is not uh know that this is total
1283,09-07,28:32,the total delay equals to personal processing delay plus q a
1284,09-07,28:38,please pay attention delay is the currently happened as all the routers
1285,09-07,28:44,plus the transmission delay plus the propagation delay
1286,09-07,28:51,okay so can you calculate this i will do this together with you but
1287,09-07,28:58,hopefully when you review this video when you review this video please do the calculations on your own
1288,09-07,29:05,okay because this may become a test question
1289,09-07,29:11,we may have this in the exams okay so now we know the total delay equals to
1290,09-07,29:19,four type of delays the transmission delay
1291,09-07,29:24,plus propagation delay plus
1292,09-07,29:30,current delay
1293,09-07,29:35,plus the nodal processing delay
1294,09-07,29:41,okay so then what is the total transmission delay
1295,09-07,29:46,pay attention the transmission didn't happen at which places
1296,09-07,29:52,at a we have to push it out as this router we have we have to push it out
1297,09-07,29:58,okay at the second round should we have push it out again okay so then finally at the destination
1298,09-07,30:05,do we need to put it out we do not okay we do not need to push it out at the
1299,09-07,30:10,destination so then basically the transmission dealing happens at third places
1300,09-07,30:16,a round row one and round to two okay so then that means
1301,09-07,30:25,this is l over r1 that's the time we spend at a
1302,09-07,30:32,plus l or r2 plus l over r 3. that's the
1303,09-07,30:39,total transmission delay okay then what is the propagation delay
1304,09-07,30:45,propagation delay is total distance
1305,09-07,30:51,over the speed okay plus what is the queue
1306,09-07,30:58,because 0.5 seconds at each router now how many
1307,09-07,31:03,routers do we have we have two routers so we have that means two times d qe
1308,09-07,31:15,okay plus no double percent delay again we have two routers
1309,09-07,31:21,so at each round another percent delay is one second so that's why we have two times d nodal
1310,09-07,31:30,okay then that means the next thing you do is just simple
1311,09-07,31:35,calculation right so 100 over 20
1312,09-07,31:40,0 over 10 plus 100 over 50. plus distance 100 over 25
1313,09-07,31:49,plus 2 times 0.5
1314,09-07,31:56,okay this is
1315,09-07,32:06,okay so then total you can see this is a 17
1316,09-07,32:11,plus 7 this is 24.
1317,09-07,32:20,17 plus 7 that is uh 24 seconds so i hope you can you really understand
1318,09-07,32:27,this exercise okay because we are going to have a similar test problem in the
1319,09-07,32:33,midterm or even final okay and then you may know you may want to
1320,09-07,32:39,know how the delay really look like in real internet right so here in the
1321,09-07,32:45,example we said oh okay the delay from a to b is 24 seconds but usually we do not
1322,09-07,32:50,have that laundry that kind of long delay okay you already delays are very short
1323,09-07,32:57,um actually there is a program called trace route which can provide the delay
1324,09-07,33:03,measurement from the source to every router along the way towards the
1325,09-07,33:10,destination okay um so this if you run this uh
1326,09-07,33:16,program you are able to basically find out uh the delay from the source
1327,09-07,33:23,computer a to the first router the second router
1328,09-07,33:29,the third voucher etc and then finally to the destination b
1329,09-07,33:35,okay so here is a how it looks like let's see let's first say how it will
1330,09-07,33:41,look like and then we come back to see um uh to see um how this how this program
1331,09-07,33:48,is designed okay so if you for example if you if this is the source computer
1332,09-07,33:55,this is a and this is the destination b okay so then you can run a trace a route
1333,09-07,34:02,program from a to b okay then you can see for each line for each row
1334,09-07,34:10,here okay this this ip address is the ip address for
1335,09-07,34:17,the first router along the way okay do you remember between a and b we have r
1336,09-07,34:22,by r2 r3 l4 okay so from a to r1
1337,09-07,34:29,so so basically this is c s j w is basically uh gateway
1338,09-07,34:36,it's probably a one round chart between a and b okay it's probably actually it's probably the first router along the way
1339,09-07,34:43,okay and then you can see we provide three delay measurements from a kaya ctu
1340,09-07,34:51,to this r1 router okay and the third delay environments are respectively one
1341,09-07,34:58,ms one milliseconds one milliseconds and two milliseconds okay it's like through
1342,09-07,35:04,twice three matters okay so then this means generally the time we
1343,09-07,35:10,spend or the delay between a to the first router is about to one to two
1344,09-07,35:18,milliseconds okay then from a to the the second line is about the second router
1345,09-07,35:24,so from a to the second router is also around one two two uh milliseconds okay so then
1346,09-07,35:34,from a to the third router is the third line so to the third router is about
1347,09-07,35:40,five to six milliseconds so you can see the time is increasing
1348,09-07,35:47,the time is increasing from us a small number to a bigger number that's because
1349,09-07,35:54,the distance is longer and longer okay and you can also see interestingly here
1350,09-07,36:02,so here you can see at the row seven the seventh row you can say from a to this
1351,09-07,36:09,router um the time spent is about 22
1352,09-07,36:14,milliseconds but then from a to the router at indus
1353,09-07,36:20,eight line okay in the eighth row then you can see the time is
1354,09-07,36:25,significantly increased okay the time spent from a to that router is about 100
1355,09-07,36:32,uh and five uh milliseconds so the time increase
1356,09-07,36:38,significantly from about 22 to more than 100 why because most likely most likely
1357,09-07,36:46,so there is a trans ocean leak a trans oceanic link between these two routers
1358,09-07,36:52,so that this link is super long that's why the delay is increased uh
1359,09-07,36:59,significantly okay so and then you can see this will continue continue until
1360,09-07,37:07,eventually this uh we we reached we reached the destination computer
1361,09-07,37:14,okay we reached the destination and then then you can see the time here is
1362,09-07,37:21,basically this the one-way time we spend from a to b this is not a round trip not
1363,09-07,37:27,a round trip time this is a one-way time uh
1364,09-07,37:33,i'm not sure if this is round trip or one way actually let's see let's see what is designed here
1365,09-07,37:40,uh provide another one from sauce
1366,09-07,37:49,between transmission oh okay sorry this is actually a round trip time okay this
1367,09-07,37:54,is a round trip time that means from a to b and then from b to a okay the b
1368,09-07,38:00,sent a response back to a and then this is a actually the round trip time
1369,09-07,38:06,okay any questions
1370,09-07,38:11,yeah he's asking is this the package is this package of aging or circuit switching this is a package switching we
1371,09-07,38:18,are talking about uh the internet okay so the circuit switching is now really
1372,09-07,38:24,rarely used actually internet so when we talk about internet we are you we are
1373,09-07,38:30,mainly referred to the package meeting which means the routers okay the router and switches
1374,09-07,38:35,any other questions okay so that's how the face route
1375,09-07,38:42,program works and and that's how the internet delays look like in reality
1376,09-07,38:49,okay and then now we want to come back to a look at this uh program how this
1377,09-07,38:55,program is designed how could this program provide the
1378,09-07,39:00,round trip time or the time interval between the transmission and reply okay
1379,09-07,39:06,so what happens is actually very interesting so every time
1380,09-07,39:11,every time the computer a will send out
1381,09-07,39:16,three packets okay you can see what you you may ask why do we send out three packets because
1382,09-07,39:23,we want to measure three times so as you can see for every router we
1383,09-07,39:30,measure three times because we want to know because one time sometimes may not be accurate right so we want to measure
1384,09-07,39:37,multiple times to say like the average to to make sure uh the time can indeed
1385,09-07,39:44,reflect the delays okay so again
1386,09-07,39:50,again so each time the round the computer a send out three packets and
1387,09-07,39:56,this third package will reach firstly for example the first time these
1388,09-07,40:02,three packets will reach computer router r1 okay and the interestingly the third
1389,09-07,40:08,pack is all how some failed
1390,09-07,40:14,the field is time to leave
1391,09-07,40:21,we also call it ttl okay ttl is a very commonly used term in networking okay so
1392,09-07,40:29,time to leave is one field in the packet okay in each packet each
1393,09-07,40:36,packet uh has they all have a ttl field and for the first time the tkl field
1394,09-07,40:43,is set to one what does this mean this means hey the
1395,09-07,40:52,first three packets your time to leave is only one hop
1396,09-07,40:58,okay that means when there's a third package arrive at router r1
1397,09-07,41:05,okay r1 will directly minus one on the
1398,09-07,41:12,current ttl so that means ttl minus 1 equal to 1
1399,09-07,41:20,minus 1 equal to zero okay and then this router will check the tl and we'll see
1400,09-07,41:26,oh this is zero okay that means what that means hate i'm sorry you through
1401,09-07,41:34,you cannot live anymore because your time to leave is just one hop and now your ttl is zero so you cannot go
1402,09-07,41:42,further you have to be dropped here okay that's how how r1 will react then
1403,09-07,41:49,but but even these three packets die okay the r1 will still be very
1404,09-07,41:56,responsible around will notify the parents of these three packets okay notify basically notify computer aid say
1405,09-07,42:03,hey i'm sorry you're through pakistan okay so later on you will learn this is
1406,09-07,42:09,actually uh done using some protocol for the icmp and then email finally received the
1407,09-07,42:17,notification from aaron saying those three packets died okay and then a we are write down the time
1408,09-07,42:26,of receiving the response so then it will calculate
1409,09-07,42:32,the time between the transmission of these three packets and the response
1410,09-07,42:38,from r1 okay or all the time when it receives
1411,09-07,42:43,the response from r1 so then this time interval is called the round trip time so a will write down that time that's
1412,09-07,42:50,why you can see actually here you can see for the third package okay
1413,09-07,42:58,you have three time intervals to write down okay this these are all recorded by computer aid and the second time so
1414,09-07,43:06,second time a will try again okay a will try i'll try to send out
1415,09-07,43:11,three packets again the second time the ttl is set to two
1416,09-07,43:17,okay set to two two means these packets can travel two hops so when they arrive
1417,09-07,43:25,at r1 foreign
1418,09-07,43:36,on the current ttl so equal to 2 minus y equal to 1. then this means the
1419,09-07,43:43,uh ttl is not zero that means these three packets can still go forward okay
1420,09-07,43:48,so then when they arrive and then this third practice arrive at r2 r2 will do
1421,09-07,44:00,the current ttl which is one okay minus one equal to zero there are two will say
1422,09-07,44:08,i'm sorry you have to you have to uh stop here okay i have to drop you then
1423,09-07,44:14,again r2 will notify a about the dropping of these three packets so it
1424,09-07,44:20,will write down the time uh of receiving the response and the time of
1425,09-07,44:25,transmission will cost then calculate the time interval will be turned down okay that's how the delay is between a
1426,09-07,44:31,to r2 is uh calculated so basically these three numbers okay then you can
1427,09-07,44:39,imagine they can continue the next time anybody has to send out the third package again with ttl equal
1428,09-07,44:47,to third and then when it arrives at r1 with minus one ttl minus one then dtl
1429,09-07,44:54,becomes two so it continues to r2 then t r 2 will do ttl minus one again make it
1430,09-07,45:01,ttl into one okay then it will finally reach our third and then after will do
1431,09-07,45:07,ttl minus one equals to zero okay so then after we'll drop the third package
1432,09-07,45:14,and notify anya will record the time interval and then that is the time for
1433,09-07,45:20,this okay so then we continue and eventually the third package will arrive
1434,09-07,45:27,at the destination okay then uh the choice routes program
1435,09-07,45:33,will stop okay that's how it works any questions
1436,09-09,0:04,is this all clear
1437,09-09,0:12,okay good thanks so that's the choice drugs program as i
1438,09-09,0:19,said later we are going to uh we will see how this is implementing icmp but uh
1439,09-09,0:26,but this this is generally the design okay the design of this uh this uh
1440,09-09,0:32,um program and then you can see how the international internet delay
1441,09-09,0:38,um look like in reality okay and for packing loss i think we can skip
1442,09-09,0:45,this part because we mentioned the packet loss happens because
1443,09-09,0:51,the buffer of the router is full okay so this is the only thing you need to know
1444,09-09,0:56,we have to drop this uh the incoming package when the buffer is a full that's how packet loss
1445,09-09,1:03,happens okay and this may again be the uh test question
1446,09-09,1:09,then the next thing we are going to look at is the throughput okay
1447,09-09,1:14,so throughput in general this uh the definition is the rate at which these
1448,09-09,1:20,are transferred between the sender and the receiver okay of course we may have instantaneous
1449,09-09,1:27,throughput okay which means the read at a given point in time okay and we may
1450,09-09,1:33,also have the average throughput for example you you can calculate within one hour
1451,09-09,1:40,okay how many how much how many bits are sent from this sender to the receiver
1452,09-09,1:48,okay then we can calculate that our roots output okay and then the
1453,09-09,1:53,instantaneous uh throughput may be very high at one point but maybe low at the
1454,09-09,1:59,other point the average throughput is like it's a it's usually
1455,09-09,2:04,um fixed okay um then but the throughput is also
1456,09-09,2:11,determined by the link okay is determined by the length so for
1457,09-09,2:18,example now if we have a sender and receiver
1458,09-09,2:23,okay a center of the receiver then the sender wants to send some beats
1459,09-09,2:30,to the receiver and this package the package may have to go through a number
1460,09-09,2:35,of links okay you can see in the middle is actually a router okay and then we
1461,09-09,2:40,may have the link at the left link at the right okay so this these links may
1462,09-09,2:46,have different capacities do you remember do you remember we learned this before we talked about different type of
1463,09-09,2:53,links before right we have fibers which may have a very high link capacity we
1464,09-09,2:59,have wi-fi or even mobile network which may have a very low link capacity
1465,09-09,3:07,okay so it's different then how can we determine the hourly
1466,09-09,3:13,throughput in this case or the effective algorithm throughput okay so now you can
1467,09-09,3:20,imagine now you can imagine these two links are like the pipes carrying the
1468,09-09,3:26,water okay the left pipe has a one rate the second second the
1469,09-09,3:34,right pipe has another rate so what that means one pipe may be very very narrow
1470,09-09,3:39,it carries the water and the water can flow very very slowly
1471,09-09,3:46,but the other pipe may be very wide okay then the water can flow very fast
1472,09-09,3:54,okay then if this is a p1 pipe one this is p2 and the window p1 is very very
1473,09-09,4:03,narrow p2 is very wide so let me ask you a question
1474,09-09,4:08,the speed of this water flow from the computer a to b
1475,09-09,4:15,so the flow the speed of this water flow is determined
1476,09-09,4:22,by by p1 or p2 if p1 is very narrow p2 is very wide
1477,09-09,4:34,let me repeat the question again if p1 is very narrow p2 is very wide
1478,09-09,4:39,then the speed of the water flow between a and b is determined by p1 or p2
1479,09-09,4:49,p1 great excellent i i also say the answers from the chat yes it is actually
1480,09-09,4:56,determined by p1 by the one which has the smaller
1481,09-09,5:04,um read or the smaller throughput right so this is exactly the same thing
1482,09-09,5:11,in the networking in the networking if we have a link which has a small bandwidth and another link which has a
1483,09-09,5:18,higher bandwidth okay then the effective throughput is actually determined by the
1484,09-09,5:26,one with smaller bandwidth okay
1485,09-09,5:31,question answer question is that the same as download speed you i think you are mentioning uh the throughput
1486,09-09,5:40,um you also said bandwidth so throughput here equals to
1487,09-09,5:45,um is like um is how many bits we can carry of
1488,09-09,5:51,course the downloading speed the downloading speed can be measured by the throughput okay but i do not see they
1489,09-09,5:58,are exactly the same because we also have uploading speed right okay
1490,09-09,6:04,um so bandwidth bandwidth bandwidth is uh very related to throughput okay but
1491,09-09,6:13,as you can see here when we see bandwidth we we mean the bandwidth for specific link for example for p1 we may
1492,09-09,6:20,have a benefit of rs for p2 we may have bandwidth of rc
1493,09-09,6:26,okay but the throughput is actually determined by the one with the the one
1494,09-09,6:33,the smaller parameter i would say okay the smaller bandwidth
1495,09-09,6:38,is this clear to everybody
1496,09-09,6:43,okay good so then now you can look at this example in this example if rs is smaller than rc
1497,09-09,6:52,okay rs is uh is the capacity being capacity or the bandwidth
1498,09-09,6:58,foreign the left link and rc is for the right link so then in this case
1499,09-09,7:07,sorry in this case what is the average n through end-to-end throughput or the
1500,09-09,7:12,effective end-to-end throughput that is rs okay how about if rs is bigger than
1501,09-09,7:19,rc when rs is bigger than rc
1502,09-09,7:24,in this case then what is the average end to end through to order the
1503,09-09,7:30,effective entry throughput excellent you are all choosing the smaller one okay some of you may think
1504,09-09,7:37,oh the bigger one is on the left then probably it can be faster no even i mean
1505,09-09,7:44,if you again imagine if this is water even the left side we can flow in the
1506,09-09,7:50,water very fast okay but when it comes down to a narrower pipe
1507,09-09,7:56,the water speed has to slow down has to decrease that's why
1508,09-09,8:02,again the effective end-to-end throughput is still determined by the
1509,09-09,8:07,smaller one okay that's why it's rc excellent so then we can say
1510,09-09,8:14,um those ones like rsrc the smaller one is or the smallest one is actually
1511,09-09,8:20,called the boat neck bottleneck link okay which means
1512,09-09,8:27,um the link on the end to end path that constraints the end-to-end throughput
1513,09-09,8:34,okay with this bottleneck link usually has the smallest link capacity or the
1514,09-09,8:42,smallest bandwidth okay so that's why uh when you think
1515,09-09,8:47,about uh for example when you are talking to another computer while your computer is talking to another computer
1516,09-09,8:53,far away you can never predict what happens in between right so there may be one link
1517,09-09,8:59,in between okay with that constraints the end-to-end throughput okay then in this
1518,09-09,9:05,case it may um affect your network okay but the good
1519,09-09,9:11,thing the good thing is that we have we also have the rocking algorithm okay that our routing
1520,09-09,9:18,algorithm is going to matter the delays between two hops okay like between two routers
1521,09-09,9:24,if this link is not fast enough if this link has a very very long delay okay
1522,09-09,9:31,then the router routing algorithm will will try to roll out this uh delay roll
1523,09-09,9:39,out to this link okay it will not include this link into the path that's how we can mitigate this problem okay
1524,09-09,9:50,um this is another scenario in this scenario you can see we have about 10 connections okay between
1525,09-09,9:58,these 10 computers and these 10 computers can help out 10 connections
1526,09-09,10:04,and then you can see for each path
1527,09-09,10:10,each path is each part includes basically three segments so the first segments the first
1528,09-09,10:17,link okay it has rs the second link
1529,09-09,10:25,okay the second link is actually determined by what by the total number of links
1530,09-09,10:33,okay so we know in total this is our the bandwidth is r but this is shared by by
1531,09-09,10:40,10 paths okay so that's why by 10 links that's why actually each one each link
1532,09-09,10:48,can only get a tenth of work okay and then third portion we have we
1533,09-09,10:55,have rc then in this case in this case if i ask you what is the effective end-to-end
1534,09-09,11:02,throughput between a and b so what would be the answer
1535,09-09,11:08,what do you think what is the effective end-to-end throughput between a and b
1536,09-09,11:17,again again we know one thing for sure we need to choose the smallest one right
1537,09-09,11:24,we need to choose the smallest one among these two because the smallest one is
1538,09-09,11:29,the botnet link okay the bottleneck link so that's why actually the average or the effective
1539,09-09,11:37,end to end throughput is the minimum of rc rs and r overton whichever is the
1540,09-09,11:45,smallest okay then that one will become the effective end-to-end robot
1541,09-09,11:52,what about throughputs between routers okay if we come back to this
1542,09-09,11:59,to this um slide so
1543,09-09,12:05,actually this is uh this uh the the computer a and b are connected
1544,09-09,12:12,uh we uh are connected by those vouchers okay so when we say we want to find the
1545,09-09,12:19,smallest one okay that means uh those links are actually divided by the
1546,09-09,12:25,routers so now for example if we have computer a foreign
1547,09-09,12:35,so for example
1548,09-09,12:44,okay so then you can see if we have
1549,09-09,12:58,so if these are the links the link capacity between a and uh
1550,09-09,13:07,r1 r1 and r2r201 r3 and utterance b then
1551,09-09,13:13,you can see a mod can you tell me what is the effective end-to-end throughput
1552,09-09,13:19,on this path first one is 10 second one is the five third one is 20 bps the last one is 100
1553,09-09,13:27,bps so what is the
1554,09-09,13:32,effective and to end the robot between a and b can you tell me in this
1555,09-09,13:40,example now choosing five that's correct if you want to say for example what is the
1556,09-09,13:45,effective n20 slope would be turned r1 and r3 then i would say
1557,09-09,13:51,between r1 and r3 we have 5 and 20. so i would say 5 is
1558,09-09,14:00,the one okay but usually we we will look at only the end to end which means computer to computer
1559,09-09,14:06,okay from a to b yes that's something that can be manually assigned by the
1560,09-09,14:13,router or the router automatically assigning those links
1561,09-09,14:18,um no that is not determined by the router okay that is actually determined
1562,09-09,14:25,by the infrastructure so for example if this this is if a is
1563,09-09,14:32,your home computer okay then you are connecting to your router using
1564,09-09,14:39,something and this can be
1565,09-09,14:46,this can be wi-fi this can be
1566,09-09,14:54,internet if you are using a cable okay so then because you are using different
1567,09-09,15:00,ways to connect to the router then the speed is different the ethernet is probably much faster than the wi-fi
1568,09-09,15:07,okay the internet has the that link that cable has much higher capacity or more
1569,09-09,15:14,higher bandwidth do this make sense then between r1 and r2
1570,09-09,15:21,depending on what internet service provider you are using probably you are
1571,09-09,15:27,using comcast and atnt may claim say hey there we are providing fiber then if
1572,09-09,15:35,they are providing fiber then their their link bandwidth is much higher than the ones from comcast
1573,09-09,15:42,okay so it really depends on what kind of links do you use to connect those
1574,09-09,15:49,ruptures or the computers okay those are all great questions so then
1575,09-09,15:54,you can see it has nothing to do with the routers it's basically purely uh
1576,09-09,15:59,related to the link types if it is in the test i give you some
1577,09-09,16:06,questions like this i hope you know how to calculate the
1578,09-09,16:11,end-to-end throughput actually you don't need to do any calculation just through the smallest one but still in a in a
1579,09-09,16:18,test in the previous exams i still saw a lot of students doing calculations okay
1580,09-09,16:25,so for example if i if for this example if i ask you what is the average throughput between a and b
1581,09-09,16:31,okay you know what many students would do 10 plus 5 plus 20 plus 100 divided by
1582,09-09,16:38,four that is something you should definitely avoid okay it's not calculated in that
1583,09-09,16:45,way it's actually just um determined by the smallest one
1584,09-09,16:52,okay pay attention to that unless this continue to discuss the
1585,09-09,16:57,protocol layers okay so
1586,09-09,17:03,um i have been mentioning this layer thing for a long time okay i mentioned this
1587,09-09,17:09,again again but why do we have protocol leaders what does this mean okay so if
1588,09-09,17:14,you think about the networking the networks are actually very complex okay
1589,09-09,17:20,it has a lot of different components and pieces you think about this we have the
1590,09-09,17:25,the host the links and we turn the links so we have we have the routers the
1591,09-09,17:30,switches and we may also have different applications you are running email you
1592,09-09,17:36,are using web service you are using file transferring right and then we also have
1593,09-09,17:42,different protocols okay we know those are like rules to follow all the standards
1594,09-09,17:48,um to control uh the different components and we also have the hardware
1595,09-09,17:53,the software so how how can we you can see these are
1596,09-09,17:58,different pieces here and there scattered right so how can we combine or integrate these different
1597,09-09,18:06,pieces to make it work in just one internet okay this is actually a very challenging
1598,09-09,18:13,problem right a very challenging problem then the question is is there any hope
1599,09-09,18:19,of organizing the structural network okay or at least the one we discuss something
1600,09-09,18:26,for example we just discuss application or when we discuss a protocol what are
1601,09-09,18:32,we referring to okay so so we we at least have some
1602,09-09,18:37,foundation or some kind of framework for us to to start the discussion so that is
1603,09-09,18:43,actually the problem for networking okay that's why uh graduate people
1604,09-09,18:51,um propose one uh model called osi model okay open
1605,09-09,18:58,system interconnection model which contains seven layers the seven layers
1606,09-09,19:03,are actually uh uh it's uh it's like an analogy to the postal service
1607,09-09,19:11,okay so let's look at the postal service uh when you write a letter to a foreign
1608,09-09,19:17,country for example okay so for first level course you need to write this 20 page letter
1609,09-09,19:23,if i'm writing let's see a letter to my friend in china okay i may write in
1610,09-09,19:29,english but he or she can only understand chinese okay when you are writing a 20-page
1611,09-09,19:36,letter this is like application layer the first thing you need to do but this letter has to be translated
1612,09-09,19:43,so the receiver can read it this is what we call as presentation layer then when
1613,09-09,19:50,it comes down we need to ensure the recipient can indeed receive the letter
1614,09-09,19:56,okay how can we make sure he or she receives this okay we need to
1615,09-09,20:01,establish some kind of session okay so that's the session layer then down below
1616,09-09,20:07,okay down below one way when we have this like this 20 page letter
1617,09-09,20:12,okay we need to separate and number of the pages why because sometimes for example uh
1618,09-09,20:21,the postal service may not be able to carry a huge letter a long letter 20
1619,09-09,20:26,pages right so you make you may only be able to send just one or two pages per
1620,09-09,20:32,letter right so that's why you have to separate it into smaller pieces and then
1621,09-09,20:38,maybe deliver it deliver you for example if we separate these 20 pages into uh in
1622,09-09,20:45,20 pages into uh 10 different pieces so each piece has 20 has two pages okay
1623,09-09,20:52,then those those 10 pieces will be sent out individually
1624,09-09,20:59,okay individually so then this layer is called transport layer we separate and
1625,09-09,21:04,number the pages okay um and we also need to make sure what if
1626,09-09,21:09,some of the pieces are um lost what should we do how can we recover okay
1627,09-09,21:15,this is also done as transport layer then down below is the network layer
1628,09-09,21:21,network layer basically means uh the postal center is sorting the letters by the zip code to route them closer to the
1629,09-09,21:28,destination so what is the shortest path from uh from you to your friend okay
1630,09-09,21:33,that's the network layer and then one layer below is the local postal office
1631,09-09,21:39,need to determine which vehicles are used to deliver the legends okay
1632,09-09,21:44,eventually we have the physical layer the physical layer is to
1633,09-09,21:50,um is to carry the letter between different stations to to do delivery
1634,09-09,21:55,using uh the the physical tracks the planes the real uh reels or the uh cars
1635,09-09,22:04,okay so then that is a as the lowest layer we need to determine how we can
1636,09-09,22:10,carry this letter between your place to post the first post office and from the
1637,09-09,22:16,first person to the second puzzle second possible to the last one okay so it's uh
1638,09-09,22:22,it's like that so this is how the analogy is done that's how the seven
1639,09-09,22:27,layers are um extracted okay so the examinators are
1640,09-09,22:32,application presentation session transport network data link and physical layer so if you want to remember these
1641,09-09,22:39,seven years you can remember this all people seem to need data processing so you can look at the first letter okay
1642,09-09,22:47,why do we need to uh have this kind of a layer okay um or is there a uh is there another
1643,09-09,22:54,analogy for the layering so actually the error travel is a very good analogy for
1644,09-09,23:00,the layering um if you think about the air travel usually you need to do the uh ticketing
1645,09-09,23:06,right take it you you buy the ticket and then the next thing is you you need
1646,09-09,23:13,to check in your bag and you go to the gates and then the plane take off then
1647,09-09,23:19,the plane will do the routing and finally the plane arrives at this destination then we will have landing
1648,09-09,23:26,and then gate you need to go to the gates again you need to claim the baggage uh usually we don't don't do
1649,09-09,23:34,complaining that take it right but anyway um so you can see it's like a layer kind
1650,09-09,23:40,of thing right here so why do we do this kind of layering
1651,09-09,23:48,you think about this uh one one very important benefits okay one very
1652,09-09,23:55,important benefit is the layering is providing a kind of
1653,09-09,24:00,service to the other layers okay so for example for example
1654,09-09,24:06,um the let's say the gates okay the guess is
1655,09-09,24:13,like uh it's like providing service to the baggage part okay so that means okay
1656,09-09,24:19,uh i need to i need to uh for example if one day you want to change your ticket
1657,09-09,24:24,okay or if one day once you say um you want to
1658,09-09,24:30,uh yes you want to change the ticket you you want to change the destination do you need to like worry about if the
1659,09-09,24:39,airport has already uh processed your gate correctly so you don't need to
1660,09-09,24:44,worry about that right so the gate itself is providing the service to the app layers select that okay
1661,09-09,24:52,um and also you don't need to once your bag is clean is checked in you don't need to worry about the case also so
1662,09-09,24:58,it's like that um basically one layer will provide a service to the other layers and these
1663,09-09,25:04,layers are actually kind of isolated from each other um i should not say isolated but they
1664,09-09,25:10,are independent from each other okay so if one layer is changed so for example
1665,09-09,25:15,one day if we want to change um a routine of airplane we say okay we
1666,09-09,25:21,don't want the plane to go through um los angeles you want to to go through
1667,09-09,25:27,chicago then it doesn't change it this routine changing doesn't change your
1668,09-09,25:33,ticket okay uh your tickets the destination is still the same the source
1669,09-09,25:38,uh is still the same okay so it's like that um
1670,09-09,25:44,so this is a the lettering that's that is actually one very important benefit i hope you understand
1671,09-09,25:50,um another another um benefit is uh we as we said the computer networking is actually a very
1672,09-09,25:57,complex system if we want to explicitly mention something or referring to
1673,09-09,26:03,something okay then we need to um have something to refer to okay we
1674,09-09,26:09,need to have some kind of a framework or reference model to identify the
1675,09-09,26:16,different pieces different components in the networking okay so that's why we
1676,09-09,26:21,need such kind of really uh layering okay so for example we can see when we talk about the email applications we met
1677,09-09,26:28,when we talk about the service web services the web pages the web browsers
1678,09-09,26:34,etc you can say oh this is a application letter thing okay but when we talk about
1679,09-09,26:40,the let's say reliable data transfer um when we talk about the sockets
1680,09-09,26:48,then we should know oh okay that that belongs to the transporter layer similarly when we talk about the routine
1681,09-09,26:54,algorithm um then we need to we we say oh okay this belongs to the
1682,09-09,27:00,um uh the network layer okay so it's like that that's uh that's uh why we we
1683,09-09,27:06,uh it's very important to have a explicit structure uh for
1684,09-09,27:12,um reference okay uh the second thing we have mentioned the hassan benefits is that we need to
1685,09-09,27:19,help this kind of modularization this is very easy for
1686,09-09,27:24,um for maintenance and for updating of the system why because if you want to
1687,09-09,27:30,change the implementation of one layer it doesn't affect the other layers okay you don't need to change the other
1688,09-09,27:37,layers implementation correspondingly that is the benefits uh but there is one
1689,09-09,27:43,question for you to consider is the layering considered harmful
1690,09-09,27:48,is this a 100 good thing is there any drawbacks for layering
1691,09-09,27:56,can you think of any if you can you can type in the chat
1692,09-09,28:07,you all think later is 100 good there might be counts yes
1693,09-09,28:14,yes there might be consider them what are the potential accounts you can think of
1694,09-09,28:24,too cohesive okay yeah good point
1695,09-09,28:30,must be same standard right right okay
1696,09-09,28:37,so i i think uh what you mean is uh within a layer we need to have the same
1697,09-09,28:43,standard right
1698,09-09,28:48,uh those are all good points very good so let me give you some hints if you
1699,09-09,28:54,think about the layering uh the good thing is oh okay when we
1700,09-09,28:59,refer to something we can always find a layer to to refer to right but the the
1701,09-09,29:06,drawback is that also means if you want to refer to
1702,09-09,29:11,something okay if you have something you want to refer to then you must put it into a layer okay you must put it into a
1703,09-09,29:19,layer in order to refer to that okay so by you if you think about some
1704,09-09,29:25,of the new features or new things we we consider in networking for example
1705,09-09,29:31,when network was firstly uh designed nobody considered about security okay
1706,09-09,29:37,security no layer is dealing with security there is no security layer right then we may
1707,09-09,29:44,implement but now security becomes a problem when we implement this how which
1708,09-09,29:49,layer should we put security okay should we put this to application
1709,09-09,29:55,layer to transport layer or network layer you see that it fits over but
1710,09-09,30:01,i mean it doesn't belong to any of these layers okay that is the actually the um
1711,09-09,30:08,obviously the drawbacks or the counts uh of the layering thing okay that means if
1712,09-09,30:15,you have some new components coming up due to the development of technology you
1713,09-09,30:20,need to you need to fit this new component into a specific layer but
1714,09-09,30:26,sometimes this might be very difficult okay that's one thing you can you can
1715,09-09,30:31,think about all right any any questions
1716,09-09,30:39,okay so we talk about the seven layers of osi
1717,09-09,30:44,model but the question is in internet do we really implemented those seven years
1718,09-09,30:51,do we really have all those seven layers application presentation session
1719,09-09,30:58,transport network link physical do we have all those layers the answer is no
1720,09-09,31:04,actually in real internet we only have uh i'll see in the internet protocols
1721,09-09,31:11,that we have about five layers we have only five layers purely okay so for
1722,09-09,31:16,example we have uh we have application layer transport layer network layer link
1723,09-09,31:22,layer physical layer as shown on the slide but we do not have the
1724,09-09,31:28,presentation layer and the session layer
1725,09-09,31:41,so these two layers are missing actually
1726,09-09,31:48,again this may become a test problem i may ask you in the test what are the two
1727,09-09,31:53,layers missing in the internet protocol stack okay
1728,09-09,31:58,good question why are they missing why are they missing because in the in
1729,09-09,32:05,the implementation okay during the implementation they found these two layers are sometimes optional and not
1730,09-09,32:12,really necessary for the for the protocol for for the implementation okay
1731,09-09,32:19,so gradually then people um think okay when if we if we want to
1732,09-09,32:25,do if we want to implement some of the functionalities of presentation and session we can directly put them into
1733,09-09,32:32,the application layer okay so that's why uh i mean it's it's
1734,09-09,32:38,kind of a uh design uh design kind of thing so
1735,09-09,32:44,that's the main reason why we do not all the information implementation kind of thing that's why we do not really have
1736,09-09,32:51,these two layers uh in the internet protocol set okay
1737,09-09,32:56,uh so basically gradually people realize okay if we have one message okay we can
1738,09-09,33:03,break it into smaller pieces then there's some breaking part is done as a
1739,09-09,33:08,transport layer okay if you do not have any need i will doing uh translation
1740,09-09,33:13,okay and you need a session because transport layer is also uh it's kind of
1741,09-09,33:19,establishing a connection so some of the functionalities are kind of duplicate in
1742,09-09,33:24,the other layers okay um so that's the main reason and now you
1743,09-09,33:30,can say for the application layer the application layer is meaning to support the network applications as we said we
1744,09-09,33:38,may have different applications and for each type of application it may use a specific
1745,09-09,33:46,protocol okay for example ftp here is for trial file transfer file transfer
1746,09-09,33:53,protocol this is the meaning for the file transferring service okay the smtp smtp
1747,09-09,34:02,is a simple mail transfer protocol this is used for email service and http you
1748,09-09,34:08,are probably very familiar with the right so http is used for web service
1749,09-09,34:13,okay so you can see different application use different protocols
1750,09-09,34:19,and then at transport layer we also have two types of protocols one type of tcp
1751,09-09,34:25,the other type is udp okay so tcp and udpr
1752,09-09,34:30,um a very different and we're going to deal uh we are going to spend quite some time discussing these two type of tc uh
1753,09-09,34:38,protocols so this is mainly dealing with the process to process data transfer
1754,09-09,34:44,probably you for now you do not have the ideal process yet okay we are going to
1755,09-09,34:50,screen more about this but anyway you need to know okay we have at least two type of protocols that
1756,09-09,34:55,transporter layer the network layer we also have different protocols we have at
1757,09-09,35:01,least we have ip protocol ip is used to determine for example the ip address how
1758,09-09,35:08,is how ip address is uh is uh defined okay and we also have the
1759,09-09,35:16,different routing protocols for networking okay we are going to discuss more about that the link layer we have
1760,09-09,35:22,the ethernet which is for usually for the cable network okay and we also also
1761,09-09,35:29,have the wireless now 80211 like wi-fi for wireless network so these are also
1762,09-09,35:36,different tools of course there are more okay um like bluetooth mobile networks
1763,09-09,35:43,and then physically physically is basically the piece on the wire the
1764,09-09,35:48,zeros and the ones okay and if you if you look at this if we do not if we
1765,09-09,35:53,ignore the physical layer okay if you look at the upper four layers
1766,09-09,35:58,each layer has some protocols okay reside in that layer that's why we
1767,09-09,36:06,call this as internet protocol stack okay and in the future also in the test
1768,09-09,36:12,i may give you an application so for example i may say okay for http that's
1769,09-09,36:18,the application now what is the protocol used at the application layer you know it is http right for web service and
1770,09-09,36:26,then what is the protocol used for transport layer you can see this is uh this may be tcp okay and then what is
1771,09-09,36:32,the protocol as the narrow player and say this is ip and what is the protocol nuclear this may be ethernet maybe wi-fi
1772,09-09,36:39,okay so as you can see in order to support
1773,09-09,36:44,foreign service okay
1774,09-09,36:49,we need a a bunch of protocols actually okay from application layer to the link
1775,09-09,36:55,layer so http tcp ip or 80211 okay then
1776,09-09,37:02,this is uh this is how the internet protocol stack is used to support this
1777,09-09,37:09,map service okay that is the general idea for internet protocol stack
1778,09-09,37:16,um and then you may you may ask so how about the other two layers in the osi
1779,09-09,37:21,model the presentation layer and the session layer okay so pay attention that again
1780,09-09,37:28,reference model is just for reference it's like a framework but the protocol stack is a is the reality is what we use
1781,09-09,37:37,in reality is for the real implementation okay so if you want to uh do some kind some
1782,09-09,37:45,functionalities from the presentation layer and session layer okay so you may
1783,09-09,37:51,do it in the application layer uh so for example if you want to do some encryption or comprehension compression
1784,09-09,37:58,okay or do some machine specific conversions then in this case it's like
1785,09-09,38:04,to interpret the meaning of the data right so then we can have some
1786,09-09,38:11,functionalities implemented in the application layer okay uh to complete
1787,09-09,38:17,those functions for example we all know that when you develop some application you can
1788,09-09,38:23,call some encryption library right to do the encryption decryption so it's it's
1789,09-09,38:29,like that and then for session layer session layer is used you usually used for a
1790,09-09,38:36,synchronization uh checkpointing the recovery of data exchange okay so this
1791,09-09,38:42,is uh obviously this part is um is uh actually implemented in the transporter
1792,09-09,38:49,layer and the um yeah mainly the transporter layer actually for a data reliable data
1793,09-09,38:57,transfer okay and of course the error checking those kind of thing uh
1794,09-09,39:03,synchronization kind of thing is actually done at the link layer also okay different layer
1795,09-09,39:10,they all have this kind of functionalities um okay so and again pay attention these
1796,09-09,39:17,two layers are missing questions so far
1797,09-09,39:24,whose hand are those handled by the application layer
1798,09-09,39:29,or by the end systems uh so as i mentioned uh pay attention let's that
1799,09-09,39:35,there is some very important thing i want to discuss here so we are talking about the internet
1800,09-09,39:41,protocol stack here okay and the application layer
1801,09-09,39:47,when we talk about the apple and the system you you may you should ask yourself what kind of what which layers
1802,09-09,39:54,which layers are included in the end systems when we see the end system we
1803,09-09,40:00,basically mean the devices right the um
1804,09-09,40:05,computers the mobile phones etc actually in reality the end system those
1805,09-09,40:12,devices contain all the layers from application layer to
1806,09-09,40:18,transport layer to network layer to link layer to physically all the layers are included in the end systems okay
1807,09-09,40:25,because as you can you can think about on your computer we have the applications right we have the emails
1808,09-09,40:32,the web browsers and then those messages messages need to be sent need to go
1809,09-09,40:38,through the transport layer network learning layer and i i'll explain more and you have a better idea about how
1810,09-09,40:45,this happened but anyway the ender system can hear all this okay
1811,09-09,40:50,but the routers the routers have only had have only
1812,09-09,40:57,three layers the routers have only up to network
1813,09-09,41:02,clear the physical layer link layer network layer okay that is uh for the router so when we talk about uh where is
1814,09-09,41:12,uh the application the presentation layer functionality implemented we can see this is implementing application
1815,09-09,41:19,layer okay then that means the application layer basically means it's most likely in an assistant
1816,09-09,41:26,okay because routers do not have application here but for the session layer it's different
1817,09-09,41:32,a second layer um the functionality is defined are like synchronization checkpointing recovery
1818,09-09,41:39,of data exchange etc then for those functionalities those are implemented in
1819,09-09,41:45,multiple layers okay for example synchronization can be done at nuclear then link layer basically means uh it
1820,09-09,41:54,may be in the in the systems and it may be in the routers does this make sense
1821,09-09,42:01,okay yeah so so it's a like like it's an assistant and the
1822,09-09,42:07,the uh the layer stack and the protocol stack is like two different uh concepts
1823,09-09,42:14,okay so we need to clarify that okay all right so that
1824,09-12,0:04,yeah so so it's a like like it's another
1825,09-12,0:07,systems and the
1826,09-12,0:09,the uh the layer stack and the protocol
1827,09-12,0:13,stack is like two different uh concepts
1828,09-12,0:16,okay so we need to clarify that
1829,09-12,0:19,okay all right so that let's look at one
1830,09-12,0:24,example and then after this example you
1831,09-12,0:27,probably can understand the
1832,09-12,0:28,encapsulation much better okay in cap
1833,09-12,0:31,solution and also how the internet works
1834,09-12,0:33,okay much better you have a better idea
1835,09-12,0:35,so as i said as i said as you can see
1836,09-12,0:38,here we have a computer
1837,09-12,0:41,a
1838,09-12,0:43,computer b and switch s and a router are
1839,09-12,0:50,okay then
1840,09-12,0:53,as i mentioned as i mentioned in the
1841,09-12,0:56,devices and systems we have all five
1842,09-12,0:58,layers as you can see in a and b
1843,09-12,1:01,they have application layer to physical
1844,09-12,1:03,year
1845,09-12,1:04,okay
1846,09-12,1:05,then the writers only have three layers
1847,09-12,1:09,physical layer link layer and network
1848,09-12,1:11,layer switch has only two layers link
1849,09-12,1:14,layer and physically okay so for now we
1850,09-12,1:16,don't need to know why later in later
1851,09-12,1:19,chapters we are going to explain more
1852,09-12,1:21,okay but now i just want you to know
1853,09-12,1:25,how can we send a message how could this
1854,09-12,1:28,message be delivered okay how would this
1855,09-12,1:31,work
1856,09-12,1:32,so here
1857,09-12,1:34,um there is one concept means
1858,09-12,1:36,encapsulation and i'll explain uh more
1859,09-12,1:39,about that okay so firstly if one day
1860,09-12,1:43,you want to send a message this message
1861,09-12,1:45,can be a email message can be a http
1862,09-12,1:48,request message for example if you want
1863,09-12,1:50,to request for a web page whatever so
1864,09-12,1:53,let's just assume this is a like like a
1865,09-12,1:55,email okay email message then we have a
1866,09-12,1:58,message app so this m pay attention this
1867,09-12,2:02,m is at application layer okay you
1868,09-12,2:06,basically you open your outlook you type
1869,09-12,2:08,in a message then that's some okay
1870,09-12,2:11,as i mentioned this message is usually
1871,09-12,2:14,very big
1872,09-12,2:15,okay your labor big of course it may be
1873,09-12,2:18,super small but we have to uh usually we
1874,09-12,2:21,have to break it into smaller pieces
1875,09-12,2:23,okay after we break it into smaller
1876,09-12,2:26,pieces
1877,09-12,2:28,so here in this animation it doesn't
1878,09-12,2:30,show that we break m into smaller pieces
1879,09-12,2:34,but you should know you should know that
1880,09-12,2:36,your lady we will do this kind of uh
1881,09-12,2:38,breaking okay
1882,09-12,2:41,and then this now the m comes down to
1883,09-12,2:46,the transporter layer or a piece of m
1884,09-12,2:48,comes down to transport layer okay
1885,09-12,2:51,then transport layer is is like uh as we
1886,09-12,2:54,said it will do the
1887,09-12,2:56,um it will
1888,09-12,2:58,um add some information okay it will add
1889,09-12,3:01,some thing like transporter layer header
1890,09-12,3:04,okay so header you can imagine this as
1891,09-12,3:08,uh the envelope
1892,09-12,3:10,okay so the message is like you you have
1893,09-12,3:13,a several pages of a letter and now when
1894,09-12,3:16,it comes to transporter layer we need to
1895,09-12,3:18,add one layer of envelope okay on this
1896,09-12,3:23,envelope we will write down some
1897,09-12,3:25,information like
1898,09-12,3:26,uh what is the source process what the
1899,09-12,3:29,destination process okay it's like uh i
1900,09-12,3:33,need to write down oh this is from uh
1901,09-12,3:35,showian sun to let's say to michael
1902,09-12,3:39,okay so it's like that so i need to
1903,09-12,3:41,specify who is the sender who's the
1904,09-12,3:44,receiver who is the signing process
1905,09-12,3:46,who's the receiving process okay of
1906,09-12,3:48,course there are more information in the
1907,09-12,3:50,header you don't need to know what is in
1908,09-12,3:52,the header yet okay but here you can say
1909,09-12,3:55,okay i add some header it's called ht
1910,09-12,3:58,okay and then now this entire thing
1911,09-12,4:02,is called a segment or datagram
1912,09-12,4:06,depending on what kind of protocol
1913,09-12,4:07,you're using if you're using udp then
1914,09-12,4:10,that's datagram if you are using tcp
1915,09-12,4:12,then that's called segment but usually
1916,09-12,4:14,we just call segmented transport layer
1917,09-12,4:16,okay
1918,09-12,4:17,then again this message needs to travel
1919,09-12,4:21,down this now this segment needs to
1920,09-12,4:24,travel down to another layer below why
1921,09-12,4:28,because we need to send it out right so
1922,09-12,4:31,then we i mean it comes down to another
1923,09-12,4:34,layer to the network layer we need to
1924,09-12,4:37,add some
1925,09-12,4:38,network a little header it's like we are
1926,09-12,4:43,adding another envelope outside
1927,09-12,4:46,the envelope of a transpose layer does
1928,09-12,4:49,this make sense
1929,09-12,4:51,so we add another let me wrap it again
1930,09-12,4:54,okay and this time on the on the outer
1931,09-12,4:58,outside or outside envelope we will we
1932,09-12,5:03,will uh write down some information
1933,09-12,5:05,about the ip address
1934,09-12,5:08,so this is from uh sacramento to some
1935,09-12,5:14,place in in new york okay it's like that
1936,09-12,5:16,so we need to write down the ip
1937,09-12,5:18,information and of course there are
1938,09-12,5:21,other information included in the
1939,09-12,5:22,network header okay so this is a network
1940,09-12,5:25,layer header
1941,09-12,5:26,and now we can keep call this thing as a
1942,09-12,5:29,packet so you can say in networking we
1943,09-12,5:31,usually say oh packet packet but packet
1944,09-12,5:33,is actually an hour clear thing if we
1945,09-12,5:36,make this very formal okay
1946,09-12,5:40,and then when it comes down to a layer
1947,09-12,5:42,below
1948,09-12,5:44,okay
1949,09-12,5:45,this is a link layer we need to again
1950,09-12,5:48,add some link layer header so it's like
1951,09-12,5:51,we are adding another envelope outside
1952,09-12,5:54,of the all the envelopes okay so it's a
1953,09-12,5:57,like we are wrapping it again again
1954,09-12,6:00,later on later okay it's like an onion
1955,09-12,6:03,so now we have uh this is a thing called
1956,09-12,6:06,frame so if the frame has a header
1957,09-12,6:09,called link layer header okay
1958,09-12,6:12,the frame will add some information like
1959,09-12,6:15,the mac address what is the source mac
1960,09-12,6:17,address what is the destination map
1961,09-12,6:19,address
1962,09-12,6:20,okay
1963,09-12,6:21,uh so you may not know what is a mac
1964,09-12,6:24,address you don't need to know now i
1965,09-12,6:27,think some of you may have already heard
1966,09-12,6:29,this term before right so what is the
1967,09-12,6:31,mac address for device usually each
1968,09-12,6:33,device has a unique mac address
1969,09-12,6:36,okay
1970,09-12,6:38,um there are more information included
1971,09-12,6:39,in the link layer header but mac address
1972,09-12,6:42,is the most important one or most
1973,09-12,6:45,important piece okay
1974,09-12,6:47,then eventually this frame is sent to
1975,09-12,6:50,the physical layer
1976,09-12,6:52,and this becomes zeros and ones okay
1977,09-12,6:56,send it out
1978,09-12,6:59,so you can see how it travels
1979,09-12,7:02,it's very interesting actually it comes
1980,09-12,7:04,to the physical layer
1981,09-12,7:06,and then goes down to the it goes up to
1982,09-12,7:08,the link layer so why
1983,09-12,7:10,because
1984,09-12,7:13,these are these signals are zeros and
1985,09-12,7:15,ones right of course it will firstly
1986,09-12,7:17,come to the physical year
1987,09-12,7:19,because they all arrived at the zeros
1988,09-12,7:22,and ones right and then we pass it down
1989,09-12,7:25,to up layer to link layer the link layer
1990,09-12,7:27,will
1991,09-12,7:29,um
1992,09-12,7:30,sorry pass it up to nuclear the nuclear
1993,09-12,7:33,will do some process here and then pass
1994,09-12,7:35,it down again to the physical layer
1995,09-12,7:38,becomes zero the ones when it arrives at
1996,09-12,7:41,the router okay it's the same process it
1997,09-12,7:45,arrives at zeros and ones okay then we
1998,09-12,7:49,when it comes to the link layer when
1999,09-12,7:51,this this uh
2000,09-12,7:53,frame come to link layer okay and now
2001,09-12,7:56,you can see what will happen is very
2002,09-12,7:58,interesting the link layer the router
2003,09-12,8:01,will will read the link layer header
2004,09-12,8:03,you'll see oh this is to this mac
2005,09-12,8:05,address okay and then this header will
2006,09-12,8:08,be removed
2007,09-12,8:10,so then what is passed to the up layer
2008,09-12,8:14,is actually we only have these ones left
2009,09-12,8:17,each n h t and m
2010,09-12,8:21,so you can see the link layer header is
2011,09-12,8:23,removed and the network network layer
2012,09-12,8:26,will read the network layer header like
2013,09-12,8:29,oh what is the address okay
2014,09-12,8:32,then this layer will this header will be
2015,09-12,8:35,removed
2016,09-12,8:37,okay so we have only h t and m left
2017,09-12,8:41,um so
2018,09-12,8:43,the router may add a new network layer
2019,09-12,8:48,header when it comes down to the link
2020,09-12,8:50,layer one the link layer will add a new
2021,09-12,8:53,header link layer header okay so it
2022,09-12,8:56,becomes zeros and ones again and then
2023,09-12,8:59,pass it to the destination b
2024,09-12,9:02,so again it becomes zeros and ones and
2025,09-12,9:07,physical error at b b will convert this
2026,09-12,9:11,and pass this up to nuclear link layer
2027,09-12,9:14,will read the link layer header remove
2028,09-12,9:17,this
2029,09-12,9:19,okay positive to network layer it's like
2030,09-12,9:22,open the envelope the
2031,09-12,9:26,outside layer of envelope then it comes
2032,09-12,9:30,down to the to comes up to the network
2033,09-12,9:32,layer network layer will read the header
2034,09-12,9:35,network layer header remove this header
2035,09-12,9:39,okay and then pass what is inside to the
2036,09-12,9:42,transport layer then transport delivery
2037,09-12,9:43,the header and remove it finally the
2038,09-12,9:46,message is passed to the application
2039,09-12,9:48,here
2040,09-12,9:48,so it's like the only again it's like
2041,09-12,9:51,the onion we have ionia we remove one
2042,09-12,9:54,layer and another layer and then another
2043,09-12,9:56,layer finally we see the the message in
2044,09-12,9:59,the core okay oh it's like
2045,09-12,10:02,um a letter that is wrapped with
2046,09-12,10:04,multiple multi-layers of envelope so we
2047,09-12,10:06,remove the envelope one by one okay
2048,09-12,10:09,finally we see the method inside okay so
2049,09-12,10:12,this is uh the entire process explains
2050,09-12,10:15,how the message is sent and received and
2051,09-12,10:19,uh in this entire process we see the
2052,09-12,10:22,concept of encapsulation
2053,09-12,10:24,okay
2054,09-12,10:26,any questions so far hope you are not
2055,09-12,10:29,all around
2056,09-12,10:31,yeah i just wanted to clarify so when i
2057,09-12,10:34,go to into the router it peel off the hl
2058,09-12,10:37,and then it somehow get the hl again and
2059,09-12,10:40,then when it comes to the destination
2060,09-12,10:42,apiol of the hl one more time
2061,09-12,10:46,uh good question you mean here yes we
2062,09-12,10:49,need to get this get rid of this hl
2063,09-12,10:51,right and then
2064,09-12,10:54,so after we get rid of this hl and when
2065,09-12,10:58,it comment comes down to comes to the
2066,09-12,11:01,left part actually uh it's like it's
2067,09-12,11:04,passing up to the network layer right
2068,09-12,11:06,and then uh we need in the network layer
2069,09-12,11:10,will do some process then it comes down
2070,09-12,11:12,to link layer link layer will add a new
2071,09-12,11:15,hl so although they are all called hl
2072,09-12,11:18,but they are different hl's so yeah in
2073,09-12,11:23,the hl the hl so for example a ringtone
2074,09-12,11:25,in the mac address is uh is a is a the
2075,09-12,11:29,definition and mac address is probably
2076,09-12,11:30,this router okay but now the router will
2077,09-12,11:34,change the destination mac address into
2078,09-12,11:36,uh the into b's mac address
2079,09-12,11:39,okay so that's why this hl is actually a
2080,09-12,11:42,new hl
2081,09-12,11:44,okay it's different from the one here on
2082,09-12,11:48,the right on the right a right side of
2083,09-12,11:50,the router
2084,09-12,11:51,but when this message
2085,09-12,11:54,when this entire thing is sent to here
2086,09-12,11:56,to be okay so this each l is the same as
2087,09-12,12:00,this one
2088,09-12,12:02,and why does it have what's the
2089,09-12,12:04,difference between those hl uh
2090,09-12,12:08,this one this hl as i said is the same
2091,09-12,12:11,as this hl
2092,09-12,12:12,okay because uh it's simply this thing
2093,09-12,12:16,this entire thing
2094,09-12,12:17,is the past to be okay so it's still the
2095,09-12,12:21,same thing that the hl is the same thing
2096,09-12,12:23,and then this link layer will will read
2097,09-12,12:27,this hl
2098,09-12,12:28,and then remove this hl then pass what
2099,09-12,12:32,is inside to the arp layer
2100,09-12,12:35,that doesn't make sense yeah yeah thank
2101,09-12,12:37,you okay great
2102,09-12,12:41,uh other questions
2103,09-12,12:45,one question in the chat is is the link
2104,09-12,12:48,layer created by the network layer
2105,09-12,12:53,do you mean the link clear header or the
2106,09-12,12:55,link layer yeah
2107,09-12,12:57,um
2108,09-12,12:59,i was just going to say does does it
2109,09-12,13:02,strip the the link when it gets to a
2110,09-12,13:04,router it strips the link
2111,09-12,13:06,um layer off and then reads the network
2112,09-12,13:09,layer to create a new link to the next
2113,09-12,13:10,destination is that how it works
2114,09-12,13:13,then puts the header back up top once it
2115,09-12,13:15,has a new heading
2116,09-12,13:18,um so here what what will happen is it
2117,09-12,13:21,will read the link layer header let me
2118,09-12,13:25,can i can i just
2119,09-12,13:27,maybe remove all those drawings so we
2120,09-12,13:32,can see it better
2121,09-12,13:36,when it comes to the router here this is
2122,09-12,13:41,network layer so let me see
2123,09-12,13:48,firstly event arrives it has all those
2124,09-12,13:51,four layers headers link near header
2125,09-12,13:53,network layer header transport layer
2126,09-12,13:55,header and the message itself okay then
2127,09-12,13:59,the link layer header can only be
2128,09-12,14:02,understood by the link layer
2129,09-12,14:05,so you can think about this the the link
2130,09-12,14:08,layer uh can understand the link layer
2131,09-12,14:10,right so that's why the link layer
2132,09-12,14:12,header can be understood by only the
2133,09-12,14:14,link layer
2134,09-12,14:15,it will it's it doesn't contain any
2135,09-12,14:19,information that is useful for other
2136,09-12,14:21,layers
2137,09-12,14:22,okay so then the link layer will just
2138,09-12,14:25,read the information from the link layer
2139,09-12,14:27,header and after the information is used
2140,09-12,14:30,it's not when link layer knows
2141,09-12,14:33,what what is happening who is the uh
2142,09-12,14:36,receiving mac address the link layer can
2143,09-12,14:38,simply remove this header and pass it to
2144,09-12,14:41,our player okay
2145,09-12,14:44,but when but you know you know because
2146,09-12,14:47,of this this this entire thing
2147,09-12,14:49,still has to be passed down to the lower
2148,09-12,14:52,layer in order to transcend it out we
2149,09-12,14:55,still need to become zeros and ones
2150,09-12,14:57,that's why when it comes down to the
2151,09-12,15:00,link layer again
2152,09-12,15:02,then we have to add a new link layer
2153,09-12,15:04,header
2154,09-12,15:06,okay add another link at layer header so
2155,09-12,15:09,some of you may ask why do we do that
2156,09-12,15:12,okay because okay this uh as weeks and
2157,09-12,15:16,explain more and learn more especially
2158,09-12,15:19,when we talk about the link layer okay
2159,09-12,15:21,then you will understand
2160,09-12,15:22,sometimes we need to change the mac
2161,09-12,15:25,address in between
2162,09-12,15:27,okay so because the link layer is dna
2163,09-12,15:31,with only the neighbors okay dealing
2164,09-12,15:33,with only the neighbors for example if
2165,09-12,15:35,i'm the uh the sender okay if let's see
2166,09-12,15:39,a question is uh my direct neighbor okay
2167,09-12,15:43,then i'll put the mac address or
2168,09-12,15:47,question
2169,09-12,15:48,as the link layer as the destination mac
2170,09-12,15:52,address
2171,09-12,15:53,okay as the destination mac address
2172,09-12,15:56,but actually eventually this letter is
2173,09-12,15:59,going to let's say going to michael
2174,09-12,16:02,okay eventually this letter is going to
2175,09-12,16:05,michael then my the first mac address i
2176,09-12,16:08,use is probably christian mac address
2177,09-12,16:10,then
2178,09-12,16:12,when christian received this christian
2179,09-12,16:14,needs to replace the mac address to
2180,09-12,16:18,his direct neighbor okay so probably his
2181,09-12,16:21,direct neighbor is a victor so then
2182,09-12,16:24,he will change the link layer address
2183,09-12,16:27,the mac address into victor's mac
2184,09-12,16:29,address
2185,09-12,16:30,okay and then again so so you can see in
2186,09-12,16:35,this process where we how to change the
2187,09-12,16:37,mac addresses sometimes we have to
2188,09-12,16:40,change some of the information in
2189,09-12,16:41,between that's why we actually we are
2190,09-12,16:43,changing the link layer header
2191,09-12,16:46,okay we are adding a new header and then
2192,09-12,16:49,this entire thing is passed to here then
2193,09-12,16:53,the definition will remove the headers
2194,09-12,16:55,layer by layer
2195,09-12,16:57,you can imagine okay you can imagine you
2196,09-12,17:01,have a letter
2197,09-12,17:02,okay the letter is wrapped
2198,09-12,17:07,the letter is wrapped again and again
2199,09-12,17:10,and again okay for different layers to
2200,09-12,17:13,understand
2201,09-12,17:14,okay it's wrapped with different
2202,09-12,17:16,envelopes okay then when it comes to
2203,09-12,17:20,specific layer
2204,09-12,17:22,the layer can only read the envelope
2205,09-12,17:25,information
2206,09-12,17:26,for this specific layer
2207,09-12,17:30,okay so for example the link layer
2208,09-12,17:35,the link layer
2209,09-12,17:37,can only read the envelope information
2210,09-12,17:40,from here after it reads the information
2211,09-12,17:44,then it doesn't need this layer anymore
2212,09-12,17:46,it doesn't need this envelope anymore so
2213,09-12,17:49,then this envelope is removed
2214,09-12,17:52,the inside is passed to the up layer
2215,09-12,17:55,okay
2216,09-12,17:56,then of course if we want to send it out
2217,09-12,18:00,okay
2218,09-12,18:01,send this entire thing this entire
2219,09-12,18:03,letter out again we have to add another
2220,09-12,18:05,envelope nuclear envelope
2221,09-12,18:08,okay so when it comes down comes to the
2222,09-12,18:12,um destination then again we remove the
2223,09-12,18:15,envelope layer by layer
2224,09-12,18:18,okay finally we can see the inside it's
2225,09-12,18:20,like that
2226,09-12,18:22,um for now we didn't cover we didn't
2227,09-12,18:25,mention anything about the routing we i
2228,09-12,18:27,mean in this entire process there's no
2229,09-12,18:30,routing kind of thing because we
2230,09-12,18:34,um we are purely talking about what rock
2231,09-12,18:36,there is only one way one route this is
2232,09-12,18:40,purely going through this a to s to r
2233,09-12,18:44,and then to b
2234,09-12,18:46,okay we didn't talk talk about oh how
2235,09-12,18:49,about we change to another different
2236,09-12,18:51,route it's like we are talking about
2237,09-12,18:54,only from sacramento
2238,09-12,18:57,to new york
2239,09-12,19:00,okay we are going through probably let's
2240,09-12,19:03,see chicago
2241,09-12,19:06,but we didn't mention a different route
2242,09-12,19:10,that go through la we we we we
2243,09-12,19:14,here we simplify the problem we say okay
2244,09-12,19:17,let's see just let's just look at this
2245,09-12,19:19,route what will happen it's like this
2246,09-12,19:22,because we we have we do not have any
2247,09-12,19:25,um
2248,09-12,19:26,we do not have any more knowledge yet so
2249,09-12,19:29,at the very beginning when we talk about
2250,09-12,19:31,all these different layers how this will
2251,09-12,19:33,work this is uh probably a little bit
2252,09-12,19:35,overwhelming and very abstract okay
2253,09-12,19:40,um but gradually gradually just keep
2254,09-12,19:42,this in your mind this is how we work
2255,09-12,19:44,how this latest kind of thing work okay
2256,09-12,19:48,keep it in your mind and gradually when
2257,09-12,19:50,we learn more about the each layer okay
2258,09-12,19:53,then you will understand how the entire
2259,09-12,19:56,thing works we are going to talk about
2260,09-12,19:58,uh the now
2261,09-14,0:01,each layer okay then you will understand how the entire thing works we are going
2262,09-14,0:08,to talk about uh the network security okay security is actually uh now a very
2263,09-14,0:14,important aspect in networking and we will not go deep into the security but
2264,09-14,0:20,we will uh we will only introduce some of the basic concepts very common attack
2265,09-14,0:26,types things like that if you want to know more about security
2266,09-14,0:32,um you uh and we later in this class we will still uh when we introduce some of
2267,09-14,0:37,the applications or some of the protocols we will still talk about
2268,09-14,0:43,security if they are related but anyway in this class the major focus
2269,09-14,0:49,is not security so if you are really interested in this topic then you should
2270,09-14,0:55,take 154 the security class okay all right so let's see
2271,09-14,1:04,so basically uh for network security we are talking about the attack and defense
2272,09-14,1:10,most of the time okay um in the network security field we we
2273,09-14,1:16,are really interested in how the bad guys uh can attack the computer networks how
2274,09-14,1:24,can they achieve the attack the tax okay and then how we can defend the network
2275,09-14,1:29,attacks against this uh the networks against the net attacks basically we
2276,09-14,1:35,always have attackers and defenders usually most of the enterprise networks
2277,09-14,1:40,have dedicated groups or teams security teams to
2278,09-14,1:45,work uh against the attackers basically they will deploy some security sensors
2279,09-14,1:51,some of the defending tools like firewalls detection tools so they they
2280,09-14,1:59,can protect the network better okay so this is a what what will happen what
2281,09-14,2:04,happens in the enterprise networks and then people also didn't also think about
2282,09-14,2:09,how to design the architecture that are immune to a text this is actually i
2283,09-14,2:15,would say um a topic that will be there forever okay
2284,09-14,2:21,so it's really hard it's really hard to design an architecture a network
2285,09-14,2:27,architecture that are immune to our text based on especially because we are building this network this internet
2286,09-14,2:34,without security in mind so you can think about it there are a lot of legacy
2287,09-14,2:39,issues right so we designed the network in this way without secreting in mind and now if you want to completely change
2288,09-14,2:46,the architecture to make it immune to our taxes so i would say it's very very challenging it's very hard okay
2289,09-14,2:53,um so originally people really don't think about security they just when we when we first saw
2290,09-14,3:00,vision the internet uh people just think this is a a group of mutually trusted
2291,09-14,3:06,users attached to a transparent network this is really if you you stand at this
2292,09-14,3:12,point right now you will see oh okay this version is really innocent right it's really a naive but um
2293,09-14,3:21,at that time when network was firstly designed people do things like that okay
2294,09-14,3:26,until until some naughty high school students began to do something back to
2295,09-14,3:32,the network and then people realize oh okay this kind of vacation actions can
2296,09-14,3:38,really really um lead to some disasters in networking
2297,09-14,3:43,okay so then the internet protocol designers are now playing the catch-up games
2298,09-14,3:49,basically we want to improve this protocol in this way in that way to make
2299,09-14,3:55,the networking more secure okay more secure but still as i said it's it's
2300,09-14,4:00,very challenging okay that's why the cyber security right now is actually a
2301,09-14,4:05,very hot topic in the research area okay very hot topics
2302,09-14,4:10,um and if uh if you have some background in security when you are looking for a
2303,09-14,4:16,job you definitely stand out from the others okay so um some of you may may ask that if we
2304,09-14,4:25,consider security where should we consider security we learned the five layers right five internet protocol
2305,09-14,4:32,stack layers um we have application near transport layer network layer link layer physical
2306,09-14,4:39,layer then where should we put security as i mentioned this is actually a
2307,09-14,4:44,drawback or layer the layer kind of architecture right so security does not fit to one specific layer okay so
2308,09-14,4:54,security must be considered in all different layers we need all layers from
2309,09-14,4:59,application layer to the physical layer so this is something you have to keep in
2310,09-14,5:04,mind foreign what is the goal of the bad guys
2311,09-14,5:12,okay basically their goal is to put the malware into the hose here the horse
2312,09-14,5:19,with me all the different computing devices like computers ipads tablets right so mobile phones all
2313,09-14,5:28,those kind of things so put malware into the host via internet
2314,09-14,5:33,okay this is a this is basically the goal of the attackers okay so the
2315,09-14,5:41,malware can actually get into house in different ways for example they can get into the house in virus
2316,09-14,5:48,or worn so what what are those virus is basically no matter it's a virus or one
2317,09-14,5:56,we all know this is just a program right so virus and worm are just a piece of
2318,09-14,6:01,code okay but they have different they have difference okay the virus
2319,09-14,6:08,um basically can do self-replicating infection by receiving and executing the object okay so what
2320,09-14,6:16,does this mean this means usually for example when you see a virus when you um
2321,09-14,6:22,usually but this virus i really hidden in some kind of software right in
2322,09-14,6:28,some kind of software or other files so it is usually
2323,09-14,6:35,hidden and when i say hey i mean you cannot tell this is a virus by look just
2324,09-14,6:41,looking at this look at this file okay so for example sometimes you may receive an email and the email saying hey uh
2325,09-14,6:50,please click on that attachment i have some important files for you things like
2326,09-14,6:55,that and once you click on that then this virus this is making this
2327,09-14,7:01,attachment may contain the virus and then these virus may start the self-replicating process okay and you
2328,09-14,7:09,can see in this process in this process other person or other people's actions
2329,09-14,7:17,are very important okay if you do not click on this button
2330,09-14,7:22,if you do need do not click on this attachment then wires can do nothing but if you click on this attachment then
2331,09-14,7:29,the virus can start the self-replicity so that means the user or the internet
2332,09-14,7:35,user innocent user's interaction is actually very important for the
2333,09-14,7:41,self-replicating a virus okay but for warm warm is different okay warm
2334,09-14,7:49,can do self-replicating infection by passively receiving the object that gets
2335,09-14,7:55,itself executed in this process we do not need any actions from the users we
2336,09-14,8:02,do not need any action from the innocent healer that's something you need to keep in mind okay
2337,09-14,8:08,there are actually a lot of different types of worms some are very famous i
2338,09-14,8:14,remember when i was still in china some um there there was one worm i cannot
2339,09-14,8:20,remember them but i i deeply remember the how the computer behave after it is
2340,09-14,8:28,infected so it's very interesting when the computer was infected then
2341,09-14,8:33,everything is gone and the computer just has just display uh
2342,09-14,8:40,a panda just play a panda there um so
2343,09-14,8:46,um i can't describe this very accurately but uh panda is doing something there on
2344,09-14,8:52,the on the computer so nothing else is displayed on the computer and it doesn't react to any of the actions from the
2345,09-14,9:00,users um for this kind of warm so it it's only
2346,09-14,9:05,uses it only uses uh it basically it will
2347,09-14,9:11,only take advantage of the vulnerabilities on the computer okay it
2348,09-14,9:17,doesn't need any actions from uh from the from the user okay so that's the
2349,09-14,9:23,difference between warm and virus i may ask you the difference in the test
2350,09-14,9:29,okay there is another type of malware called spyware spyware is actually very
2351,09-14,9:35,useful and very um obviously very scary okay so spyware
2352,09-14,9:42,can record the case jokes the websites visited um and basically all the actions that
2353,09-14,9:51,you have already taken on the machine and then upload those information to some collection site so you think about
2354,09-14,9:57,this if you type in a website like a bank a bank like chase.com okay and then
2355,09-14,10:06,you begin to type in some username and password then this
2356,09-14,10:12,kind of spiral is able to remember what website you have visited and what
2357,09-14,10:18,letters you have typed into so then of course we can know the username and
2358,09-14,10:24,password right so that is a harmful to the users okay
2359,09-14,10:30,um so that is another type so some of you may ask what can they do
2360,09-14,10:37,what can the attackers do if they get the house infected no matter using
2361,09-14,10:44,wireless or warm so what can they do so they can do a lot of things if they
2362,09-14,10:52,compromise a machine okay you think about this one thing is as i said
2363,09-14,10:57,probably they can install some spyware to monitor what you have already done
2364,09-14,11:03,okay so they can steal your credentials that's one thing another thing is they
2365,09-14,11:09,can control your machine right so actually in fact your machine they can
2366,09-14,11:16,um so they can work as like administrator they they may say if so
2367,09-14,11:22,for example if in if your motion is a linux system then they can type in some commands okay they can type in some
2368,09-14,11:29,commands um then ask the machine to execute okay so for example they can send the very
2369,09-14,11:37,important files back to the collection site back to the attackers or especially
2370,09-14,11:44,if this machine is a very important machine like if this she is the
2371,09-14,11:49,workstation used by a ceo of a company right so then this ceo's machine may
2372,09-14,11:56,have a lot of uh important files like financial files or other type of files
2373,09-14,12:03,then attackers are able to to collect those information to uh to have some
2374,09-14,12:11,financial gains those kind of things right uh and we can they can also do other things okay for example you may
2375,09-14,12:18,say oh my machine does not have this kind of a very important
2376,09-14,12:23,um in files or information so i don't need to care about this you still need to care about this
2377,09-14,12:29,because um these attackers may may control your machine and use your
2378,09-14,12:36,machine to do something okay so for example even they can use your cpus your
2379,09-14,12:43,computing resources okay to do something back or they can control your machine to
2380,09-14,12:49,get your machine enrolled in the botnet so what is a botnet bottleneck means a
2381,09-14,12:54,net worth of bots so a network of sleeves basically your machine is like a
2382,09-14,13:00,sleeve or a bot that can be used for a lot of things like spam like adidas
2383,09-14,13:06,attacks okay so for example sending out spam emails or conducting ddos attacks
2384,09-14,13:13,so probably you do not understand what is ddos we are going to introduce this in this slide so before i introduce ddos
2385,09-14,13:21,details sorry details means distributed foreign
2386,09-14,13:31,distributive denial service that is ddos okay before i introduce the distributed
2387,09-14,13:39,denial services let's first we talk about the denial service okay only does
2388,09-14,13:45,so what is the noun service attack uh basically the now service means that
2389,09-14,13:50,attackers make the resources resources here with me the server the computing
2390,09-14,13:56,resources the bandwidth making these resources and available to
2391,09-14,14:02,legitimate traffic by by overwhelming resource with focus traffic
2392,09-14,14:08,so what does this mean this means so for example this is a server right so
2393,09-14,14:15,this target here is a server when we see a server we mean the server is serving a
2394,09-14,14:22,number of clients okay so for example you think about the google web server so it is serving the
2395,09-14,14:30,clients all over the world or you think about the sac state's web server it is serving all the sac state
2396,09-14,14:38,faculty and staff and students right so those servers are serving the clients
2397,09-14,14:46,okay and then we want to if this is serving the clients we want to make sure the service is available to everybody
2398,09-14,14:54,okay it's available to everybody then but one day if the server the the
2399,09-14,15:00,service cannot be available to someone then this is problematic okay for
2400,09-14,15:05,example if you one day you want to visit the website for sac state you cannot you
2401,09-14,15:10,cannot visit it then you you will feel bad right or if one day you cannot use google then you will feel frustrated so
2402,09-14,15:18,that's that's why we want to make the service available to everybody so what's the the attacker will do in
2403,09-14,15:25,the denial service attack is firstly it will select a target
2404,09-14,15:31,okay then the attackers will break into the house
2405,09-14,15:37,around the network okay so for example you can say those ones are all
2406,09-14,15:44,compromised by the attackers now these computers becomes
2407,09-14,15:50,the bots it all becomes the sleeves so they will
2408,09-14,15:55,basically follow all the commands by the master the master here is uh is a machine
2409,09-14,16:02,controlled by the attacker okay so after that after that then the
2410,09-14,16:10,attacker will send the package to the target from the compromise house so you
2411,09-14,16:16,can say there are so many computers controlled by the attacker they can send
2412,09-14,16:23,packets to the target at the same time okay simultaneously can we can do this
2413,09-14,16:28,at the same time then in this case the server does not know the server pay
2414,09-14,16:35,attention the server does not know that this request this packets are from
2415,09-14,16:41,malicious machines the server will just treat them as legitimate users innocent
2416,09-14,16:47,users okay then the server will try to serve all these machines or to to get
2417,09-14,16:56,respect to respond to all those requests okay
2418,09-14,17:02,then in this case as you can see because the server is too busy with those
2419,09-14,17:08,malicious requests how what if if there is one innocent user who also want to
2420,09-14,17:16,get service from the server could the server still reply back the server
2421,09-14,17:22,cannot okay the server does not have the capacity to reply back to the client
2422,09-14,17:31,okay so that's that's that means the server is actually denying denying to
2423,09-14,17:39,serve the client that's why we call this as denial or service attack
2424,09-14,17:44,does this make sense so it's like for example if i'm uh i'm
2425,09-14,17:50,having office hours okay i have office hours to all the students in our class
2426,09-14,17:56,if one day okay if one day let's say we have some bad guy let's see alex is a
2427,09-14,18:03,is the bad guy who controlled most of our students in
2428,09-14,18:09,this class alex yes sorry for using you as an
2429,09-14,18:14,example okay um so let's say um
2430,09-14,18:24,um so let's say alex now controls most of the students in our class and he he
2431,09-14,18:30,sent uh this this bad students to my office hours and each student will i
2432,09-14,18:38,mean they all stay there for very very long time so then i'm fully occupied by
2433,09-14,18:43,these bad students right then in this case if we have a good student let's see
2434,09-14,18:50,uh aaron comes in ira is a good student so he wants to see me to get help so can
2435,09-14,18:57,i still help aaron i cannot right so this is the denial service to
2436,09-14,19:04,aaron and all the other students actually okay
2437,09-14,19:11,um so that's what we call as denial service attack so actually what i i'm describing here
2438,09-14,19:19,is a you can you can view it as a distributed uh denial service because
2439,09-14,19:25,you can see all those requests are distributed into different machines
2440,09-14,19:33,okay into different machines this is already distributed in our service attack so some of you may think that
2441,09-14,19:39,what is the now service attack in our service attack is uh basically what we
2442,09-14,19:45,mean is a for example if we have alex again as the bad guy so alex come to my
2443,09-14,19:51,office hour and ask me uh millions of questions okay
2444,09-14,19:57,so then i'm too busy with alex i have to answer all his questions then in this
2445,09-14,20:04,case in this case i cannot serve anybody else right so so basically the attack
2446,09-14,20:09,the attack is from alex itself only one machine is sending a lot of requests
2447,09-14,20:16,okay that is the now service attack but for denial of service attack i would say it's it's kind of easy to block to to
2448,09-14,20:23,prevent or to uh to address this issue for example if i know alex is is a bad
2449,09-14,20:30,guy then i can simply say oh i recognize you you are you are the bad guy i i won't let you come
2450,09-14,20:37,to my office hour okay it's very easy to plug
2451,09-14,20:42,um similarly if we say one machine if we see one machine is making a lot more requests to the server then we can
2452,09-14,20:50,simply block that machine because we can easily we can easily tell the ip address
2453,09-14,20:55,of that machine okay we can just block the track traffic from this machine so it's very easy
2454,09-14,21:01,but for distribution uh denial service as you can see because the traffic is
2455,09-14,21:06,coming from all different users okay although they are all malicious users
2456,09-14,21:12,but they are coming from all different ip addresses how can i block them we cannot because it's very
2457,09-14,21:19,hard to tell which ones are innocent which ones are not innocent okay which
2458,09-14,21:24,ones are malicious it's very hard to tell that's why distributed denial service attack is actually much harder
2459,09-14,21:31,to prevent than denial service attack and
2460,09-14,21:36,in the test i may ask you what is the denial service attack okay or what is a distributed now
2461,09-14,21:43,service attack so you should know um the definition here okay
2462,09-14,21:51,the next question the next topic is about packet sniffing so what is packing
2463,09-14,21:56,sniffy pakistani means if we have two computers talking to each other
2464,09-14,22:03,okay and these two computers they need to use some kind of uh media right or
2465,09-14,22:09,sometimes men or many times they have to use like broadcast media like uh the
2466,09-14,22:14,shared ethernet or the wireless network okay for example when we use wi-fi when
2467,09-14,22:20,a is sending some information to basically everybody in this network can
2468,09-14,22:28,receive the package from a so it's called broadcasting media okay then in
2469,09-14,22:34,this case in this case if we have some bad guy here like c
2470,09-14,22:40,which can record all the packets passing by
2471,09-14,22:46,okay that is a uh that that will generate some negative impacts so what
2472,09-14,22:53,does this mean you can think about this the bad guy c if it can listen to all
2473,09-14,23:00,the package then it is able to capture all the information inside the package
2474,09-14,23:05,right for example here if b is sending a package to a the source ip address is b
2475,09-14,23:13,destination ip address is a and the payload payload contains some input important
2476,09-14,23:21,information usually okay for example the payload may include the password okay so some of you may think
2477,09-14,23:28,how could the password be included right or
2478,09-14,23:34,are the password encrypted let me tell you the truth
2479,09-14,23:39,many times for many applications actually the passwords are passed or are
2480,09-14,23:47,sent out in plain text you cannot imagine this many of the
2481,09-14,23:53,times when you look at a package you can easily find out the passwords okay
2482,09-14,23:59,that's very important then if c is able to find out the
2483,09-14,24:04,password then c can do a lot of things right if a is the server like let's see
2484,09-14,24:11,a a bank or some other website then c can easily use the password
2485,09-14,24:16,of b to sign in this webpage to basically do anything she wants
2486,09-14,24:24,okay so that's why tech sniffing is actually very important
2487,09-14,24:30,um and as i said not all the applications encrypt the data no many
2488,09-14,24:37,many of the applications simply did not encrypt the data okay that's very important that's actually why in one of
2489,09-14,24:45,my 153 plus some students did a course project
2490,09-14,24:51,to use the wi-fi okay they just go to starbucks or those kind of public wi-fi
2491,09-14,24:57,to set up a fake wi-fi okay uh this week i wi-fi is free to
2492,09-14,25:06,everybody so if you connect to that okay if you connect to that then that
2493,09-14,25:12,um wi-fi will basically collect all the payloads all the pack is going through
2494,09-14,25:17,then in this case they are able to look into the confidential information
2495,09-14,25:23,contained in this uh packets so that's a that's my very interesting thing so some
2496,09-14,25:30,of you may think oh the proximity is mainly used for
2497,09-14,25:35,um malicious uh intent i would say no sometimes the the specs sniffing can
2498,09-14,25:42,also be used for some good uses okay so or at least it's neutral okay it can
2499,09-14,25:49,be for gold or it can be for bad okay it's packaged sniffing legal it depends
2500,09-14,25:57,okay depends so if you are using let's so what i'm going to introduce uh right
2501,09-14,26:03,now is actually the wireshark software and you are actually going to use software shock to do a lab
2502,09-14,26:10,um in our class the wireshark software is a packet sniffer okay it's a package
2503,09-14,26:18,name for it is it is uh it's installed on your machine okay you can install it
2504,09-14,26:23,on your machine or some other people's motion if they allow you to do so then
2505,09-14,26:29,if you enable capturing the packets all the pack is going through
2506,09-14,26:36,all the pack is coming to a machine or going out your from your machine will be
2507,09-14,26:41,captured by workshop okay now you are actually sniffing uh to pack sniffing on
2508,09-14,26:47,your own machine so obviously this is legal okay this is of course legal but sometimes if you want to do packing
2509,09-14,26:54,sniffing on some other machines um especially for those big companies uh
2510,09-14,27:01,that may not be legal okay that's the difference and later you are going to learn more
2511,09-14,27:08,about my shock okay so basically why in my shock you are able to capture uh most of the all
2512,09-14,27:16,the packets okay and then you can see especially for example if you connect to
2513,09-14,27:22,a website uh or if you send out an email so all the traffic are captured and you
2514,09-14,27:28,are able to see uh what is the ip address the source ip address doesn't ip address what is the phone number used so
2515,09-14,27:36,what are the payloads um and you can even see the protocols used at each layer and later as i said
2516,09-14,27:43,in the wireshark lab you are going to learn more about this tool okay so the last one we are going to
2517,09-14,27:50,introduce in our class is uh ips spoofing so what does this mean ip spoofing
2518,09-14,27:57,basically means send in packet with force source address
2519,09-14,28:04,okay so this for example if a and b again are
2520,09-14,28:10,talking to each other okay now b c is the bad guy
2521,09-14,28:16,c can pretend to be a b okay so you can
2522,09-14,28:22,pretend to be b and then send a package to a okay here you can see it is saying
2523,09-14,28:29,the source i source address is b the destination address is a and it's sending some payload then what a reply
2524,09-14,28:36,when a reply a will directly reply to the source okay what our source is put
2525,09-14,28:42,there it will reply to this source so a we are simply reply to
2526,09-14,28:48,see directly okay okay to say directly because say is now
2527,09-14,28:56,using pretending to bb using this ip address right so then any of your think
2528,09-14,29:01,c is uh the um say is the sauce source a will reply
2529,09-14,29:08,back to c okay so then all the basically c is able to capture the package to be
2530,09-14,29:15,um or we can say hijack the package to be okay so most of the time most of the
2531,09-14,29:23,time you may see why do we do this why do why does c do this why does c do the
2532,09-14,29:28,my piece moving is like pretending to be someone else
2533,09-14,29:34,okay so basically if c pretends to be b then c can do a lot of things in the
2534,09-14,29:40,name of b okay many many times and many times ips
2535,09-14,29:45,buffing can be used together with packets packet sniffing how can we do
2536,09-14,29:51,that so if you look at this slide again say can basically if a is talking to b
2537,09-14,29:58,okay c can basically listen to their conversation and then find then capture
2538,09-14,30:04,these packets okay capture this package and see we all know what is the payload etc
2539,09-14,30:12,so especially for example if you see if a is asking for some information from b
2540,09-14,30:19,to authenticate b okay it's like for example what is your
2541,09-14,30:24,mother's maiden name let's see although in networking uh this usually this is
2542,09-14,30:30,another question right but we i think i want to make make your uh clear about how this works so let's just use this
2543,09-14,30:37,example if a is asking maybe what is the middle uh the your mother's maiden name
2544,09-14,30:43,okay only b knows the answer c does not know right but what a c can do is see
2545,09-14,30:51,listening to their conversation and then see basically get this package
2546,09-14,30:58,in this package b is telling a what is the middle name so let's say the middle
2547,09-14,31:03,name is x okay then now c note oh okay b's mother
2548,09-14,31:10,has a maiden name of ads then c can use this
2549,09-14,31:17,x okay to answer the question of a
2550,09-14,31:22,a question from a if c is doing this much faster than b
2551,09-14,31:28,okay then a will basically accept the first the first packet
2552,09-14,31:33,coming to a and then of course here see we also pretend to be
2553,09-14,31:39,b okay then aerials think if you think c is b okay maybe i'll think oh i'm still
2554,09-14,31:47,talking to b and then a will reply to c and c oh okay you are authenticated then
2555,09-14,31:53,now what do you want to do okay then say oh say like okay let me withdraw 1000
2556,09-14,31:58,bucks okay then c can withdraw money from uh b's account
2557,09-14,32:03,so that is what will happen um so what i'm talking about now is actually called the man in the middle
2558,09-14,32:10,attack
2559,09-14,32:17,okay mim nine in the middle attack basically
2560,09-14,32:22,basically c is the mat in the middle c is able to do a lot of bad things by
2561,09-14,32:31,firstly listening to a and b's conversation and then pretending to be b
2562,09-14,32:37,uh to get authenticated and then talk today okay so the my middle mind the middle
2563,09-14,32:44,attack is a very very common in security and it's actually very challenging uh
2564,09-14,32:51,type of attack that that can happen in very in very different scenarios so a
2565,09-14,32:59,lot of research are working on how to prevent this kind of attacks okay
2566,09-14,33:05,uh that's all about the security parts i think we are done with chapter one
2567,09-16,0:05,today we are going to discuss the application layer application layer is
2568,09-16,0:10,the very first layer top the top layer that we will study for this entire class
2569,09-16,0:16,and you are probably worth minimum in some of the terms in this layer so it's
2570,09-16,0:22,actually a good thing to start with um personally this is like the structure for this entire chapter so you can see
2571,09-16,0:30,2.1 is about principles and 2.2 we are going to introduce the web application
2572,09-16,0:36,http service and let me talk about email dns some of the p2p applications and we
2573,09-16,0:44,will discuss the video streaming okay the last portion is the sockey
2574,09-16,0:49,programming assignment project programming okay so i will move this
2575,09-16,0:55,section uh to forward so we can start
2576,09-16,1:01,the soccer program assignment as soon as possible okay all right
2577,09-16,1:07,okay so what already what are we going to accomplish in this chapter
2578,09-16,1:13,basically we are talking about some of the some of the concepts regarding application layer okay i will get you
2579,09-16,1:20,familiar with some of the protocols like http ftp smtp ds okay for sftp we will probably
2580,09-16,1:29,skip ftp will skip okay but for the other protocols we will be we will
2581,09-16,1:36,definitely discuss and another important thing we are going to discuss is about the socket okay this is a very important
2582,09-16,1:44,concept in application layer and you will see this concept again and again
2583,09-16,1:50,actually all right so let's start firstly let's talk about some of the
2584,09-16,1:56,applications network applications i'm sure you are very familiar with some of
2585,09-16,2:02,them right email web test messaging for those who are you you probably use it
2586,09-16,2:07,every day and remote login p2p file sharing uh the games the videos all
2587,09-16,2:15,those kind of things they belong to the applications right so when you when you
2588,09-16,2:20,want to use something use some service but basically you need to firstly install an application on your machine
2589,09-16,2:28,okay on your device it can be a computer or a mobile device right so these are
2590,09-16,2:34,the network applications then when you think about the application if for example if you are
2591,09-16,2:42,starting to create a new network application
2592,09-16,2:48,okay so of course you may need to run some programs as the end systems
2593,09-16,2:53,those programs need to communicate over the network for example you think about
2594,09-16,2:59,this if you are writing a messaging let's say application messenger
2595,09-16,3:05,application right i'll call the two computers need to communicate with each other over the network and then each
2596,09-16,3:13,application each computer each end system needs to need to install this
2597,09-16,3:19,application okay so those applications are installed on and systems and then they communicate
2598,09-16,3:25,now you can also think about the web browser communicate with the uh the
2599,09-16,3:31,other machine okay the other machines so then the web browser here is uh like
2600,09-16,3:37,an application then as we said if you want to write a network application then
2601,09-16,3:44,you need to write a program for that right right program for that application
2602,09-16,3:49,like you need to write a program for this web server sorry for this uh web
2603,09-16,3:55,browser okay sorry i think i i mark something wrong i should say
2604,09-16,4:01,browser okay you need to write a browser application of course if this browser is
2605,09-16,4:09,communicating with web server then you need to also write the web server
2606,09-16,4:14,software okay probably right now i mean the idea of server is still a bit
2607,09-16,4:20,abstract in your mind that's totally fine just imagine it's a machine okay
2608,09-16,4:26,imagine it as a machine um now again for the messaging
2609,09-16,4:31,application as i said if you have two devices communicating with each other
2610,09-16,4:37,they are sending messages to each other then of course you need to write the program for each messaging application
2611,09-16,4:43,okay so those are the things you need to do as the developer
2612,09-16,4:50,but you need to think about this when you write the program for the
2613,09-16,4:55,software or for the application do you need to write the program or the
2614,09-16,5:02,code for the network core devices that means do you need to consider
2615,09-16,5:08,about the routers how the routers work uh how do you set up the routers how do
2616,09-16,5:15,you uh write algorithms or protocols for the browsers do we need to do that
2617,09-16,5:22,you don't need to right you don't need to so as a developer you never worry
2618,09-16,5:28,about how the network code will work how will those vouchers work right you just care
2619,09-16,5:36,about your applications you never worry about those then why why don't you need
2620,09-16,5:42,to think about this as we mentioned before actually the
2621,09-16,5:48,internet is like providing some kind of service right if you take a service view the internet is actually providing you
2622,09-16,5:56,some service so basically all those network core devices have already had their own
2623,09-16,6:03,programs okay so what you need to do as a developer is
2624,09-16,6:09,you only need to write your own application and then use some api to to
2625,09-16,6:18,to use the services provided by those network core devices here what i mean
2626,09-16,6:24,our code devices are the routers right you need to you need to get services from those routers from the
2627,09-16,6:31,infrastructure but you don't need to do it on your own okay it's like
2628,09-16,6:37,when you try to do a business for example okay you may use the postal
2629,09-16,6:42,service then you may drop a package to the or drop the packages to the post office
2630,09-16,6:50,but you never need to deploy the entire network for postal service
2631,09-16,6:56,right so you are using the service from them but you don't need to worry about
2632,09-16,7:02,how they are implemented okay it's the same thing okay it's the same thing so this is
2633,09-16,7:09,about how to create a network application and what you need to worry about basically
2634,09-16,7:15,okay so now you can see uh on the figures we see on the devices
2635,09-16,7:22,on devices or on the end systems they all have five layers
2636,09-16,7:28,okay they all have five layers application layer two physically and then you can see the communication
2637,09-16,7:36,is basically happening between application layer to application layer but later we will know okay the
2638,09-16,7:43,communication is actually supported by the layers below okay by all the layers
2639,09-16,7:51,below okay so question so far
2640,09-16,8:00,okay then the next thing we are going to discuss is the application architectures
2641,09-16,8:07,okay there are generally two types of architectures one is client server model
2642,09-16,8:13,the other one is peer-to-peer model or we can call it p2p model
2643,09-16,8:19,so what are the differences between them probably you are already very familiar
2644,09-16,8:25,with the names right client serum model p2p model but you never know the difference between them let's look at
2645,09-16,8:31,each one firstly for client server model for client server model if we view these
2646,09-16,8:40,are the servers okay the servers will provide services
2647,09-16,8:48,and again as i said servers are just machines okay no matter how big they are
2648,09-16,8:54,they may be back they may be small they may be like just your pc okay but
2649,09-16,9:01,they are providing services to others okay and there are some characteristics
2650,09-16,9:08,for servers for example firstly they are always on
2651,09-16,9:15,okay the servers usually cannot go down if the service go down you can imagine
2652,09-16,9:22,especially for those big companies they may suffer from a lot of financial loss
2653,09-16,9:28,they cannot afford the server was going down okay so basically a huge thing if we see a
2654,09-16,9:34,servers going uh server going down um that's why many times actually the servers they have backup service if one
2655,09-16,9:41,server is down then the other servers can survive the backup uh so that's why it's very important to make sure we have
2656,09-16,9:50,always on servers okay always on cost then uh the second thing is
2657,09-16,9:58,the servers always have permanent ip address
2658,09-16,10:03,what does this mean this means the ip addresses for servers
2659,09-16,10:09,can never be changed okay they are also the same you may ask why
2660,09-16,10:16,the reason is because the clients the clients usually will
2661,09-16,10:21,need to contact the servers right so if the ip address of the servers are
2662,09-16,10:27,changing then how could those clients know what is the most up-to-date ip address
2663,09-16,10:34,right it's very hard for the clients to know so that's why the servers always
2664,09-16,10:39,maintain the same ip address so for example for google okay google.com this uh when you type in
2665,09-16,10:47,google.com actually later you will learn this url google.com will be all this
2666,09-16,10:53,domain name or this server name will be translated into an ip address e uh
2667,09-16,11:00,through the dn service okay uh so basically this ip address is
2668,09-16,11:07,always there okay it's always there that's the second thing the third thing
2669,09-16,11:13,is usually the servers will have data centers for scaling okay of course as i said if you are
2670,09-16,11:21,simply implementing a server or your own use okay or deploy a server
2671,09-16,11:27,for very small company or very small network to serve
2672,09-16,11:32,only a few clients then you probably don't need a data center
2673,09-16,11:38,probably just your um pc is good enough okay
2674,09-16,11:44,but if you have a lot of clients okay if your company is skilling then you have
2675,09-16,11:51,to think about this skilling okay you have to think about how to accommodate the large number of
2676,09-16,11:59,clients that's why we really need the data centers for scaling okay so those
2677,09-16,12:05,are the third characteristics for the servers
2678,09-16,12:10,then for the clients okay for the clients they also have some
2679,09-16,12:15,characteristics for example the clients need to communicate with the server
2680,09-16,12:21,okay they usually need to communicate with the server they do not communicate
2681,09-16,12:27,directly with each other okay so that means that means
2682,09-16,12:34,for example if you are running a web browser okay the web browser is a client
2683,09-16,12:40,it's a client program so here i hope you can i want to firstly clarify my basic
2684,09-16,12:47,client server have usually refers to the machine we usually refer to the machine but
2685,09-16,12:53,that's not accurate because on your machine for example you can think about this on your machine you may run a
2686,09-16,12:59,number of applications you may have web application you may have email you may have video gaming right you have all
2687,09-16,13:05,those applications then in this case if we want to be more
2688,09-16,13:10,accurate then the client means client program
2689,09-16,13:16,okay so for example when we see web server okay then web server is a server now who
2690,09-16,13:23,is the client the client can be a machine if we refer to this generally but more accurately we should see the
2691,09-16,13:31,client is uh the web browser it's the firefox this is the chrome okay so it's
2692,09-16,13:37,like that it's the web browser okay so here when i say the clients cannot
2693,09-16,13:44,communicate directly with each other we mean yoga browser cannot communicate
2694,09-16,13:52,with another web browser we cannot okay they can only communicate
2695,09-16,13:58,with the server that's the client okay of course the clients may be
2696,09-16,14:03,intermittently connected they may be up they may be down okay we do not have any requirements on
2697,09-16,14:10,clients it's totally fine for clients to be off okay
2698,09-16,14:15,the clients may also have dynamic ip addresses it's totally fine for the client to
2699,09-16,14:23,to um to change the ip address okay but we do not
2700,09-16,14:29,usually we do not change the ip address for server because server server is the one to be contacted okay everybody
2701,09-16,14:36,should know the iep address for the server all right so that is the client server
2702,09-16,14:43,model any questions
2703,09-16,14:50,okay so the next architecture is the p2p architecture
2704,09-16,14:56,in p2p art architecture we do not have any servers no servers no always answers
2705,09-16,15:03,okay we only have some n systems
2706,09-16,15:10,okay those end systems are the peers they are exactly the same i mean when i
2707,09-16,15:16,say the same i mean they are treated at the same okay of course they can have different settings
2708,09-16,15:22,then we can have those peers communicate with each other directly
2709,09-16,15:29,okay then the peers the peers usually will need to request a service from other
2710,09-16,15:35,peers okay and also at the same time the peers can provide a service in return to
2711,09-16,15:42,other peers okay so it's like if you think about the
2712,09-16,15:47,uh our class okay if you think about our class then client server model is like
2713,09-16,15:53,i'm the server you are the client i'm serving you okay then p2p model is like you are all
2714,09-16,16:02,learning from each other you do not need any instructors okay you are all learning from each
2715,09-16,16:09,other you are all um help each other so you can request service from each other and you can also
2716,09-16,16:15,provide service to each other okay then you if you think about the
2717,09-16,16:20,scalability that's very interesting okay if you think about scalability actually
2718,09-16,16:26,the p2p network is very self-scalable why because when we have new periods
2719,09-16,16:35,joining the network the new peers of course they will need to get service
2720,09-16,16:42,from others right but at the same time they can also provide service to others
2721,09-16,16:48,that means the new peer actually bring new service capacity
2722,09-16,16:54,okay as well as the new service demands of course
2723,09-16,16:59,so again if you use our class as the example if i'm the server you are the clients
2724,09-16,17:06,then i can only handle this many students okay if i have like 200
2725,09-16,17:11,students of course i cannot handle all of them right it's too big for me to manage
2726,09-16,17:18,then we have a scalability issue but if you are doing p2p network if you are
2727,09-16,17:24,learning from each other then basically you do not need uh you do
2728,09-16,17:29,not need much help from the instructions right so you can you your learning
2729,09-16,17:35,network i would say is a self-scalable okay
2730,09-16,17:41,um so the peers are intermittently connected and they also change the ip addresses so you think about this
2731,09-16,17:48,because there is no always on server the peers can always change the ip address
2732,09-16,17:54,they may get connected or get disconnected then the amendment is actually very complex okay this is a one
2733,09-16,18:03,of the drawbacks for php network compared to the client server model
2734,09-16,18:10,all right so question so far
2735,09-16,18:23,foreign drawbacks with p2p regarding security
2736,09-16,18:32,this is a a very general question regarding security i would i cannot see
2737,09-16,18:39,there are some specific drawbacks that are related to only p2p
2738,09-16,18:45,okay so the the major difference between p2p and client server model is like the
2739,09-16,18:51,management product scalability those kind of things but in regards to security
2740,09-16,18:57,or i would say most of the problems most of the problems are the same are the
2741,09-16,19:04,same for both financial model and the ppp model okay but of course there is one thing you need to pay attention when
2742,09-16,19:10,we talk about security okay for client server model it's very easy to conduct
2743,09-16,19:16,detox attack do you remember what we discussed in last slides uh sorry last chapter regarding ddos attack for ddos
2744,09-16,19:24,attack we said so for example uh there are a number of machines you one who wants to
2745,09-16,19:32,get requests from the host right here the host we mean the
2746,09-16,19:37,server then if this server gets a lot of fake requests from the malicious
2747,09-16,19:45,machines then this server can be easily taken down okay this server cannot
2748,09-16,19:52,provide regular service to the other legitimation machines or the legitimate clients okay so then in this case i
2749,09-16,19:59,would say cancel model is a very vulnerable but for p2p model we do not
2750,09-16,20:04,have that issue okay that's one example but as i said for most of the other
2751,09-16,20:10,aspects i would say they are kind of similar in terms of security for example
2752,09-16,20:15,think about the communication between machines the encryption decryption uh
2753,09-16,20:22,the package significant the eyepiece spoofing all those kind of things they are similar okay but the client server
2754,09-16,20:30,model is sometimes more vulnerable because the server is always there the
2755,09-16,20:36,ip address is not changing okay uh and the attackers can easily scan the
2756,09-16,20:43,network and know which ports are opening then uh
2757,09-16,20:48,and also the server may have some vulnerabilities that can be easily exploited so those are the things you
2758,09-16,20:55,may need to consider of course ddos is another thing you need to consider okay
2759,09-16,21:01,another question is why would anyone go for p2p our server this is a great
2760,09-16,21:07,question why would anyone go for p2p 2p actually as we as we see here p2p
2761,09-16,21:15,have has its own benefits for example scalability scalability is really good
2762,09-16,21:22,for php okay um and if i i'm not sure if you have
2763,09-16,21:27,used some of the tools before for example b torrent okay
2764,09-16,21:33,it's one of the pvp application yes you in b torrent basically sometimes
2765,09-16,21:39,you can download the file very fast okay you don't need to wait for the server to
2766,09-16,21:45,respond because you can get service from so many different other peers okay so
2767,09-16,21:50,that is uh i would say one of the benefits to use big p2p foreign
2768,09-16,21:57,there is another question in the last slide is up here just any device
2769,09-16,22:03,yes okay the appear here is uh just a device any device okay and it can be a a
2770,09-16,22:12,pc it can be like a laptop it can be a tablet or mobile from any device as long
2771,09-16,22:20,as they are connected to the network then they become appear okay and the later we are going to spend
2772,09-16,22:26,more time discussing the php network christian mentioned tolerance p2p right
2773,09-16,22:33,yeah be torrent and torrence p2p is the one great application for p2p
2774,09-16,22:39,all right so those are awkward questions any other questions
2775,09-16,22:50,okay so then we will continue the next thing i want to discuss is
2776,09-16,22:57,actually the process communicating when we say a machine is talking to
2777,09-16,23:03,another machine in your mind in your mind okay
2778,09-16,23:08,foreign probably now you are thinking machine a is talking to machine b
2779,09-16,23:16,okay but as i mentioned before on one machine we may have a number of
2780,09-16,23:24,applications you may have email web video gaming
2781,09-16,23:30,all the other applications okay on b we have the same
2782,09-16,23:36,thing a number of applications
2783,09-16,23:43,okay so you can say if we think about the applications then when you say
2784,09-16,23:49,machine talking to a machine is not accurate right we have to see
2785,09-16,23:54,application talking to application
2786,09-16,24:04,we can see application a1 is talking to application b1
2787,09-16,24:10,okay then we know for application if you have taken the class of 139 probably
2788,09-16,24:17,most of you haven't yet okay but we know in our persistence application is just a
2789,09-16,24:24,piece of code okay this piece of code usually is on the hard drive
2790,09-16,24:31,when you run this piece of code what if the opening system will do is to
2791,09-16,24:37,move this piece of code from the hard drive and put it into the memory and
2792,09-16,24:42,then begin to run this okay then after this is put into the memory we do
2793,09-16,24:49,not call this as application anymore we call it as a process
2794,09-16,24:54,so process is basically a running application or a running program
2795,09-16,25:01,okay so now you can see if we want to see this more accurately
2796,09-16,25:07,machine to machine communication is actually the process to process
2797,09-16,25:13,communication okay process to process communication if
2798,09-16,25:19,these processes are within the same host then we can see oh two processes are
2799,09-16,25:25,communicating using the inter-process communication
2800,09-16,25:32,this inter-process communication is defined by the opening system
2801,09-16,25:37,but if these processes are within different uh they are in different hosts
2802,09-16,25:43,okay then we can see oh they are communicating by exchanging messages
2803,09-16,25:50,okay by exchanging messages that's the difference okay that's why actually
2804,09-16,25:56,that's why usually at the application layer we always say oh a is sending a
2805,09-16,26:01,message to b okay so now if you think about the
2806,09-16,26:06,application and the process okay the process also has client process and
2807,09-16,26:13,server process okay clients process means the process
2808,09-16,26:20,that initiates the communication server process means the process that wish to
2809,09-16,26:26,be contacted it's very easy to understand the incline server model usually the processes on
2810,09-16,26:34,the client on the client machine or the client processes and then
2811,09-16,26:40,processes on the server machine are the server processes because they need to be contacted okay however in p2p model in
2812,09-16,26:49,p2p model is not that obvious the how do we define the client's server
2813,09-16,26:57,process so it's the same definition actually okay in p2p model although we
2814,09-16,27:03,do not have any clients any servers but still we can say the client processes
2815,09-16,27:10,are those processes that initiates communication so if this one process is trying to
2816,09-16,27:17,initiate the communication then this becomes the client process then the other machine that is contacted the
2817,09-16,27:23,other process that is contacted is the server process okay so that's something
2818,09-16,27:29,you need to pay attention all right questions so far about process
2819,09-16,27:40,okay all right the next thing we are going to discuss is a very important context
2820,09-16,27:46,concept in networking the socket this is very important okay so now we can look
2821,09-16,27:53,at computer a and computer b and each computer you can see
2822,09-16,28:01,in terms of networking it has five layers from application layer to transport layer and the network layer
2823,09-16,28:07,the link layer the physical layer so i hope these five layers are like they are deeply painted in your mind
2824,09-16,28:16,okay so so you you you will have that in your mind forever now okay now we let's
2825,09-16,28:22,about talk about the the communication okay so we just learned that we just
2826,09-16,28:28,learned one machine may have a number of
2827,09-16,28:33,patients okay a number of applications then the right new application or the
2828,09-16,28:40,running program is called a process so this process
2829,09-16,28:46,is actually living in the now in the application layer okay the process
2830,09-16,28:53,resides in the application layer so you can see application layer we have those
2831,09-16,28:58,processes okay and as we said if one machine is talking
2832,09-16,29:06,to another machine if this processes of it in different machines i i need different machines then we say
2833,09-16,29:13,this is a kind this is called as a sending and receiving messages right they need to communicate by exchanging
2834,09-16,29:19,the messages so how do we send the message out how do we send the message how do we
2835,09-16,29:26,receive the message so what is happening is actually this process
2836,09-16,29:32,okay this process will need to compose a message
2837,09-16,29:38,like email message uh whatever message okay and then
2838,09-16,29:44,push this message down to the transport layer down to the transporter layer so then
2839,09-16,29:50,the all the layers below will start to work and then deliver this message
2840,09-16,29:58,deliver this message to b okay so then this message will be passed
2841,09-16,30:07,from the physical layer up to the transporter layer and then find them to the application layer this is the entire
2842,09-16,30:13,process in general okay it's like you are using the postal
2843,09-16,30:19,service you prepare a package you drop it to the postal service post office and
2844,09-16,30:25,then they will do the delivery for you okay but there is one very important
2845,09-16,30:31,thing here when you try to send this message out when you push this message
2846,09-16,30:38,to the transporter layer you need to go through some something called socket
2847,09-16,30:45,so this is this yellow box is here
2848,09-16,30:51,okay those yellow boxes here are actually the sockets the socket is like a door is like a door
2849,09-16,30:59,between the application layer and transport a layer so what you do is basically the it's basically plus uh
2850,09-16,31:07,push the message through the door okay to deliver the message to the lower
2851,09-16,31:14,layer to the transporter layer and then the lower layer will do all the work for you
2852,09-16,31:19,similarly when we receive a message okay of course as we said we do not call it a
2853,09-16,31:26,message at the other layers right we may call it a segment or a packet or frame okay it doesn't matter it's still the
2854,09-16,31:33,core is still the same okay so when we receive this thing okay
2855,09-16,31:39,this theme will be delivered from transport layer to the application layer
2856,09-16,31:44,through the socket still you need to go in through the store okay so you think
2857,09-16,31:50,about think about this this store is like when you use the postal service okay it's like your door at your home
2858,09-16,31:56,you prepare the package you push the door you push push the package outside of your door
2859,09-16,32:02,then the usps or ups will come to pick up this
2860,09-16,32:09,package outside of your door and do the delivery okay when they arrive at the
2861,09-16,32:15,recipient's house okay they will do the same thing drop the door drop the
2862,09-16,32:21,package outside of the door and then you can go pick up okay you can pick up your you can get
2863,09-16,32:26,your package through the store is this clear to everybody
2864,09-16,32:37,okay so this is a uh the concept of socket okay
2865,09-16,32:44,your lane usually the this part the process the application layer is
2866,09-16,32:51,controlled by the application developer so that means you can make changes there okay and then the layers below are
2867,09-16,32:58,controlled by the operating systems that means usually you do not touch that part as a developer okay so those are the
2868,09-16,33:07,basic things the uh the other question you you will probably ask is how can we address those
2869,09-16,33:14,processes okay uh when we say a process how do we identify them
2870,09-16,33:22,okay so it's like when you use postal service we know when you send out uh
2871,09-16,33:28,something for example if i'm sending something to my friend michael okay so i
2872,09-16,33:33,will say from sun this is from me okay i'm like a process from sun to michael
2873,09-16,33:40,michael is another process okay then we all have the names
2874,09-16,33:46,the same thing if we want to add address some processes then they all need to have some identifiers
2875,09-16,33:54,okay they all need to have identifiers so you may say oh we know ip address so
2876,09-16,34:00,the machine has ip address but think about this as i mentioned for each computer
2877,09-16,34:07,you may have ip address right but on this computer you have a multiple
2878,09-16,34:15,applications you have multiple processes it's like in my at my home i have
2879,09-16,34:23,several people living in my home right we can use the home address but how can we distinguish
2880,09-16,34:30,different person that's the question it's the same thing you all you have the
2881,09-16,34:35,same iep for a the same ip address for a but how do you identify
2882,09-16,34:41,a1a2a34 those processes right so that's the question that's why
2883,09-16,34:47,using only ip address to identify process is not sufficient
2884,09-16,34:55,the ip address is able to is only able to identify the host the host computers
2885,09-16,35:01,the machines okay then in order to address those processes or to identify
2886,09-16,35:07,those processes we need something more okay so what we will use is actually the
2887,09-16,35:15,port number okay a port number so that means that means if we want to
2888,09-16,35:23,address address a specific process
2889,09-16,35:28,we need two information ip address plus a port number
2890,09-16,35:35,so you may ask the support number itself work again if you look at this
2891,09-16,35:42,uh slide here we may have a1 on computer a right we may also have even on
2892,09-16,35:49,computer b so it's because the port numbers are the
2893,09-16,35:54,same what numbers are all from 1 to 65 something 65
2894,09-16,36:01,000 something of course okay so sorry so those are the port numbers uh each
2895,09-16,36:09,machine has those port numbers so we cannot use only uh the port numbers to
2896,09-16,36:14,to identify a process we have to use both ip address and phone number okay it's like at our home we may have sun
2897,09-16,36:22,and the other um families they may also have somebody names that okay so we need to use both
2898,09-16,36:30,the home address and also the name of the person to identify the specific
2899,09-16,36:35,person i hope this is clear okay
2900,09-16,36:40,so these are some of the example post numbers for http
2901,09-16,36:48,for http the server number okay i mean
2902,09-16,36:53,for the port number for http server pay attention for hdb server is always
2903,09-16,36:58,adding http server the port number is always 80 that means when you contact a server
2904,09-16,37:06,http server a web server okay you are always talking to the 80
2905,09-16,37:15,port number on that machine it's like if you view a web server as a big house it
2906,09-16,37:22,has a 65 more than 65 000 people okay
2907,09-16,37:28,you are only talking to that people named 80. okay but as the client http client can
2908,09-16,37:35,use any phone numbers okay that's something we are going to discuss more later
2909,09-16,37:40,for mail server the port number is always 25 okay always 25. so there is
2910,09-16,37:46,one there's one example here you can see to send hd messages to
2911,09-16,37:53,gaia.cs.ums.edu web server you need to firstly have the ip address and then you
2912,09-16,37:59,need to have the port number okay you need to use both to contact it
2913,09-16,38:05,let me look at the question
2914,09-16,38:14,one question is it is it like apartment numbers at an apartment complex
2915,09-16,38:22,the port being different apartment rooms
2916,09-16,38:27,if you view this depends on how how the analysis is down okay if you view the
2917,09-16,38:35,entire apartment complex as one unit
2918,09-16,38:40,okay as one cost and they all share the same mailing
2919,09-16,38:45,address okay i mean all different apartments are sharing the same menu address
2920,09-16,38:52,then of course yes you can view those different apartment numbers as different
2921,09-16,38:58,both numbers okay yeah other questions
2922,09-16,39:11,another question is does comcast distribute different poll numbers to its
2923,09-16,39:17,users this is a good question the answer is no the port numbers are
2924,09-16,39:24,usually managed by the operating system because port numbers are associated with
2925,09-16,39:30,processes okay processes as i said are applications which are running on one
2926,09-16,39:37,machine so that's why the port numbers are usually assigned by the opening
2927,09-16,39:42,systems not the internet service provider the internet service provider
2928,09-16,39:48,will provides the ip address or the ip address range okay but they do
2929,09-16,39:55,not care about the port numbers another question is how many ports that
2930,09-16,40:01,an ip address have or does that depend on your isp or router
2931,09-16,40:07,good question so usually for each host each computer
2932,09-16,40:13,the port numbers can vary from one two more than 65 it's a 65
2933,09-16,40:23,536 i i believe i i maybe this number is not accurate but it's more than 65 000
2934,09-16,40:30,okay each cost every host have that many phone numbers
2935,09-16,40:36,okay have that many phone numbers then but this doesn't mean all those parts
2936,09-16,40:43,should be open okay those parts are like doors okay i like
2937,09-16,40:49,some some ports are open samples may not be open okay so for example if this is a web
2938,09-16,40:57,server then the web server will only have put 80 open all the other posts may be closed that
2939,09-16,41:04,means only this 80 is receiving messages from others from the clients from other
2940,09-16,41:12,machines then other ports are all closed okay it's possible and for the clients
2941,09-16,41:19,then you may have a number of posts open because if you want to talk to others
2942,09-16,41:25,you need to have a phone number open okay so i would say the answer is
2943,09-16,41:31,um this does not depend on isp or router this is again depends on the open system
2944,09-16,41:37,i hope this answers all your questions any other questions
2945,09-16,41:46,okay great i think you all asked a very very good questions thank you
2946,09-16,41:52,all right so um let's talk a little bit more
2947,09-19,0:05,all right so um let's talk a little bit more then we stop the class okay
2948,09-19,0:12,so uh the next thing we want to discuss is the protocol the protocol basically as i said is like
2949,09-19,0:19,a rule between the machines we want we want the machines to understand each other otherwise how can they communicate
2950,09-19,0:25,okay they need to all follow the same the same rules okay so basically the
2951,09-19,0:31,application layer protocol each layer we have protocol okay here we are talking about only the application layer
2952,09-19,0:38,protocol application layer protocol defines the types or messages exchanged like the
2953,09-19,0:45,request message the response message and also the message syntax so what are
2954,09-19,0:52,the fields in the messages how the fails are deleting delineated okay so those
2955,09-19,0:59,are the things defined in each message and then what are the semantics of the
2956,09-19,1:07,messages okay what are the semantics that means what are the meaning of information in
2957,09-19,1:13,each field okay and also the rules for one and how the processes can send and
2958,09-19,1:22,respond to messages so those are all the things defined and there are more okay
2959,09-19,1:29,so here you can see there are there are some open protocols uh defined in the
2960,09-19,1:35,rfc request for comments documents some of the some of them are like http
2961,09-19,1:42,for web smtp for uh email okay there are also some private protocols like skype
2962,09-19,1:50,okay this is a protocol
2963,09-19,1:55,um so pay attention to what are defined here this may become a test question
2964,09-19,2:02,i may ask you what are defined by the application layer protocol so you should
2965,09-19,2:09,know these are the things that are defined okay next thing we are going to talk about is the services provided by a
2966,09-19,2:17,transport layer uh let me see okay so again if this is a computer's five liter
2967,09-19,2:25,model one two three four five okay and this is
2968,09-19,2:31,a physical layer okay this is uh the link layer definite
2969,09-19,2:38,layer network layer transport layer
2970,09-19,2:45,2005 layers and now okay we know for the application layer
2971,09-19,2:52,it will need to get service from the transport layer it's like
2972,09-19,2:58,if you want to deliver a package you need to get service from usps
2973,09-19,3:04,okay from the post office at usps okay
2974,09-19,3:10,then what kind of service can we get from transport layer or what
2975,09-19,3:16,kind of service do we need right does our application need so first thing
2976,09-19,3:22,we need reliability transfer it's like if you are using usps you don't want to
2977,09-19,3:27,lose your package right same thing in the uh in the application
2978,09-19,3:34,layer the apps need to deliver a message and some applications they require 100
2979,09-19,3:41,reliable data transfer why you think about this if you are sending
2980,09-19,3:47,out an email do you want to miss some letters in your email
2981,09-19,3:53,if you are withdrawing money from a bank or doing transfer
2982,09-19,4:00,do you want to miss any numbers right do you want to miss a zero in in
2983,09-19,4:07,the transferring amount you do not want right so those applications will require 100
2984,09-19,4:14,to reliable this transfer but there are some applications that do
2985,09-19,4:20,not require a 100 reliability transfer they can tolerate some loss
2986,09-19,4:26,so what applications can tolerate loss you think about this
2987,09-19,4:32,if you are listening to an audio okay for example now if you are listening to me
2988,09-19,4:37,when some beats are missed are lost can you still hear me you can still hear
2989,09-19,4:45,me right you can still get you if some meat some bits are missing
2990,09-19,4:52,that's fine your eye your ears can still can still hear what i'm saying right or
2991,09-19,5:00,if you are watching a video do you really care if some pixels are missing
2992,09-19,5:06,you do not really care right when you watch the movie if some pixels are missing you can still see this entire
2993,09-19,5:12,picture perfectly does this make sense so for those applications we can
2994,09-19,5:19,tolerate some loss then those applications do not rely require reliable data transfer at least not 100
2995,09-19,5:26,reliable okay that's one service we are talking about data transfer reliability
2996,09-19,5:34,second service we want to have is the timing okay for example when you send a package
2997,09-19,5:42,to your friend as the as the
2998,09-19,5:47,christmas gift you want to have this package delivered by christmas right you don't want to
2999,09-19,5:54,wait for a year for this application to be it for this package to be delivered
3000,09-19,5:59,so timing is also very important especially in some applications such as
3001,09-19,6:05,uh telephony or games right we require a low delay to be effective
3002,09-19,6:13,in the gaming when you shoot uh avatar you don't want that to die
3003,09-19,6:20,after two hours right the experience would be be really bad so timing is very important
3004,09-19,6:28,the next thing throughput so some applications require minimum
3005,09-19,6:36,amount of throughput to be effective so some of you may be thinking oh what's the difference between throughput and
3006,09-19,6:41,timing it's very different timing means we can wait okay or we cannot wait so
3007,09-19,6:48,this email for example this email will be delivered in one day or in two seconds
3008,09-19,6:55,okay but throughput means we want to guarantee the minimum amount of
3009,09-19,7:01,throughput to be effective for example if you are watching a video you want to guarantee the minimum
3010,09-19,7:09,throughput so at least your experience is not bad right if your your movie is not very
3011,09-19,7:16,smooth that's because of a low throughput then it will affect your experience of using
3012,09-19,7:24,that application okay so that's why some applications require a minimal throughput but some do not okay for
3013,09-19,7:31,example for email we do not require throughput you can you can send this
3014,09-19,7:37,um you can send in one bit in this second but you can send one one megabits in next second it doesn't really matter
3015,09-19,7:43,to me as a lot of the final in my email my email is delivered right
3016,09-19,7:51,security we care about if you can provide encryption or data integrity
3017,09-19,7:57,okay those kind of features pay attention those are the services
3018,09-19,8:04,that we hope we all get we hope we will get right but do we
3019,09-19,8:10,really get those it's like we hope we can get reliable
3020,09-19,8:16,package delivery from usps but do we really get reliable packet delivery from
3021,09-19,8:22,usps i don't know maybe or maybe not right
3022,09-19,8:27,so let's look at the requirements of this common applications okay
3023,09-19,8:35,on the left side in the table on the left side you will see the applications we have file transfer email web
3024,09-19,8:41,real-time radio audio etc etc bins okay
3025,09-19,8:46,and then let's look at for example uh the file
3026,09-19,8:52,transfer for file transfer we cannot afford the data loss that means we
3027,09-19,8:59,should not allow any loss for throughput it's elastic we do not care about the robot okay as long as the
3028,09-19,9:07,file is finally delivered then we are fine is this time something no we don't care
3029,09-19,9:14,okay so that's those are all the requirements for file transfer for
3030,09-19,9:20,emails the same thing for web is the same thing but for video okay let's see for video
3031,09-19,9:30,for video can we tolerate data loss the answer is yes we can tolerate data
3032,09-19,9:38,loss if you lose some bits we don't care do we care about the robot yes vary we
3033,09-19,9:44,want to have a minimal throughput so that we can have a good experience okay is this time sensitive yes okay the data
3034,09-19,9:53,has to be delivered in a very fast way because this is real time audience video
3035,09-19,9:59,excess you can say depending on different applications we require
3036,09-19,10:04,different services from the lower layer okay their requirements are different okay
3037,09-19,10:11,then now let's come to the transport layer okay we just discussed the application
3038,09-19,10:18,layer need this need that they all need this kind of services but at transport layer can we provide
3039,09-19,10:26,those services okay it's like if you you want to have
3040,09-19,10:32,some services from usps but let's look at usps can we provide these services we
3041,09-19,10:39,don't know okay now we are standing here pay attention now we are
3042,09-19,10:45,looking at the transport layer we are not looking at the application layer okay
3043,09-19,10:51,add transpose layer transport layer provided two type of services
3044,09-19,10:57,one is called transmission control protocol service which we know as tcp
3045,09-19,11:04,the other one is the user datagram protocol which is udp
3046,09-19,11:09,so please pay attention to the full name okay i remember uh one year i had a
3047,09-19,11:18,final exam question called uh what is the full name for tcp
3048,09-19,11:24,i thought this is the easiest problem ever but a lot of students didn't get the
3049,09-19,11:32,answer and you know what they provided a very creative answers
3050,09-19,11:37,so some students said the full name for tcp is truly challenging points
3051,09-19,11:45,that's really really creative um so please remember the full name and
3052,09-19,11:52,if you cannot remember that you can write it down on your notes uh for the exams i usually allow you to have uh
3053,09-19,11:59,change it okay so for tcp again let's come back for tcp
3054,09-19,12:06,tcp is one service for this service it provides reliable
3055,09-19,12:12,data transfer okay reliable transport between sunny and receiving process that
3056,09-19,12:17,means if you choose to use tcp then your data will be delivered eventually okay
3057,09-19,12:23,will be guaranteed for delivery it will also provide flow control flow
3058,09-19,12:30,control means the sender won't overwhelm the receiver for example if i am sending
3059,09-19,12:35,something to my friends okay i'm i'm calling him i'm sending him letters
3060,09-19,12:41,every day every hour then he or she will be overwhelmed okay flow control will
3061,09-19,12:47,means i cannot do that okay i will be controlled i cannot all around the receiver
3062,09-19,12:53,so congestion control means throw to the center when network is overloaded this
3063,09-19,12:58,is the same in our flow control but it's very different okay it sounds similar
3064,09-19,13:04,but it's very different so conditional control basically means uh the network is already overloaded it's not about the
3065,09-19,13:11,receiver it's about the network the network is already loaded so we want to
3066,09-19,13:16,stop the sensor from sending uh more packets more quickly
3067,09-19,13:23,okay so it's like if i know the traffic is already very very congested on the road if you are all in the classroom i
3068,09-19,13:30,won't let you out because i know if you go out you will make the condition even worse okay
3069,09-19,13:37,but tcp does not provide service about tiny no minimum throughput guarantee no
3070,09-19,13:45,security um and it will also need to establish a
3071,09-19,13:52,connection before data exchange okay that means before
3072,09-19,13:57,the source and the destination i want to exchange any data they need to firstly agree upon something they need to
3073,09-19,14:04,firstly set up a connection okay that's the transport uh sorry
3074,09-19,14:09,that's the tcp service so for udp service udp provides unreliable data transfer
3075,09-19,14:18,that means there are maybe data loss happening okay it doesn't provide any
3076,09-19,14:24,reliability no flow control no congestion control no timing no throughput guarantee no security no
3077,09-19,14:31,connection setup nothing okay
3078,09-19,14:36,so you might be thinking oh uh udp provide nothing
3079,09-19,14:43,then why bother why is there a udp why do we need it
3080,09-19,14:49,okay so later you will learn udp has a lot of
3081,09-19,14:55,um other one it is over tcp okay for example
3082,09-19,15:01,because no connection setup is needed so it is much simpler okay
3083,09-19,15:08,because um the udp packet is also much smaller
3084,09-19,15:13,much smaller than tcp header the udp header is much smaller than the tcp
3085,09-19,15:18,header it's like when we write a letter okay the tcp header will have a long long uh information on the envelope but
3086,09-19,15:27,tcp has a very few information on that envelope okay this is much simpler and
3087,09-19,15:33,you save a lot of resources for example you have less beats right less b is used
3088,09-19,15:39,for the header so it is smaller the package is smaller
3089,09-19,15:44,uh yeah there are a lot more for example because there is no flow control no
3090,09-19,15:49,congestion control so the udp can um use the resources to the most
3091,09-19,15:57,potential okay to the most potential um so the data can be sent out really
3092,09-19,16:03,fast okay there is no control over uh over the sender okay so a lot of these
3093,09-19,16:10,benefits we will learn gradually later for now don't you don't don't need to remember but uh you you should know okay
3094,09-19,16:17,there is a reason for udp being there okay there is a reason
3095,09-19,16:23,uh so tcp and udp again are these are just two kind of uh services provided by
3096,09-19,16:31,transport layer it's like when you walk to the post office okay post office will say oh we have uh the priority mail okay
3097,09-19,16:39,we have the express here we have this we have that so the if you pay more money
3098,09-19,16:45,then you will get better service right you will have uh we will ensure your package is
3099,09-19,16:52,delivered reliably okay but if you pay less if you use just ordinary letters
3100,09-19,16:58,okay we cannot ensure that so it's like that it's just different services that are provided by transport layer and the
3101,09-19,17:06,application layer has the ability to choose from these two okay application
3102,09-19,17:12,layer when you for example you are developing the app okay you can say oh
3103,09-19,17:18,my application is a web service for example okay then i need to
3104,09-19,17:23,guarantee the reliability to transfer so i need to use tcp
3105,09-19,17:28,okay if you are developing an application for video gaming you don't really care about data loss then you can
3106,09-19,17:34,say oh i i want to choose udp okay so you can choose whatever service you like it's like you when you go to sps you can
3107,09-19,17:41,choose what service you like based on your need okay so let me look at the question
3108,09-19,17:47,remedy said so tcp is more insured i don't know your what what do you mean by
3109,09-19,17:53,insurer do you mean reliability yes yes so tcp is more reliable
3110,09-19,18:02,that means whenever you want to send something out using uh tcp your package will be guaranteed to
3111,09-19,18:12,be delivered but if you use udp the data may get lost okay no guarantee over
3112,09-19,18:17,reliability does that make sense remember
3113,09-19,18:24,okay great and then in this table you can see depending on what application you are
3114,09-19,18:31,using we can choose different protocols at the transport layer okay
3115,09-19,18:39,for now for the application layer protocol you do not need to remember those for example for email we will use
3116,09-19,18:45,smtp and we want to ensure reliability so we have to use tcp so remote terminal
3117,09-19,18:51,access this is for um usually typing some command in terminal right so we also want to ensure
3118,09-19,18:58,reliability so tcp uh web tcp again because we need reliability file
3119,09-19,19:04,transfer we need tcp because reliability streaming multimedia not necessarily
3120,09-19,19:11,okay we can use either tcp or udp okay because we may afford the losing data
3121,09-19,19:17,think about this this is the multimedia the movie the pictures if the audience
3122,09-19,19:23,if you lose some beats it doesn't really affect you watching the movie watching the picture or listening to the audio
3123,09-19,19:30,right so it's fine that's why we can use tcp or udp for internet telephone name
3124,09-19,19:36,we again we can use gcp or udp okay so you can you can say depending on what application you are using we can choose
3125,09-19,19:43,what protocol we will use at the transport layer and then the last thing
3126,09-19,19:49,about this section is the securing tcp and if you look at the
3127,09-19,19:56,um the features of gcp and udp we know both of them do not provide any security
3128,09-19,20:04,okay both of them do not provide any security so then some of you may ask oh
3129,09-19,20:10,uh then what if i want to have some security right i don't want my password
3130,09-19,20:17,to be sent in clear text right um so then what can we do so as i
3131,09-19,20:24,mentioned before if you want to in uh add any security then you have to
3132,09-19,20:29,implement the security in the application layer how can we do that we
3133,09-19,20:35,use something called secure socket layer okay is this another layer on top of the
3134,09-19,20:42,internet protocol stack no this is actually within the application layer
3135,09-19,20:49,okay um although it's also called a layer but it's not really a layer in the internet
3136,09-19,20:54,okay so the ssl can be used to provide the
3137,09-19,21:00,encrypted tcp connection it can provide the data integrity and it can also
3138,09-19,21:06,provide the endpoint authentication so what it does is generally uh it's so for
3139,09-19,21:13,example if you have your password or whatever text okay that is in plain text okay
3140,09-19,21:21,then when it goes through the ssl the sl ssl will add a layer of encryption okay
3141,09-19,21:29,basically uh the application will call some encryption functionality functions
3142,09-19,21:35,okay in the api to encrypt the data and then send the data out okay so it's like
3143,09-19,21:40,that um when i see send it out i mean push it down to the transport layer okay
3144,09-19,21:49,um so ssl is application layer as i mentioned uh applications use the ssl
3145,09-19,21:56,libraries which talk to the tcp okay so basically you firstly call ssl libraries
3146,09-19,22:02,and those libraries will will talk to the tcp or
3147,09-19,22:07,udp okay so sl ssl socket api is able to
3148,09-19,22:13,encrypt the clear test messages or password or whatever
3149,09-19,22:18,um and then send them into the internet okay so any questions
3150,09-19,22:30,all right so starting from 2.2 we are going to discuss uh each application as
3151,09-19,22:36,you can see we will talk about web email dns p2p videos okay uh as i mentioned
3152,09-19,22:43,after we finish 2.2 we are going to talk about 2.7 and then we come back come
3153,09-19,22:49,come back to the email okay all right so let's first think about the
3154,09-19,22:55,uh web application you are using the app web application almost every day right we use web browsers
3155,09-19,23:03,um when you display when you have a web page on your uh web browser so that has
3156,09-19,23:09,firefox okay uh what is displayed what is really displayed okay so basically
3157,09-19,23:17,um a web page consists of objects okay so then what is object
3158,09-19,23:24,sorry my sign is screaming um so the object is uh is a html or jpeg
3159,09-19,23:34,or java application applet or audio file okay so it can be a lot of things okay
3160,09-19,23:41,so basically when your web browser load a web page it's not really loading one
3161,09-19,23:47,whole thing okay it's loading a number of objects including the html file
3162,09-19,23:54,itself and which and also the the images the audience the videos which are
3163,09-19,24:00,inserted into this html file okay that's why sometimes uh for example your
3164,09-19,24:07,internet is not very very uh very good when your bandwidth is very low for
3165,09-19,24:13,example okay the web browser may be able to load the
3166,09-19,24:18,html file because it's usually a small files just the text right
3167,09-19,24:24,um but it may not be able to load the images or the videos okay then that's
3168,09-19,24:29,why sometimes you can see the the web page is not displayed correctly okay
3169,09-19,24:35,um the web page consists of base html file which includes several
3170,09-19,24:41,reference objects okay each object is addressable by a url
3171,09-19,24:48,uh i think probably you've already had some experience uh before with html
3172,09-19,24:53,right i'm not sure if our our computer science courses cover that part uh but
3173,09-19,25:01,you all know that when you write the html file if you want to insert something for example if you want to
3174,09-19,25:07,insert a pdf or image you need to refer to that object okay and then that object
3175,09-19,25:15,will be included into that web page okay
3176,09-19,25:21,and then when you want to and we want to um
3177,09-19,25:26,um let's see um display uh web page sorry uh email sorry what
3178,09-19,25:35,i'm saying when you want to display an image okay or a pdf okay then you can
3179,09-19,25:41,use a url to uh refer to that object okay for example here you can see if we
3180,09-19,25:47,want to display a j file okay so you can just say uh
3181,09-19,25:54,homeschool.edu some department slash pic.gif okay so usually what what is all
3182,09-19,26:02,so this is organized in some way okay firstly on this web server this is the hostname this is the server okay on this
3183,09-19,26:09,hostname there is actually a folder called some department okay and under this folder
3184,09-19,26:17,you will say pic.gif that's how you are able to uh get to that picture
3185,09-19,26:23,okay and uh if you have the experience building your own website you you can
3186,09-19,26:29,you can try this okay for example for my website i'm able to do
3187,09-19,26:36,athena.ecs.csus.edu and then slash something one folder slash another sub photo slash another sub folder and
3188,09-19,26:41,finally reach a pdf file or my picture okay so i select that
3189,09-19,26:50,and then okay and then when we want to
3190,09-19,26:55,um request for web page okay your web browser is actually
3191,09-19,27:02,communicating with the web server and requesting for that web page okay so
3192,09-19,27:09,it's like uh you are making http request to that server and the server response
3193,09-19,27:14,response with the atm file and all the referred objects okay similarly for your
3194,09-19,27:22,phone it's the same thing okay so what is used in this process is called http
3195,09-19,27:29,http is a protocol so what is the protocol we mentioned it's just
3196,09-19,27:35,um like rules right it's like how can they understand each other we follow
3197,09-19,27:40,protocol then the uh the the both machines can understand each other okay
3198,09-19,27:49,so um http the full name is hypertext transfer protocol this protocol is used
3199,09-19,27:57,for web application only okay sometimes of course email sometimes
3200,09-19,28:03,we also use http but you know the base is still the web application okay
3201,09-19,28:09,and uh for for http we usually use it in
3202,09-19,28:14,a client server model okay the client again do still remember what we said last time when we see in a client we
3203,09-19,28:22,usually mean uh a client program right or client process when we see the server
3204,09-19,28:29,it usually means a server program on server process okay it's not just the
3205,09-19,28:36,machine okay so here the client is the browser
3206,09-19,28:41,to say is the browser which is a client program the browser that request
3207,09-19,28:47,receives and displays the web objects okay then the server basically is the
3208,09-19,28:54,web server okay that sends web server program also okay sends the objects in
3209,09-19,29:01,response to the request okay and the client and server they are using http to
3210,09-19,29:06,talk to each other all right any questions so far
3211,09-19,29:12,okay all right so that's the application layer when we come down
3212,09-19,29:19,to this application layer we know we are using http protocol okay
3213,09-19,29:27,but as we mentioned at transport layer we need to choose one protocol
3214,09-19,29:35,so here can you tell me which protocol do we use tcp or udp can
3215,09-19,29:42,you guess you can type your answer in the chat foreign
3216,09-19,29:50,tcp okay
3217,09-19,29:56,matthew said tcp anthony said ttp okay michael said we need a response great
3218,09-19,30:03,voice is also mentioned tcp excellent view are all correct so some of you may say oh you have the answer on
3219,09-19,30:09,the slide yes but still i want you to think about this why do we use tcp
3220,09-19,30:15,because we want to guarantee reliability right when you request for a web page
3221,09-19,30:22,you want your request to be delivered correctly and you also want that web
3222,09-19,30:27,page to be delivered correctly that's why we want to ensure reliability at transport layer that's why we want to
3223,09-19,30:34,use tcp okay so generally what will happen is the client side will initiate
3224,09-19,30:39,the tcp connection okay so it will create a socket
3225,09-19,30:44,um this and then talk to the server okay and the server is listening to port 80.
3226,09-19,30:51,do you remember this port it's a very very famous port 80 is for web
3227,09-19,30:57,application okay again it's client is the client initiating this connection say hey can i
3228,09-19,31:04,talk to you okay then the server is listening to 80 when it's it constantly
3229,09-19,31:09,checks port 80 okay port 80 is associated with a socket with the
3230,09-19,31:16,servers socket okay and then the server accepts this tcp
3231,09-19,31:21,connection from the client and say oh yes sure let's talk okay after that then
3232,09-19,31:28,um the the uh client will send in that http messages okay so uh request message
3233,09-19,31:36,and then the server will respond with http response message okay so then the
3234,09-19,31:42,18 messages are exchanged between the browser and the server uh using http
3235,09-19,31:48,http protocol okay finally after they are done they are all very happy and
3236,09-19,31:54,then the tcp connection is closed so this is the entire process and pay attention tc http is stateless
3237,09-19,32:02,what does this mean this means the server side maintains no information
3238,09-19,32:09,about past client requests it doesn't remember anything the server doesn't
3239,09-19,32:15,remember the past requests okay so some of you may say that's not correct that's
3240,09-19,32:22,not true uh for example when i use a web browser
3241,09-19,32:27,to buy something okay i added this thing into the cart and i've got to make the pressures right
3242,09-19,32:36,i may uh decide to come back after a month
3243,09-19,32:41,okay or at least after weeks a week okay and then i want to purchase that thing
3244,09-19,32:48,again and i notice that thing is still in my cart because i added that into my
3245,09-19,32:54,card okay does this mean the server already remembered the information about past
3246,09-19,33:01,client request this means yes yes the server remembers
3247,09-19,33:07,but that's not because of http okay that's because of something else we are
3248,09-19,33:13,going to discuss it later okay for now keep in mind http is stateless it
3249,09-19,33:18,doesn't maintain any information about past client requests okay
3250,09-19,33:25,uh the reason why we don't use a protocol that maintains that is because
3251,09-19,33:31,usually those protocols are very complex okay you you can you think about this
3252,09-19,33:36,you need to remember all the past history okay if the server or client
3253,09-19,33:42,crashes their views of state may be inconsistent okay so that's the main thing that's why we want the protocol to
3254,09-19,33:49,be as simple as possible okay so uh any questions so far
3255,09-19,34:00,okay all right so now let's talk about the two types of http one type is called
3256,09-19,34:06,non-persistent either type is persistent so what are their difference
3257,09-19,34:13,um for non-persistent http each time when we establish a tcp
3258,09-19,34:21,connection we can send at most one object
3259,09-19,34:26,okay and then we have to close the connection that means if this web page has multiple
3260,09-19,34:34,objects let's see 10 objects okay then each time
3261,09-21,0:03,if the server or client crashes their views of state may be inconsistent okay
3262,09-21,0:09,so that's the main thing that's why we want the protocol to be as simple as possible okay
3263,09-21,0:16,so uh any questions so far
3264,09-21,0:23,okay all right so now let's talk about the two types of http one type is called
3265,09-21,0:30,non-persistent either type is persistent so what are their difference
3266,09-21,0:36,um for non-persistent http each time when we establish a tcp
3267,09-21,0:44,connection we can send at most one object
3268,09-21,0:50,okay and then we have to close the connection that means if this web page has multiple
3269,09-21,0:57,objects let's say 10 objects okay then each time we can only get one
3270,09-21,1:07,object and we have to make 10 connections in order to get that 10
3271,09-21,1:13,objects okay it's like when you call your mom
3272,09-21,1:18,say uh you want to request something for lunch okay uh you say every time you
3273,09-21,1:26,make a phone call you can only request for one object the first time you call
3274,09-21,1:31,your mom and say mom can i have an egg okay then you
3275,09-21,1:37,uh you you you you you you should drop the phone call okay and then the second time you make a phone call again and say
3276,09-21,1:44,mom can i have a box of milk okay then the phone call is over and then third time we want to request to
3277,09-21,1:51,for example then you will see mom you may make a phone call again say mom can i have an apple
3278,09-21,1:56,okay so for our every object you have to make a connection okay
3279,09-21,2:02,persistent http is different in personal http multiple objects can be
3280,09-21,2:09,sent over a single tcp connection between client and server okay
3281,09-21,2:15,so that means if you have a web page that contains multiple objects okay you
3282,09-21,2:23,don't you do not need to make multiple connections you only need to make one connection and then you will get a
3283,09-21,2:30,multiple objects for example it's like you call your mom and say mom can i have a neck uh and box a box of milk and an
3284,09-21,2:39,apple so you request for them together and then your mom will deliver all those things together to you okay so it's like
3285,09-21,2:45,that uh let's look at an example of the non-processing hcp question so far
3286,09-21,2:57,okay so now let's say this user is requesting
3287,09-21,3:03,for this web page okay this is the url and this web page
3288,09-21,3:10,you can see this home.index is the base
3289,09-21,3:18,html file okay this file
3290,09-21,3:23,contains or refers to 10 jpeg images okay can it contains not only the test
3291,09-21,3:30,but also refers to 10 jpeg images so as you can imagine now we have actually in
3292,09-21,3:37,total we have 11 objects the index file itself and 10 other images okay so then at the very
3293,09-21,3:46,beginning the http client initiates the tcp connection to the http server
3294,09-21,3:52,at some school.edu on port 80.
3295,09-21,3:58,paying attention uh here the client has to initiate the
3296,09-21,4:05,tcp connection first okay then the server add host some school.edu
3297,09-21,4:13,is waiting for the tcp connection at port 80. so the server is constantly checking port 80 and see if there is
3298,09-21,4:20,incoming request now we have i'm inc incoming requests then the server will
3299,09-21,4:25,accept the connection and notify the client to say yes let's connect okay
3300,09-21,4:30,then the clientele will say oh okay uh the connection is established so the
3301,09-21,4:36,client can now send the http request message to say hey i want to get this
3302,09-21,4:41,home.index web page okay so this request is pushed into the
3303,09-21,4:49,socket do you remember the socket the socket is like a door between the
3304,09-21,4:54,application layer and the transporter layer right so um so then this required message is
3305,09-21,5:01,pushed into the transport layer okay then further the transporter layer and the layers below will take care of this
3306,09-21,5:08,request message right so the message indicates that client the
3307,09-21,5:14,client wants object some department slash home.index okay now the server
3308,09-21,5:20,receives the request message and then the server say oh okay i need to prepare for uh for the response okay
3309,09-21,5:29,so then the several forms a response message containing the requested object
3310,09-21,5:34,which is the index file and sends a message into the socket
3311,09-21,5:40,again the server side it needs to push push the message into
3312,09-21,5:46,the socket you remember this is application layer transport
3313,09-21,5:52,layer okay between application layer there is something called socket
3314,09-21,5:59,right add to the client sign at the book and the server side they both have a socket right so then the server push
3315,09-21,6:06,this response message through the socket and then this message is sent to the
3316,09-21,6:12,client okay after that the http server say oh okay i'm done with my job so it
3317,09-21,6:19,will close the tcp connection pay attention so far we only sent out
3318,09-21,6:26,one object which is the index
3319,09-21,6:31,um the index file the home.index file okay
3320,09-21,6:37,uh and the index file still refers to 10 more jpeg objects we haven't sent those
3321,09-21,6:45,jpeg objects yet okay so now the http client received the response message
3322,09-21,6:51,containing the atmf file it will displace the html and then it will also
3323,09-21,6:57,pass the html and find okay in addition to this html file it also refers to 10
3324,09-21,7:06,jpeg objects okay then with this information
3325,09-21,7:12,what the client will do is go back to step one repeat each step from one to five
3326,09-21,7:21,in order to get the 10 jpeg objects okay
3327,09-21,7:27,so um now let's look at the response time
3328,09-21,7:32,okay let's look at the response time firstly let's define
3329,09-21,7:38,this rtt do you still remember rtt i think i mentioned this before round
3330,09-21,7:44,trip time okay your level will discuss
3331,09-21,7:50,response time we mean the the round trip time okay round trip time means the time
3332,09-21,7:57,for a small package to travel from client to server and then back so you're
3333,09-21,8:04,at the back it's not the package coming back it's the response coming back okay how about the response time
3334,09-21,8:11,which means if we want to get all those objects the one etm file and the 10
3335,09-21,8:18,reference the jpeg files if we get this full web page downloaded
3336,09-21,8:25,then how much time how much time do we need
3337,09-21,8:31,okay so before we end we we go go further to discuss that let's first
3338,09-21,8:38,discuss one definition that is called rtt a
3339,09-21,8:49,okay this is the time for small package to travel from client to server and then
3340,09-21,8:56,back this is a like one rtg it's like when you write a letter to your friend
3341,09-21,9:02,in new york and then your your friend is replying you a letter okay then finally
3342,09-21,9:08,you receive the reply letter this is a round trip time okay
3343,09-21,9:15,so as you can see as you can see in one h in the non-person http okay we need to
3344,09-21,9:22,we firstly need one rtt to initiate the tcp connection so the first one this one
3345,09-21,9:29,is for making the connection it's like for you make a phone call with your mouth okay so can i talk with you the
3346,09-21,9:37,server say yes sure let's talk this is one rtt okay after that
3347,09-21,9:43,after that we need another rtk to make the request for the web page right for
3348,09-21,9:49,the html file so then the server will see the client will see
3349,09-21,9:57,hey can i get this index file the server will say sure you can
3350,09-21,10:05,this is another rtt right one rtt after that the server will in of course in
3351,09-21,10:13,that um in that response message several will also sent out the data for the atm file
3352,09-21,10:21,right you you may imagine this is a this is a file it takes time to transmit
3353,09-21,10:27,okay so then we can see we need a little bit time here to
3354,09-21,10:33,transmit this object okay to transmit this object then in total how much height we need
3355,09-21,10:41,for sending one object if you look at that okay in total we are we need
3356,09-21,10:49,2 rtt plus the file transmission time
3357,09-21,10:54,pay attention this is just for the html file okay
3358,09-21,11:00,but we still have 10 objects to images right to 10 jpeg images to transfer okay
3359,09-21,11:08,and pay attention for non-person http we need
3360,09-21,11:16,this much time for each object because every time we need to make a new code we
3361,09-21,11:22,need to make a new connection okay so that means for image one you
3362,09-21,11:27,need two rtt plus file transmission time for email two you need
3363,09-21,11:32,one or two rtt plus file transmission type so then if you have n objects in total
3364,09-21,11:42,foreign objects are the same size but usually
3365,09-21,11:50,they are not the same size okay let's assume they are the same size
3366,09-21,11:59,okay then the total time
3367,09-21,12:06,total time needed equals to
3368,09-21,12:19,okay equals to n times 2 rtt plus the
3369,09-21,12:25,file transmission time okay or you can see if they are not the
3370,09-21,12:30,same size you can say 2 and rtt plus the file transmission time for all the
3371,09-21,12:37,objects that's also fine okay any questions here
3372,09-21,12:49,no questions okay the hot rod persistent http
3373,09-21,12:55,for percent http we know the server the server we'll leave the connection open
3374,09-21,13:03,after sending the response okay that means that after the server sending the html file it will not close the
3375,09-21,13:11,connection okay here for the client still want to get more objects the client can make
3376,09-21,13:17,requests again okay the client can make a request again
3377,09-21,13:22,so that in this case in this case if we think about the transmission time the
3378,09-21,13:29,total time needed okay so then foreign
3379,09-21,13:42,ty
3380,09-21,13:48,how many are how many connections do we need to make for all the objects
3381,09-21,13:55,think about this how many connections do we need to make for all the objects
3382,09-21,14:02,we need only one right we need only one connection
3383,09-21,14:11,equal one rtt for making connections plus after that you can transmit
3384,09-21,14:19,multiple files right you can request and uh the client can request for multiple
3385,09-21,14:27,objects and for each object again we need one rtt plus the file transmission
3386,09-21,14:32,type right so now if we consider we have n objects the total time equals to rtt
3387,09-21,14:40,rtt means for connection
3388,09-21,14:48,so this rtt first rtt is for making tcp connection
3389,09-21,15:09,the the second part is the rtt plus ftt this is the time needed
3390,09-21,15:16,for the client to make a request to the server and also for the server to
3391,09-21,15:22,respond and transmitted object okay if we have n objects then of course we need
3392,09-21,15:29,n times uh rtt plus ftt okay so this is the total time for
3393,09-21,15:35,persistent http so if you think about it if you compare this with the non-presidentiality we
3394,09-21,15:43,basically save time for the tcp connection
3395,09-21,15:49,okay so here you can see
3396,09-21,15:54,every time we need to rtt but for percent http we only need one
3397,09-21,16:00,rtt as a verb again okay it's like for nine percent gdp
3398,09-21,16:06,every time you need to call your mom okay uh when you need a new object so
3399,09-21,16:11,then you need the time to make the phone call that is the extra compared to persistently cp as i said we made an
3400,09-21,16:19,assumption that is these objects are the same size then you can do you can use this function okay
3401,09-21,16:25,but if these objects are not the same size then the f t t will be different
3402,09-21,16:31,for each object so one object may take an hour another object may use only five
3403,09-21,16:36,seconds okay then in that case you cannot do a simple like and times something okay
3404,09-21,16:43,then you will use uh you can see all the file transmission type for all the
3405,09-21,16:49,objects okay uh then you do not do this kind of multiplication
3406,09-21,16:54,uh oh one more thing i want to mention is that for none percentage gdp okay
3407,09-21,17:01,usually the browser the browser can make parallel tcp connections to fetch the
3408,09-21,17:10,reference objects okay so if it has 10 objects it can open 10 tcp connections
3409,09-21,17:16,it's like you can open 10 uh tabs in the browser to request for for the object
3410,09-21,17:24,okay the next thing i'm going to discuss is about the request and the response
3411,09-21,17:31,message format okay so we talk about the request message then how do we really make a request okay
3412,09-21,17:40,um basically for the request message you can see uh the left part this part is a
3413,09-21,17:47,is the is a one request message example okay so for the request message it is written
3414,09-21,17:54,in oscar it is human readable okay then there is
3415,09-21,17:59,one line called request line this request request line is usually composed
3416,09-21,18:05,of some commands let's get post or hat we will discuss
3417,09-21,18:10,the other commands later okay but the first one i need to know is the get this is one command okay then after the test
3418,09-21,18:18,you want to tell what things you want to get you tell the server
3419,09-21,18:25,i want to get this index.etml object
3420,09-21,18:30,okay if you want to get something else you can also specify it here so this is
3421,09-21,18:36,a get and after that after that you need to specify your foreign here in this
3422,09-21,18:43,example it is http 1.1 after that you need to add a calorie
3423,09-21,18:49,return and align fader slash on slash n to indicate this is the end of the get
3424,09-21,18:56,line of the request line okay after that after the request line
3425,09-21,19:01,we have a number of header lines okay those header lines includes including
3426,09-21,19:09,information about this request okay so for example
3427,09-21,19:16,this host is about the server so which what is the server you are making
3428,09-21,19:23,requests from okay and you are making requests too so is this the this is then this is usually
3429,09-21,19:31,the web server where you you put the hostname okay then the user agent
3430,09-21,19:36,is what kind of client client program you are using for example this is this client is used in firefox okay
3431,09-21,19:44,so then those ones those accept things are talking about
3432,09-21,19:51,the uh language the encoding method etc so those those information okay
3433,09-21,19:59,foreign means this is a persistent http
3434,09-21,20:07,okay which means this connection will keep alive for 115 seconds probably okay
3435,09-21,20:15,i don't know the units but most likely seconds okay and then
3436,09-21,20:21,connection this is seeing again this is a persistent http okay after that we add
3437,09-21,20:28,a line region category term to indicate this is the end of the header lines so
3438,09-21,20:34,this is the format of the request message i have given you the one shot lab
3439,09-21,20:41,the worship lab includes um
3440,09-21,20:47,uh it includes uh some basic operations okay and you will need to look into
3441,09-21,20:56,those packets so one of the message you will look into is the http request
3442,09-21,21:01,message and you you are going to see exactly the same thing as you see here okay
3443,09-21,21:07,um exactly the same thing i don't mean the information inside i mean this format is
3444,09-21,21:13,exactly the same okay and if you look at this uh general
3445,09-21,21:19,format again so how do we represent this because when we send this request
3446,09-21,21:25,message this request message is basically a bunch of zeros and ones right then how do we represent that in
3447,09-21,21:31,reality so we first method here
3448,09-21,21:39,we put a get or some other commands here okay and then this is the url
3449,09-21,21:45,what else can be foreign
3450,09-21,22:01,png okay that's also fine and the word number
3451,09-21,22:09,can be http 1.1 or 1.0 so basically you can see i'm i'm mapping that to here
3452,09-21,22:17,okay after that you can see you have cut return and line fader slash r selection okay and after that
3453,09-21,22:25,the second row the second row is you have the header field name the header
3454,09-21,22:30,can be host it can be uh accept etc okay then you have the header for
3455,09-21,22:37,each header you have the value for each field you have the value and then you have category trendline fader okay
3456,09-21,22:43,finally after all these are done you have another card return and line
3457,09-21,22:49,failure to indicate this is the end of the http request message okay and then you have the entity body
3458,09-21,22:58,okay the antenna body uh sometimes or some data okay that you need to upload
3459,09-21,23:04,to the server okay sometimes it's empty sometimes it may not be empty
3460,09-21,23:11,and
3461,09-21,23:16,okay so i mentioned get is one method there are
3462,09-21,23:25,also other methods like post url okay
3463,09-21,23:30,and hats and more okay let's first look at the post method what is post
3464,09-21,23:35,so the web page often often includes some form input so this this input uh
3465,09-21,23:42,will need to be filled by the client okay so the client will need to upload
3466,09-21,23:48,this input to the server usually this is done in the entity body so in this case we can use the post
3467,09-21,23:57,method okay or we can also use the url method the
3468,09-21,24:03,url methods is actually still is is although it's called uil method but
3469,09-21,24:09,still it's using the get in the master field so here i mean the method here is
3470,09-21,24:15,still using get the difference is okay the difference is
3471,09-21,24:21,if we are using like a regular get okay if you're using a regular get
3472,09-21,24:27,method for example if you want if you're doing a google search you want you want to search for monkey and another okay
3473,09-21,24:35,then usually what you have to you have to do is you upload your monkey and
3474,09-21,24:41,bananas keyword in the entity body okay in the entity body
3475,09-21,24:48,that is you when you are using a regular get method okay but if you want to use
3476,09-21,24:55,url method now what you will do is you can still use get okay
3477,09-21,25:00,you still use get but you will upload the keywords directly
3478,09-21,25:06,in the url okay so for example here you can see
3479,09-21,25:12,this is the url you will put in the uh in the uil field so you can see the
3480,09-21,25:19,keywords monkey and the banana is actually already included in the url
3481,09-21,25:25,itself so in this case you don't need to upload it into the entity body field
3482,09-21,25:31,okay there is one question is this http
3483,09-21,25:36,request being sent during the first rtt or the second rtt that's this is a good
3484,09-21,25:42,question so let's quickly review this again
3485,09-21,25:49,the first rtt is for making tcp connection connection is for making the
3486,09-21,25:55,phone call like phone call to your mom right so it's just saying hey can i connect with you the server say yes sure
3487,09-21,26:02,let's connect that's that's the only thing they do in this rtt they do not
3488,09-21,26:07,make any requests for objects okay so that in the second rtt after the
3489,09-21,26:13,connection is is a is made is established then in a second rtt the
3490,09-21,26:18,client will say hey can i get a web page it is making a http request in the
3491,09-21,26:25,second rtt okay so in this case i will say most of the
3492,09-21,26:31,time most of the time we are making atp quests in the second rtp
3493,09-21,26:38,that this answer a question
3494,09-21,26:44,okay good that's a good question
3495,09-21,26:50,um we just mentioned the post method the url method okay these methods are for
3496,09-21,26:56,uploading uploading the form input okay you can use posts or you can use the url
3497,09-21,27:03,and there are some other methods in both http 1.0 and 180 1.1
3498,09-21,27:10,so for example for 1.0 we have get method post method and also
3499,09-21,27:16,had method so this is where this method is very
3500,09-21,27:23,interesting this one is asking the server to leave
3501,09-21,27:28,the requested object out of response okay that means for example
3502,09-21,27:36,um you are you you are the client is making a request of our
3503,09-21,27:42,image okay the image may be huge maybe big right and then several very response
3504,09-21,27:47,usually irregular get methods the server will respond with a
3505,09-21,27:53,the object right and say hey this is the image here it is i'll send it to you so
3506,09-21,27:59,then this image is transmitted to the client
3507,09-21,28:05,okay of course it will take a very long time if especially if this is a large
3508,09-21,28:11,object but we've had a method it is still asking the server about this
3509,09-21,28:18,object and the server will still respond but the server will respond with all the
3510,09-21,28:25,other information except the object the object is not included in
3511,09-21,28:30,the response that means all the information are sent back but the image itself is not sent back
3512,09-21,28:37,so then you may ask why do we use that why do we use a hat
3513,09-21,28:43,okay most of the time most of the time this has is usually for like for example for testing debugging uh to to say if
3514,09-21,28:51,this object is is available on the server okay but the object is not it
3515,09-21,28:57,does not need to be really sent back to the client okay that is the purpose for
3516,09-21,29:02,help and then for atp 1.1 we have uh two more
3517,09-21,29:10,uh so one is put put is to upload the files in entity body to the path
3518,09-21,29:16,specified in the url field this is also for uploading information another method
3519,09-21,29:22,is delete delete is a delay to the file specified in the uil field okay so those
3520,09-21,29:27,are the methods used in um http 1.1 and 1.0 any questions
3521,09-21,29:40,okay um so for the response message as you
3522,09-21,29:45,can see for the response message uh one line the first line is this the stance line
3523,09-21,29:52,first line stateline so it will indicate that version of http and with a status
3524,09-21,29:58,quo [music] so this 200 is the status code
3525,09-21,30:05,it means okay it means everything is fine the the
3526,09-21,30:11,image the or the object you are requesting is available okay and i'm
3527,09-21,30:17,going to send it to you that basically it's many okay so then you can see later after this status line you can see a
3528,09-21,30:25,number of header lines so in the headlines again we have some information like a date
3529,09-21,30:32,date is the response date and time okay server what is the server apache
3530,09-21,30:39,server in this case last modified this is very important foreign
3531,09-21,30:46,date and time for the object this means this object was last modified
3532,09-21,30:54,in 2007. okay and this is very important
3533,09-21,30:59,information later i'll tell you why okay for now you don't need to know after that now you can see e-tag accept ranges
3534,09-21,31:07,content length etc and then you can see keep alive again this indicates this is
3535,09-21,31:12,a http processing http time out equal to 10 max equal to 100 so
3536,09-21,31:20,your latest means okay after i'm done with this object i'll wait for 10 more
3537,09-21,31:26,seconds okay i'll keep this uh uh connection open for 10 more seconds
3538,09-21,31:32,and within this 10 more seconds you can if you if i receive more requests i will
3539,09-21,31:37,respond if i do not receive more requests then i will end this session
3540,09-21,31:43,and this this will time out okay but i want to be alarmed forever
3541,09-21,31:50,okay so this connection can only be open for 100 seconds for example okay that
3542,09-21,31:57,means no matter if you have more requests i don't care after 100 seconds i will
3543,09-21,32:03,close this connection okay this is also for protection uh for protecting the
3544,09-21,32:08,server because we don't want the server to be occupied by a client forever okay because we know if we make
3545,09-21,32:17,this open to the client forever then we can easily the server can easily suffer
3546,09-21,32:22,from the detox attack etc okay and then again connection is means this is a
3547,09-21,32:30,non-president http okay so content type and then all the data
3548,09-21,32:36,will be sent after that so the data here means uh those uh
3549,09-21,32:42,requested html files or images etc so they are included here
3550,09-21,32:48,so these are some of the other status codes okay we just mentioned to handle
3551,09-21,32:54,okay and you can also have three one four four four four four uh for for 400 bad
3552,09-21,33:01,requests and also four for four points a very common one you see it's a lot of times and you can also have 505 okay so
3553,09-21,33:10,these are the sample codes for the http response you can actually try telnet try
3554,09-21,33:17,http on your first self uh so basically what you do is you just
3555,09-21,33:24,um try to tell that to the web server okay tell net to one web server uh
3556,09-21,33:31,basically uh it's like you are talking to that web server directly okay not go
3557,09-21,33:37,not through the web browser but through the uh terminal okay through the
3558,09-21,33:43,terminal you directly talk to that machine for example you can open a tcp connection to port 80 at
3559,09-21,33:51,cis.poly.edu of course you can do csus.edu okay you can connect to port 80
3560,09-21,33:58,to csus.edu or even other servers okay just try your favorite web servers and
3561,09-21,34:05,then you can type in a get message a get message to requests for a
3562,09-21,34:12,um for uh object okay it can be a web page it can be an image or pdf whatever
3563,09-21,34:18,you like okay then you can look at the response message uh sent by the atp server okay so i did
3564,09-21,34:27,some tests for you okay so you can see here
3565,09-21,34:32,here what i'm trying to do is i'm trying to connect i'm using telnet trying to
3566,09-21,34:39,connect to cs.umass gaia.cs.umass.edu
3567,09-21,34:46,okay at port 80. 480 is the phone number for web service
3568,09-21,34:53,we have mentioned this from many times right basically at the server side pay
3569,09-21,34:59,attention at the server side the server is opening this support 80.
3570,09-21,35:04,it's like a door it's opening this door and then the server will constantly check this port and see if there there
3571,09-21,35:12,are any incoming requests okay the client side does not need to use 80
3572,09-21,35:19,because 80 is a forward server okay client-side also need to have a door
3573,09-21,35:24,open in order to communicate with
3574,09-23,0:00,really trying
3575,09-23,0:01,talented try http on your first self so
3576,09-23,0:06,basically what you do is you just
3577,09-23,0:09,try to tell next to the web server okay
3578,09-23,0:13,tell net to one web server basically
3579,09-23,0:17,it's like you are talking to that web
3580,09-23,0:19,server directly okay not go not through
3581,09-23,0:23,the web browser but through the terminal
3582,09-23,0:27,okay through the terminal you directly
3583,09-23,0:29,talk to that machine for example you can
3584,09-23,0:32,open a tcp connection to port 80 at
3585,09-23,0:36,cis.poly.edu of course you can do
3586,09-23,0:40,csus.edu okay you can connect to port 80
3587,09-23,0:43,to csus.edu or even other servers okay
3588,09-23,0:47,just try your favorite web servers and
3589,09-23,0:50,then you can type in a get message
3590,09-23,0:53,a get message to request for a
3591,09-23,0:57,um for object okay it can be a web page
3592,09-23,1:01,it can be an image or pdf whatever you
3593,09-23,1:04,like okay then you can look at the
3594,09-23,1:06,response message
3595,09-23,1:08,sent by the atp server okay so i did
3596,09-23,1:12,some tests for you okay so you can see
3597,09-23,1:16,here
3598,09-23,1:17,here what i'm trying to do is i'm trying
3599,09-23,1:20,to connect i'm using telnet trying to
3600,09-23,1:24,connect to
3601,09-23,1:26,cs.umass gaia.cs.ums.edu
3602,09-23,1:31,okay at port 80.
3603,09-23,1:34,480 is the phone number for web service
3604,09-23,1:38,we have mentioned this from many times
3605,09-23,1:40,right basically at the server side pay
3606,09-23,1:44,attention at the server side
3607,09-23,1:46,the server is opening this support 80.
3608,09-23,1:49,it's like a door it's opening this door
3609,09-23,1:51,and then the server will constantly
3610,09-23,1:54,check this port and see if there there
3611,09-23,1:57,are any incoming requests okay the
3612,09-23,2:01,client side does not need to use 80
3613,09-23,2:04,because 80 is a full web server okay
3614,09-23,2:06,client-side also need to have a door
3615,09-23,2:09,open in order to communicate with others
3616,09-23,2:11,so then that small door can be any
3617,09-23,2:15,um can be any other random port numbers
3618,09-23,2:18,it doesn't need to be 80. okay that's
3619,09-23,2:20,something you need to pay attention and
3620,09-23,2:22,after i type in this command
3621,09-23,2:25,you can see it is trying to connect to
3622,09-23,2:28,this
3623,09-23,2:32,connect to this server okay these are
3624,09-23,2:34,all the responses after that okay after
3625,09-23,2:37,that after this connection is
3626,09-23,2:39,established okay what i what i'm doing
3627,09-23,2:42,is i'll send a get message
3628,09-23,2:46,i want to get this
3629,09-23,2:50,object this is one object
3630,09-23,2:52,okay the atp version is 1.1 that's the
3631,09-23,2:57,format i'll get okay a format of this
3632,09-23,3:00,request line after that i will specify
3633,09-23,3:05,who is the server
3634,09-23,3:10,okay i'm providing this guy i don't
3635,09-23,3:13,suggest you thought you must have knew
3636,09-23,3:14,as the server name okay and this line
3637,09-23,3:18,hostline is actually the header line
3638,09-23,3:20,okay here you can see in my request
3639,09-23,3:23,message i have only one request line
3640,09-23,3:28,which is get and one
3641,09-23,3:32,headline only two lines in my request
3642,09-23,3:35,message okay that's all
3643,09-23,3:38,foreign
3644,09-23,3:47,after that
3645,09-23,3:49,the server will respond okay i'm waiting
3646,09-23,3:52,for the server to respond
3647,09-23,3:53,so this entire thing
3648,09-23,3:58,is the response message
3649,09-23,4:07,okay if you look at the first line the
3650,09-23,4:11,first line is http 1.1 200 okay as we
3651,09-23,4:16,said this is actually the status line
3652,09-23,4:19,right the status line and then after
3653,09-23,4:22,that you see a number of header lines
3654,09-23,4:29,foreign
3655,09-23,4:37,you can see the dates of this response
3656,09-23,4:40,message date and time and the server for
3657,09-23,4:44,the uh for the web server this is apache
3658,09-23,4:47,okay that is the program and it's
3659,09-23,4:49,powered by php the content length the
3660,09-23,4:53,type etc okay so those are the header
3661,09-23,4:56,lines and after that you can see
3662,09-23,5:01,this entire thing
3663,09-23,5:06,okay
3664,09-23,5:09,so this is actually the data part okay
3665,09-23,5:12,do you remember
3666,09-23,5:14,if you look at here
3667,09-23,5:16,we said the data is appended after the
3668,09-23,5:19,header lines right so
3669,09-23,5:23,this part is the data okay and if you
3670,09-23,5:26,look at the data the dog type
3671,09-23,5:29,the document type is html okay and then
3672,09-23,5:35,um you can see uh
3673,09-23,5:37,this uh this file html file the head the
3674,09-23,5:42,title and everything the body okay so if
3675,09-23,5:45,you have learned html before you know
3676,09-23,5:47,this is actually one html page right one
3677,09-23,5:51,html file so basically what is happening
3678,09-23,5:56,here is actually i'm making a request to
3679,09-23,6:00,the server directly and the server is
3680,09-23,6:03,replying with the data it's responding
3681,09-23,6:07,with the data the data is just the one
3682,09-23,6:11,html file okay
3683,09-23,6:13,but since we are not using the web
3684,09-23,6:16,browser we are not using the web browser
3685,09-23,6:19,so this web page is not displayed as a
3686,09-23,6:23,web page it's actually just shown as a
3687,09-23,6:25,as the raw data okay and the raw data
3688,09-23,6:28,the source code uh that's what you see
3689,09-23,6:31,okay of course what will happen if
3690,09-23,6:34,you're if you are using the web browser
3691,09-23,6:37,then the backgrounds will will basically
3692,09-23,6:40,pass this part plus this um web page and
3693,09-23,6:44,display it in the browser okay question
3694,09-23,6:47,so far
3695,09-23,6:51,foreign
3696,09-23,6:55,so the next part this slide is showing
3697,09-23,6:59,you
3698,09-23,7:00,um another test okay i'm trying to
3699,09-23,7:03,connect to the web browser a web web
3700,09-23,7:06,server at sex state okay so you can say
3701,09-23,7:12,it's i'm trying to tell that to csus.edu
3702,09-23,7:16,at port 80.
3703,09-23,7:20,the connection is successful okay i'm
3704,09-23,7:22,able to connect directly with that
3705,09-23,7:24,server and i also sent
3706,09-23,7:27,one get message okay the gas the gut
3707,09-23,7:31,request message here is uh i'm trying to
3708,09-23,7:35,request for index.html
3709,09-23,7:38,okay
3710,09-23,7:39,but as you can see as you can see
3711,09-23,7:44,the server is replying to me another
3712,09-23,7:51,the stat line is is actually full for
3713,09-23,7:53,not fund okay what does this mean this
3714,09-23,7:57,means on the server side it doesn't have
3715,09-23,8:00,any a
3716,09-23,8:01,index.html file it cannot find it okay
3717,09-23,8:06,so you can see these are all the header
3718,09-23,8:08,lines
3719,09-23,8:09,and then you can see the data
3720,09-23,8:14,okay so although you can the server does
3721,09-23,8:18,not have any
3722,09-23,8:20,index.html file but it's still providing
3723,09-23,8:24,me a web page
3724,09-23,8:25,okay it's still providing me a web page
3725,09-23,8:28,this web page is just displaying
3726,09-23,8:30,actually the four funnel fund message
3727,09-23,8:33,okay if you don't trust me if you don't
3728,09-23,8:36,trust me you can open your web browser
3729,09-23,8:38,type in
3730,09-23,8:41,cs.csus.edu
3731,09-23,8:43,index.html and you can see what what
3732,09-23,8:46,will happen after that okay
3733,09-23,8:49,um of course i i did this uh years ago
3734,09-23,8:52,so probably the webpage changed is
3735,09-23,8:54,possible okay
3736,09-23,8:57,all right any questions so far
3737,09-23,9:08,okay so i would encourage you to try
3738,09-23,9:11,this on your own uh after class okay
3739,09-23,9:16,so the next thing we are going to
3740,09-23,9:19,discuss is uh about the cookies okay uh
3741,09-23,9:24,if you have watched the video on friday
3742,09-23,9:26,you probably have already known we
3743,09-23,9:30,mentioned one thing when we learn about
3744,09-23,9:32,http
3745,09-23,9:33,okay let me see we said
3746,09-23,9:37,http is stateless okay status basically
3747,09-23,9:42,means the server maintains no
3748,09-23,9:44,information about past client request
3749,09-23,9:46,okay so what does this mean this means
3750,09-23,9:51,um although the client
3751,09-23,9:53,sorry uh sorry i you can you can hear
3752,09-23,9:57,the noise again so this is this is some
3753,09-23,10:00,reminders kind of things it's pop out
3754,09-23,10:02,when i'm giving lectures uh hopefully
3755,09-23,10:05,you are not these terms by this okay
3756,09-23,10:09,um but again so http is stateless
3757,09-23,10:13,means the server maintains no
3758,09-23,10:15,information about the request the past
3759,09-23,10:18,client request although for example i'm
3760,09-23,10:20,visiting a website like amazon okay
3761,09-23,10:25,um the lab server will never remember my
3762,09-23,10:28,information
3763,09-23,10:29,so you may say that's not true
3764,09-23,10:31,okay because for example one day i want
3765,09-23,10:35,to buy something i put something for
3766,09-23,10:38,example i'm buying let's say uh a book
3767,09-23,10:41,okay i put in that i put that book into
3768,09-23,10:45,the cart okay and i didn't pay for it
3769,09-23,10:48,after many days when i come back again i
3770,09-23,10:51,can still see that book in my cart
3771,09-23,10:54,does this mean the server is remembering
3772,09-23,10:56,the information about the request
3773,09-23,11:01,this means this means i would say yes
3774,09-23,11:05,this means the server is indeed
3775,09-23,11:07,remembering information about the client
3776,09-23,11:11,request but
3777,09-23,11:14,it is not it is not because of http it's
3778,09-23,11:18,not it's not because the web server or
3779,09-23,11:21,the http session is remembering this
3780,09-23,11:24,it's actually because something else
3781,09-23,11:26,okay what is that something okay that is
3782,09-23,11:30,actually the cookie
3783,09-23,11:36,it's called cookies okay how do we use
3784,09-23,11:39,cookies
3785,09-23,11:40,so a cookie is basically composed of
3786,09-23,11:43,four components so firstly
3787,09-23,11:47,um
3788,09-23,11:49,okay header line of hp response message
3789,09-23,11:51,okay
3790,09-23,11:54,um and then cooking headline in the next
3791,09-23,11:56,request message
3792,09-23,11:59,um the third thing is the cookie file
3793,09-23,12:01,that is kept on the user's host and the
3794,09-23,12:04,last thing is the back end database at
3795,09-23,12:06,the website so four components probably
3796,09-23,12:08,now now you don't need you don't know
3797,09-23,12:10,why do we consider these four components
3798,09-23,12:13,and i'll explain this okay i also need
3799,09-23,12:15,this let's first look at example in this
3800,09-23,12:18,example somebody called susan
3801,09-23,12:22,um always access internet from pc so
3802,09-23,12:25,susan visits specific e-commerce site
3803,09-23,12:29,for the first time
3804,09-23,12:31,and because this is for the first time
3805,09-23,12:33,okay so when this request this initial
3806,09-23,12:37,atp request arrived at the site the site
3807,09-23,12:41,will create a unique id
3808,09-23,12:43,okay and store this id in the backend
3809,09-23,12:47,database at the server side so let's
3810,09-23,12:49,look at this
3811,09-23,12:51,this is the client student
3812,09-23,12:53,this is the server okay
3813,09-23,12:56,and this is a cookie file this file is
3814,09-23,13:00,stored at the web browser it's in the
3815,09-23,13:03,web browser okay so when i say clear all
3816,09-23,13:06,the cookies in the browser i mean you
3817,09-23,13:09,actually clear all the information in
3818,09-23,13:10,this cookie file
3819,09-23,13:11,okay so now in the cookie file you can
3820,09-23,13:14,see we say one cookie
3821,09-23,13:16,that is for ebay for this website ebay
3822,09-23,13:19,the id quick id is eight seven three
3823,09-23,13:23,four
3824,09-23,13:24,okay
3825,09-23,13:26,okay
3826,09-23,13:27,um that is the information that is
3827,09-23,13:29,already in the cookie file okay but now
3828,09-23,13:31,the client is actually visiting amazon
3829,09-23,13:35,another different website
3830,09-23,13:37,the client is visiting amazon
3831,09-23,13:40,for the first time
3832,09-23,13:42,okay it is sending an hp request
3833,09-23,13:45,the server recognized that this client
3834,09-23,13:48,is a new user
3835,09-23,13:50,okay say hey i got a new customer then
3836,09-23,13:54,the server will create an id for the
3837,09-23,13:57,user
3838,09-23,13:58,okay the id is 1678 okay and this id
3839,09-23,14:03,will be stored
3840,09-23,14:05,here at the back and database okay one
3841,09-23,14:10,six seven eight installed here
3842,09-23,14:13,meanwhile the server will respond to
3843,09-23,14:16,the client
3844,09-23,14:18,in the response message
3845,09-23,14:22,in the response message do you still
3846,09-23,14:24,remember the format for the response
3847,09-23,14:26,message the first line is the stat code
3848,09-23,14:28,then you have a number of header lines
3849,09-23,14:30,right so here when the server responds
3850,09-23,14:34,the server will add one
3851,09-23,14:38,more headline that is a set cookie
3852,09-23,14:41,and telling the client hey i got a new
3853,09-23,14:45,id for you your id is 1678 okay and you
3854,09-23,14:50,can see then this new id
3855,09-23,14:52,is now stored at the client side
3856,09-23,14:55,in the cookie file
3857,09-23,14:58,okay then
3858,09-23,15:02,the next time when the client contacts
3859,09-23,15:05,the server again
3860,09-23,15:08,it will make another hpv request right
3861,09-23,15:11,if you still remember the format for
3862,09-23,15:13,request message we know the first line
3863,09-23,15:15,is guess something usually okay and
3864,09-23,15:18,second the starting from the second line
3865,09-23,15:20,is uh is the headlines right so now we
3866,09-23,15:25,will add one more headline
3867,09-23,15:29,okay this is the header line one more
3868,09-23,15:32,headline in the request message to say
3869,09-23,15:34,hey i'm not a new customer i have my
3870,09-23,15:38,cookie my cookie id is one six side
3871,09-23,15:41,okay then the server will check
3872,09-23,15:46,okay the server after we see this
3873,09-23,15:48,request message it will check this id
3874,09-23,15:51,167 is in the backend database and
3875,09-23,15:54,recognize oh this is susan
3876,09-23,15:58,okay so then the the server will respond
3877,09-23,16:03,will respond uh in a specific way okay
3878,09-23,16:06,we'll respond to this to susan with some
3879,09-23,16:10,of our susan's information loaded in
3880,09-23,16:12,advance
3881,09-23,16:13,okay so then it will send it back and uh
3882,09-23,16:17,http response message
3883,09-23,16:20,okay and then and then one week later
3884,09-23,16:25,one week later if susan is contacting
3885,09-23,16:29,the server again
3886,09-23,16:31,then it will still
3887,09-23,16:34,add this cookie
3888,09-23,16:36,as long as this cookie is not clear it's
3889,09-23,16:38,not inspired then it can still add this
3890,09-23,16:42,cookie then the server will check
3891,09-23,16:46,this cookie idea again in the background
3892,09-23,16:49,database and say oh this is susan again
3893,09-23,16:51,visiting us one week later so then the
3894,09-23,16:54,server will load susan information again
3895,09-23,16:58,and respond uh in a specific way okay so
3896,09-23,17:02,this is how it works this is the entire
3897,09-23,17:04,process
3898,09-23,17:05,as you can see in this process it is not
3899,09-23,17:09,http
3900,09-23,17:12,remembering the information it's not the
3901,09-23,17:15,server the web server program
3902,09-23,17:17,remembering the information of the
3903,09-23,17:19,client it's actually this database
3904,09-23,17:23,it's actually this back-end database
3905,09-23,17:25,remembering all the information and then
3906,09-23,17:28,load this information in the ones that's
3907,09-23,17:30,what happens actually okay uh that's why
3908,09-23,17:34,usually when you buy things online
3909,09-23,17:37,okay we always visit websites online so
3910,09-23,17:40,they will say oh okay they are using
3911,09-23,17:42,cookies okay this is a this is a very
3912,09-23,17:45,convenient for users because your status
3913,09-23,17:48,are remembered okay but it also has
3914,09-23,17:51,privacy issue as you can see here okay
3915,09-23,17:54,also has privacy issue
3916,09-23,17:57,and actually one interesting thing is uh
3917,09-23,18:00,for example sometimes especially during
3918,09-23,18:05,black friday when you when you're
3919,09-23,18:07,shopping uh for something okay when you
3920,09-23,18:10,are shopping when you are
3921,09-23,18:12,um getting those kind of deals okay
3922,09-23,18:15,sometimes they will they will also use
3923,09-23,18:17,cookie okay uh the servers will also use
3924,09-23,18:21,cookie they can see one customer can
3925,09-23,18:24,only use this coupon for once
3926,09-23,18:28,okay for once how do they know you you
3927,09-23,18:32,have used this coupon for once or twice
3928,09-23,18:33,they use cookie to remember you they
3929,09-23,18:36,will say oh okay this customer has
3930,09-23,18:38,already used this coupon before so we
3931,09-23,18:41,cannot if if he or she buy again we
3932,09-23,18:44,cannot give him or her another discount
3933,09-23,18:48,okay that's what happens so one way to
3934,09-23,18:52,to
3935,09-23,18:54,um address this problem is actually you
3936,09-23,18:58,can clear the cookies okay if you clear
3937,09-23,19:00,the cookies at your side okay the server
3938,09-23,19:04,will not be able to recognize your
3939,09-23,19:07,machine again so the server will treat
3940,09-23,19:09,you as a new customer and then you can
3941,09-23,19:11,use the coupon for second time or for
3942,09-23,19:14,many times okay that's like a bonus as a
3943,09-23,19:18,computer science student okay
3944,09-23,19:22,all right uh let me look at the
3945,09-23,19:25,uh
3946,09-23,19:26,questions in the chat
3947,09-23,19:32,one question is since the server is
3948,09-23,19:34,storing data in the back-end database is
3949,09-23,19:37,this still considered stateless
3950,09-23,19:40,uh when we see status i mean http is
3951,09-23,19:44,status i i don't mean the server or this
3952,09-23,19:49,entire website is stateless okay i mean
3953,09-23,19:52,http itself the protocol itself is
3954,09-23,19:55,status because the protocol
3955,09-23,19:58,never remember the past client uh
3956,09-23,20:02,information so for example if you look
3957,09-23,20:04,at the http request message and response
3958,09-23,20:07,message here okay it doesn't remember
3959,09-23,20:10,any of your previous information the
3960,09-23,20:13,server the server does not use http to
3961,09-23,20:15,remember it is using the backend
3962,09-23,20:17,database so i would say
3963,09-23,20:20,if we want to make this accurate i would
3964,09-23,20:23,say http protocol is stateless
3965,09-23,20:27,okay i do not say anything else
3966,09-23,20:32,does this answer a question
3967,09-23,20:37,okay good
3968,09-23,20:42,another question is is there reasons i
3969,09-23,20:45,shouldn't accept cookies on a website
3970,09-23,20:49,um some most of the time i think you can
3971,09-23,20:52,you can reject you can of course reject
3972,09-23,20:55,using cookies on a specific website then
3973,09-23,20:58,in this case they will
3974,09-23,21:00,um they will not be able to remember you
3975,09-23,21:02,but sometimes you know
3976,09-23,21:04,um the website is just enforce okay they
3977,09-23,21:08,uh enforce to use cookies so in that
3978,09-23,21:12,case if you want to continue using this
3979,09-23,21:15,website and then you have to you accept
3980,09-23,21:17,the cookie the cookie conditions they
3981,09-23,21:20,they have specified for you okay
3982,09-23,21:24,um but i would say if you have a choice
3983,09-23,21:26,you don't have to accept cookies as
3984,09-23,21:29,again as i said it is uh very convenient
3985,09-23,21:32,using cookies is very convenient but
3986,09-23,21:35,it's uh it also remember your status it
3987,09-23,21:38,also has privacy issues
3988,09-23,21:41,okay
3989,09-23,21:43,yeah any other questions
3990,09-23,21:51,all right very good okay so let's see
3991,09-23,21:54,what cookies can be used for the cookies
3992,09-23,21:56,can be used for a number of things for
3993,09-23,21:58,example authorization we know sometimes
3994,09-23,22:01,if you have logged in to a website okay
3995,09-23,22:05,then you don't have to login again and
3996,09-23,22:08,again because they have already
3997,09-23,22:10,remembered you using the cookies so this
3998,09-23,22:13,is a one functionality of cooking of
3999,09-23,22:15,course it has security issue right so if
4000,09-23,22:17,you do not sign out if they have already
4001,09-23,22:20,remembered you then this will of course
4002,09-23,22:23,create some security issues
4003,09-23,22:27,um the second thing is for sure shopping
4004,09-23,22:28,cart and they have used this example the
4005,09-23,22:30,third thing is for recommendations
4006,09-23,22:31,because they have remember your sets
4007,09-23,22:35,they know what you are looking for then
4008,09-23,22:37,they can make recommendations based on
4009,09-23,22:40,the activities you have already
4010,09-23,22:42,conducted before okay the third thing is
4011,09-23,22:45,to remember the user session state this
4012,09-23,22:48,is uh this is similar to the
4013,09-23,22:50,authorization part okay
4014,09-23,22:53,basically they remember your session
4015,09-23,22:56,state and then you don't have to uh log
4016,09-23,23:00,in again again and also of course
4017,09-23,23:02,sometimes they also remember some of the
4018,09-23,23:05,settings in the current session okay
4019,09-23,23:07,then they do not you do not need to
4020,09-23,23:11,restart everything from scratch okay
4021,09-23,23:15,so that's uh the functionalities for
4022,09-23,23:18,cookies so how can we how to keep the
4023,09-23,23:22,state okay basically
4024,09-23,23:24,um
4025,09-23,23:27,uh basically the protocol endpoints is
4026,09-23,23:31,maintaining the state and center and
4027,09-23,23:33,receiver side or multiportion sections
4028,09-23,23:35,okay the cookies are what used to
4029,09-23,23:39,remember the state okay again as i said
4030,09-23,23:43,hcp itself is not is stateless it
4031,09-23,23:47,doesn't remember any state but the
4032,09-23,23:49,cookies are helping the atp protocol to
4033,09-23,23:55,remember the stage okay this is used by
4034,09-23,23:59,the server side to remember the clients
4035,09-23,24:02,uh states okay so this is different from
4036,09-23,24:05,the protocol being staged as itself okay
4037,09-23,24:10,um and of course of course you can see
4038,09-23,24:13,cookie permits sites to learn a lot
4039,09-23,24:14,about you this is a this has a privacy
4040,09-23,24:17,concern okay
4041,09-23,24:20,um
4042,09-23,24:21,so that's something you need to pay
4043,09-23,24:23,attention to all right so that's all
4044,09-23,24:26,what i want to cover about cookies any
4045,09-23,24:28,questions
4046,09-23,24:35,okay
4047,09-23,24:38,all right
4048,09-23,24:40,so the next thing is about web cache so
4049,09-23,24:43,webcash is another very important thing
4050,09-23,24:45,in uh in the web service uh so what is
4051,09-23,24:50,the web cache webcache is also called as
4052,09-23,24:52,processor i think you probably heard
4053,09-23,24:54,about this term before proxy okay so
4054,09-23,24:58,what does this mean
4055,09-23,25:00,um proxy is basically one machine
4056,09-23,25:03,set between the clients and the original
4057,09-23,25:07,servers okay usually it is very close to
4058,09-23,25:11,the client
4059,09-23,25:13,it's close to the client okay
4060,09-23,25:15,so the goal for webcache is to satisfy
4061,09-23,25:19,the client request without involving the
4062,09-23,25:22,original server
4063,09-23,25:24,okay the arranging server
4064,09-23,25:26,um so why do we do that you can think
4065,09-23,25:29,about this usually usually if you want
4066,09-23,25:31,to request something you want to connect
4067,09-23,25:34,to the arena server and then the renault
4068,09-23,25:36,server sent back the objects you need
4069,09-23,25:39,right but this is not very efficient
4070,09-23,25:42,sometimes especially when the servers
4071,09-23,25:45,are far away from the clients
4072,09-23,25:47,okay
4073,09-23,25:49,the response time may be very long okay
4074,09-23,25:52,maybe seconds or even minutes
4075,09-23,25:54,okay then uh in this case
4076,09-23,25:58,if we have a proxy server okay
4077,09-23,26:03,if we have proxy server the process
4078,09-23,26:05,server can fetch some of the
4079,09-26,0:03,okay all right so the next thing is about web cache so
4080,09-26,0:11,webcash is another very important thing in in the web service
4081,09-26,0:17,so what is the web cache webcache is also called as processor i think you probably heard about this term before
4082,09-26,0:23,proxy okay so what does this mean um proxy is basically one machine
4083,09-26,0:31,set between the clients and the original servers okay usually it is very close to
4084,09-26,0:39,the client it's current close to the client okay so the goal for webcache is to satisfy
4085,09-26,0:46,the client request without involving the original server
4086,09-26,0:51,okay the arranging server um so why do we do that you can think
4087,09-26,0:56,about this usually usually if you want to request something you want to connect to the arena server and then the renault
4088,09-26,1:04,server sent back the objects you need right but this is not very efficient
4089,09-26,1:10,sometimes especially when the servers are far away from the clients
4090,09-26,1:15,okay the response time may be very long okay maybe seconds or even minutes
4091,09-26,1:22,okay then uh in this case if we have a proxy server okay
4092,09-26,1:30,if we have proxy server the process server can fetch some of the objects in
4093,09-26,1:35,the ones and put it onto this uh local machine this proxy okay then whenever uh
4094,09-26,1:43,the so for example if this client is is trying to get this object for the first
4095,09-26,1:50,time from this unreading server okay then the client can send a hp request
4096,09-26,1:56,to the proxy so let me display this again send it to
4097,09-26,2:01,the proxy the proxy will say hey my client is trying to get this object can
4098,09-26,2:07,you send it to me then the proxy will contact the original server to to make
4099,09-26,2:14,another request right the original server will respond to the proxy
4100,09-26,2:19,the proxy then responded to the client okay so you may say why do we do this we
4101,09-26,2:24,are adding one more step between the client and the renault server the benefit of using proxy is actually
4102,09-26,2:32,later when other clients are making the
4103,09-26,2:37,same request okay requesting for the same website the
4104,09-26,2:42,same same object then the client can contact proxy and proxy can respond
4105,09-26,2:49,directly without involving the arranging server that is the benefit okay you can
4106,09-26,2:56,think about this for our university if we have so many users we may have thousand ten of ten thousand users okay
4107,09-26,3:03,on campus then most of us need to request something from let's say google
4108,09-26,3:09,we use some very common websites okay then if everyone is connecting google
4109,09-26,3:17,directly connecting to google directly you can see that a lot more traffic is
4110,09-26,3:23,between us and google so for each user the response time may be long
4111,09-26,3:31,right the response time may be very long and the traffic is a lot okay if we have
4112,09-26,3:37,more traffic than the the response time can be even longer okay you can see more delays but if we have a proxy in between
4113,09-26,3:45,okay then when the first client is using this uh is requesting something from
4114,09-26,3:51,google then the proxy can get this google.com webpage on the processor okay
4115,09-26,3:57,then later on some other clients are requesting for the same thing they don't need to contact google anymore it is
4116,09-26,4:03,saving a lot of time so pay attention actually the cash here
4117,09-26,4:08,acts as both the client and the server okay so when the client is making a
4118,09-26,4:15,request the pocket server is now a server but
4119,09-26,4:22,when the proc server is making a request to the original server now the processor
4120,09-26,4:27,becomes a client okay so it has a two rows both client and zero
4121,09-26,4:33,uh and typically the cache is installed by isp university company or residential
4122,09-26,4:39,isp and typically the cache is close to the clients we mentioned why last time
4123,09-26,4:46,right we want this to be close to clients so the response time can be improved can be very short okay
4124,09-26,4:53,so here we list several motivations for using
4125,09-26,4:59,web cache firstly is to reduce the response time for client requests i
4126,09-26,5:04,guess you can all understand this now okay the second one is to reduce the
4127,09-26,5:10,traffic on institutions accessing what does this mean
4128,09-26,5:15,so um so if these are all the clients okay if
4129,09-26,5:22,this is the cash and if this is the original silver
4130,09-26,5:32,okay now you you think about this because most of the requests
4131,09-26,5:38,are already satisfied by the cache by the proxy okay we use those two names uh
4132,09-26,5:46,interchangeably okay then in this case um
4133,09-26,5:52,we do not need to request something from the original
4134,09-26,5:57,server i mean most of the time of course there are still time we need to come down to the original server right
4135,09-26,6:03,so then the link the link between the cache and the internet
4136,09-26,6:09,okay for this we can see this is the entire the entire internet in this internet we have arduino servers
4137,09-26,6:16,right so this link is called the access link
4138,09-26,6:26,as you can see here we can indeed reduce the traffic on the institutions access
4139,09-26,6:32,link right why because again most of the requests from the clients are already
4140,09-26,6:38,satisfied by the cash okay that's the main reason any questions
4141,09-26,6:47,no okay good so uh the third motivation um
4142,09-26,6:53,is that uh now the internet is dense with the caches okay so this enables the
4143,09-26,7:01,per content providers to effectively deliver the content so what what is
4144,09-26,7:06,content provider content providers means for example uh youtube is accounting
4145,09-26,7:13,provider netflix is a content provider okay so mostly for those video providers
4146,09-26,7:19,they need to provide the content okay so of course we have big companies like
4147,09-26,7:26,youtube like netflix but we also have smaller companies or smaller content
4148,09-26,7:31,providers they may not have the resources at those big companies okay but they still want to deliver the
4149,09-26,7:39,content as fast as possible they still want to provide very good experience to
4150,09-26,7:44,the customers how can they do this they can use cash okay they can basically push their content to the caches then in
4151,09-26,7:53,this case um most again most of other clients requests can be certified as a cash okay
4152,09-26,7:59,so this this uh improves their service so those are the three major motivations
4153,09-26,8:05,for uh web caching okay um we just mentioned uh especially for
4154,09-26,8:13,the first one we mentioned this can web caching can reduce the response time for client requests but some of you may not
4155,09-26,8:21,agree with me right how do you know that so then next we want to use this caching
4156,09-26,8:27,example to prove why i said that right why and how how this can
4157,09-26,8:35,improve the response time okay now uh here you can on the figure uh in this
4158,09-26,8:42,figure on the right you can say we have a number of servers okay this is the public internet
4159,09-26,8:49,okay and we also have any institutional network in this institution
4160,09-26,8:54,institutional network we have these clients and um for now for this machine you you it
4161,09-26,9:01,can be treated as a normal client or a normal server whatever okay
4162,09-26,9:08,um and this router is the access router or we call it add
4163,09-26,9:14,router okay and this link is called the access link
4164,09-26,9:21,okay this actually starting is connected to the public internet and again on the
4165,09-26,9:26,public internet we have a number of servers so now we assume the average object size is 100k beats so what does
4166,09-26,9:34,this mean this means um we know the clients are making requests from the arduino server right
4167,09-26,9:40,request for what for objects right we assume these servers for example one of
4168,09-26,9:45,them is the web server foreign
4169,09-26,9:52,object size is 100 kbs okay that means a image is 100k of web
4170,09-26,9:59,page is 100k uh pdf is also 100kv average okay we average and then the
4171,09-26,10:05,average request rate from the browser to the original server is 15 requests per second
4172,09-26,10:20,what does this mean this means the web browser is making 15 requests
4173,09-26,10:27,per second okay and each request is requesting for
4174,09-26,10:32,one object okay the object is 100k
4175,09-26,10:38,okay now we can calculate the average data rate so the hourly data rate is
4176,09-26,10:43,100k 100 kbs
4177,09-26,10:53,per object times
4178,09-26,11:00,foreign
4179,09-26,11:07,bits per object times 15 objects per second right so in total this is a
4180,09-26,11:24,in total this is 1500 kbs per second that means
4181,09-26,11:42,right that means 1.5 megabits per second which is 1.5 mbps okay bps stands for
4182,09-26,11:51,beats per second okay that's how we get this number
4183,09-26,11:57,on the slide okay this is the average degree you may ask why do we calculate that
4184,09-26,12:05,the reason is because we want to know here for the access link
4185,09-26,12:12,you can say it's 1.54 mbps that means in one second we can send
4186,09-26,12:19,1.54 megabits data okay so that is the bandwidth of this access link we want to
4187,09-26,12:27,know if this access link is busy or not right we want to know how much data how
4188,09-26,12:35,much data is sent through this access link in one second per second okay then
4189,09-26,12:41,we kind of sense oh if this is busy or not so then you may ask again why do you care if access link is busy or not
4190,09-26,12:48,later you will know this is very important for the response time okay
4191,09-26,12:54,all right so then let's let's first leave that and then let's look at the rtt from the router to the internet side
4192,09-26,13:01,okay the rtt from this router to the original server if this is a
4193,09-26,13:10,also a web server okay and then coming back
4194,09-26,13:16,pay attention from this router from the router at the internet side from the
4195,09-26,13:22,router at the internet side to the original server and then coming back the rtt here we assume is two
4196,09-26,13:29,seconds okay all right so now let's calculate the total delay
4197,09-26,13:36,the total delay from a client let's say client a to server
4198,09-26,13:42,v okay from a to b we know the total delay should be the
4199,09-26,13:49,time let me use a change of color [music]
4200,09-26,13:55,um okay let's let's look at how i draw here
4201,09-26,14:01,okay from a to b we are traveling to the first sorry let's chain two different
4202,09-26,14:06,colors we are traveling to the first round here okay and then we go through the access
4203,09-26,14:14,link and then we go to the
4204,09-26,14:20,lab server b and we come back and then we come back to the access link
4205,09-26,14:28,and then the router comes back to here do you say
4206,09-26,14:34,this is this is the entire process the total delay should be should consider all those six segments
4207,09-26,14:42,okay so now we consider this part
4208,09-26,14:52,this part we know it is two seconds
4209,09-26,14:58,right the the blue part is two seconds in the internet side okay
4210,09-26,15:05,and then now we consider
4211,09-26,15:11,we consider this part this um the the local area network part i
4212,09-26,15:20,mean the institutional network part then we consider these two
4213,09-26,15:26,what is the total time span here the time spent here is called the land
4214,09-26,15:32,delay okay so the land delay as you can see
4215,09-26,15:39,it is usually very fast because it's just local right it's usually very very fast
4216,09-26,15:46,so the um here the internet delay
4217,09-26,15:53,i use the blue color is two seconds okay the land delay we said is very it's
4218,09-26,15:59,very fast and then another thing we need to consider is actually the accessioning
4219,09-26,16:06,part we only we are only left with this part
4220,09-26,16:12,okay so then this part is called the access delay
4221,09-26,16:18,how many how much time do we spend here the access delay is determined by how
4222,09-26,16:25,busy this access link is if this access link is is very very busy
4223,09-26,16:31,then we will spend a long time there it's like when you drive drive home from
4224,09-26,16:36,school if the road is very busy then you you will have a long delay there it's the same thing okay so then now our
4225,09-26,16:44,question is is access link busy now
4226,09-26,16:49,is this busy we just calculated our data rate to the
4227,09-26,16:56,browsers right so the average data rate is 1.5 mbps
4228,09-26,17:04,that means the re the data we going through from the institutional network to the public internet going through the
4229,09-26,17:11,access link is 1.5 mbps and the bandwidth here we have is 1.54 mbps
4230,09-26,17:19,you can imagine is this busy of course this is busy right because this is 99
4231,09-26,17:26,that means that the bandwidth is already utilized to the four almost right so 99
4232,09-26,17:34,means oh this is very busy then we have to spend a very long time there it can
4233,09-26,17:41,be minutes for example right usually when minutes is already a
4234,09-26,17:46,very long time in uh in networking okay so now you can see the total delay here
4235,09-26,17:53,is actually two seconds plus minutes plus microseconds
4236,09-26,17:59,then finally it is mostly determined by the access delay by the minutes part
4237,09-26,18:05,right okay so now let me ask you a question if you want to improve this situation
4238,09-26,18:12,what would you do if we want to improve this situation
4239,09-26,18:18,which means if you want to um decrease the delay
4240,09-26,18:24,okay then you have to decrease the excess delay right you have to decrease
4241,09-26,18:29,it excessively now what would you do okay how about we do this
4242,09-26,18:36,we increase the bandwidth from 1.54 mbs mbps to 154 mbps that's a huge increase
4243,09-26,18:45,right now the access link utilization rate becomes
4244,09-26,18:51,becomes 1.5 over one point sorry over 154.
4245,09-26,18:58,that is 0.99 that is even less than one percent
4246,09-26,19:05,so it's not busy anymore right then because it's not busy so the access
4247,09-26,19:11,delay can be decreased significantly okay for example it can be decreased
4248,09-26,19:17,from minutes to m seconds okay now we know this total delay is
4249,09-26,19:22,equal to two seconds plus m seconds plus microseconds so it's about i would say
4250,09-26,19:28,it's about two seconds foreign that's a good idea
4251,09-26,19:38,but this solution this solution i would say is very expensive
4252,09-26,19:43,right you think about this every time when we have a problem like this we have
4253,09-26,19:48,to change the cable right success link
4254,09-26,19:54,and many times this can be very expensive especially if you consider this if this link is uh uh is across the
4255,09-26,20:03,ocean right so how expensive that is okay so um
4256,09-26,20:12,apparently that's not the best solution all right so we just mentioned okay we
4257,09-26,20:19,can increase the accessing speed to solve this problem but that is not cheap
4258,09-26,20:24,okay that's not the best solution okay uh do we have a better way to improve
4259,09-26,20:30,the response rate or response time from what we just learned okay you just
4260,09-26,20:35,guess do we have a better way so here we have a local web cache we make this
4261,09-26,20:41,server a local web cache that means every time when a client wants to
4262,09-26,20:46,connect with the original server it will need to firstly connected to the local web cache okay
4263,09-26,20:54,and ask the cash hey do you have this object or not okay then in this case we
4264,09-26,21:01,still we still view the average of size as a 100k beats okay and we still view
4265,09-26,21:08,the average uh request rate as 15 requests per second and the average data
4266,09-26,21:14,rate to browser is 1.5 mbps so the calculation is still the same the round
4267,09-26,21:19,trip time on the internet side is still two seconds and the access link is still 1.5 mac bks we do not change anything
4268,09-26,21:27,okay now we assume the line and the learn side that utilization rate is still 15
4269,09-26,21:33,which means the land side is not busy okay it's not busy so the land side is
4270,09-26,21:38,still very fast now we need to calculate the total delay
4271,09-26,21:44,so again before we we want to calculate the total delay we need to the total delay now still include includes the
4272,09-26,21:52,third 3.3 portion okay uh the land portion the access portion and also the internet
4273,09-26,21:59,portion okay but how do we calculate the link utilization rate
4274,09-26,22:04,here how do you calculate the utilization rate do we still use 1.5 m bps no
4275,09-26,22:14,why because a lot of requests have already been certified by the web cache
4276,09-26,22:21,the local web cache they do not need to go through this access link okay
4277,09-26,22:27,so then here we want to we want to make some assumptions before we we make the
4278,09-26,22:33,assumption we cannot do any calculation okay we assume the cash credit rate is 0.4
4279,09-26,22:41,what does this mean what is cash flow rate we know the cash cannot hold everything
4280,09-26,22:48,right the cash only holds the most ly uh common uh visited websites
4281,09-26,22:56,okay then now we assume 40 percent of the request
4282,09-26,23:04,40 percent of the clients request can be certified as a cash
4283,09-26,23:10,okay that means when you request for a web page 40 percent like the likely hold
4284,09-26,23:16,of getting certified by the cash is just forty percent okay and the sixty percent
4285,09-26,23:21,requests need to be certified as a regional server okay so what does this mean this means
4286,09-26,23:28,do you remember the access link arrange knowledge need to carry 1.5 mbps
4287,09-26,23:36,right originally and now how much data need to go through here
4288,09-26,23:46,how much did i need to go through here originally 1.5 mbps has to go through
4289,09-26,23:55,this access link okay is it 60 of that right accident so
4290,09-26,24:01,it's 60 percent of the 1.5 mbps okay that means it's a 0.9 mbps
4291,09-26,24:14,only 0.9 bps need to go through the success link the other 40 percent
4292,09-26,24:21,are already satisfied at the local cash okay does this make sense
4293,09-26,24:30,so now we want to know because this is only 0.9 is this accessing still busy
4294,09-26,24:38,it's not busy anymore right it's not busy let's say okay
4295,09-26,24:45,um so as i calculate it's 0.9 mbps and now the utilization rate for the access
4296,09-26,24:51,link is 0.9 overall 1.54 so it's just a 58 percent
4297,09-26,25:00,okay 58 percent means it's not congested so now the accessing is not congested so
4298,09-26,25:09,it's also very fast okay then now the question is
4299,09-26,25:15,how can we calculate the total delay okay
4300,09-26,25:21,so if we want to calculate the total delay we want to average for for some requests some requests can be certified
4301,09-26,25:27,here by the cache and some requests have to go through
4302,09-26,25:33,the access link to the public internet so as you can see some requests can be certified very quickly and some cannot
4303,09-26,25:40,okay it's like when we want then how can we calculate the average
4304,09-26,25:47,it's like if we have for example um let's say if we have
4305,09-26,25:53,um the grace for each student the grid for each student for the final exam okay if
4306,09-26,25:59,i want to calculate the outreach what can i do some students have got zero
4307,09-26,26:05,that's brutal i know right some students get 100 okay
4308,09-26,26:11,let's say we have 40 students 40 person students get zero and a 60
4309,09-26,26:19,person student get 100 how would you calculate the average
4310,09-26,26:26,zero times 40 percent plus 100 times 60 percent
4311,09-26,26:35,right that's how you calculate the outreach of our students right if you don't trust me some of you
4312,09-26,26:42,may say oh 40 means zero times 40 students
4313,09-26,26:47,plus 100 times 60 students
4314,09-26,26:52,now in total we have 100 students that is the average
4315,09-26,27:00,right some of you made me say that because this is the same thing i would zero time 40 plus 100 times 60 okay
4316,09-26,27:08,that's how we calculate the average okay it's the same thing for the total
4317,09-26,27:14,delay okay let's see the total delay now equals to
4318,09-26,27:20,60 percent how to be satisfied by the original
4319,09-26,27:26,server that means 60 times the delay from original server
4320,09-26,27:32,plus 40 percent can be certified as a cash so that is 40 percent times the
4321,09-26,27:39,delay when certified at the cash okay so that is sixty percent times what time
4322,09-26,27:48,what is the delay from original server so then this one have to go through here
4323,09-26,27:55,local web cache we know it's very fast and access link is now very fast
4324,09-26,28:02,and then it has to go to the public internet we know this is two seconds
4325,09-26,28:09,right two seconds plus maybe m seconds plus microseconds in
4326,09-26,28:16,total we can see it's about 2.01 a little bit more than two seconds
4327,09-26,28:24,right so that is for those requests that have to be certified at the server arena
4328,09-26,28:30,server okay and for the remaining for the remaining uh delay the remaining uh
4329,09-26,28:38,requests they have they can be certified at the local web cache and i may know the local
4330,09-26,28:44,um web local area network is not busy right so then the delay is very very
4331,09-26,28:53,shocked so that is about 0.01 seconds
4332,09-26,28:58,okay so in total if you calculate then this the total delay is
4333,09-26,29:06,about about 1.2 seconds
4334,09-26,29:12,1.2 seconds that's that is our delay
4335,09-26,29:18,and if you compare this number with the one before
4336,09-26,29:27,do you see this the one before is about two seconds a little bit more than two seconds right when we increase the
4337,09-26,29:34,bandwidth okay 1.2 seconds is even much better than two
4338,09-26,29:41,seconds right so but you can compare the cost the cost
4339,09-26,29:49,of in changing the access link and the cost of adding one local web
4340,09-26,29:55,cache apparently the second option installing a local web cache is much more cheaper
4341,09-26,30:03,than changing the access link then increasing the bandwidth of the access
4342,09-26,30:08,link right so now we know okay with this very
4343,09-26,30:14,smart solution we actually we we improved the performance
4344,09-26,30:19,but we spend less okay we spend less it's it's a much more
4345,09-26,30:24,cost effective okay because the local web cache is just a a general computer
4346,09-26,30:30,it's very uh very early very cheap to to install okay any questions
4347,09-26,30:39,i know this is a lot of information on the calculation uh but i think i think
4348,09-26,30:44,you you are able to digest this okay and for the exam do not worry for the
4349,09-26,30:50,exam i will not ask you to calculate the total delay do the calculation like this you only need to remember the the
4350,09-26,30:58,takeaway message the takeaway message is that installing a local web cache
4351,09-26,31:05,can improve the response delay or the round trip time
4352,09-26,31:11,much better but with with the less uh spans okay less expense
4353,09-26,31:19,uh less cost okay so um the next thing i want to talk
4354,09-26,31:25,about is about conditional get when we use the cache there is actually
4355,09-26,31:31,one problem i i'm not sure if you have noticed this so a problem is
4356,09-26,31:37,um the cache you can see the hatred
4357,09-26,31:43,the cash flow rate is 40 right and also sometimes the cash
4358,09-26,31:49,may store some auto outdated uh web pages
4359,09-26,31:55,or objects does this make sense so some some of the some of the objects have already been
4360,09-26,32:01,updated at the original servers but the local cache does not know that
4361,09-26,32:07,okay then in this case the objects stored on the local cache is outdated
4362,09-26,32:12,okay this may create a problem for the for the uh clients because the client wants to get the most up-to-date version
4363,09-26,32:21,okay in this case how do we address this problem okay we address this problem
4364,09-26,32:26,using something called conditional get do you remember that last time we learned the get method
4365,09-26,32:32,right for atp request um so the goal of conditional guide
4366,09-26,32:39,basically means the proxy server the cache the processor
4367,09-26,32:45,role will contact the original server and say hey can you send me the most up-to-date
4368,09-26,32:52,version if my current version is already the most up-to-date one then you don't need
4369,09-26,32:59,to send me the object but if it's not the most current version then you need to send me the up-to-date
4370,09-26,33:07,version does this make sense okay so then that means the server need
4371,09-26,33:14,to check if the current version is the up-to-date one or not
4372,09-26,33:20,okay how do we know that how do we know if this is uh
4373,09-26,33:26,the most current one or not do you have a question michael okay okay
4374,09-26,33:32,so there do you remember in when we talk about the get message there is one line
4375,09-26,33:38,called if modified things okay if you cannot remember that let's
4376,09-26,33:44,go back to the get message
4377,09-26,33:50,the guide message here
4378,09-26,33:56,um let's see it's not here it's in the response message
4379,09-26,34:02,yes either sorry sorry i said something wrong in the response
4380,09-26,34:07,message we have some headline called last modified okay and i told you this is very
4381,09-26,34:13,important right so this tells you the last modified data and time of the
4382,09-26,34:18,object how it tells you oh okay this file was
4383,09-26,34:24,last modified on october 30th 2007. okay
4384,09-26,34:29,and then in the conditional gut okay
4385,09-26,34:35,we will use this modified let's modify date and time okay we will say okay if
4386,09-26,34:42,this is modified since that date please send me the new version if it's not
4387,09-26,34:48,modified then you don't need to send me a new word okay so let's see how it's used
4388,09-26,34:54,this is the cache and this is the server okay the cash will send a
4389,09-26,35:00,a message say hey i want to get a web page or something or some object okay
4390,09-26,35:07,and also in this request message we will say if it's modified since this date
4391,09-26,35:14,if the object is not modified sorry it's not before it's after
4392,09-26,35:22,if it's not modified after that date then the third of your simplicity
4393,09-26,35:29,304 not modified what does this mean 304 is the status code right this means the
4394,09-26,35:35,object was not modified since that date but if we have
4395,09-26,35:41,the object was modified okay then the server will send back 200 okay and
4396,09-26,35:49,then attach the data the data is the most
4397,09-26,35:54,current version object is the up to date
4398,09-26,36:05,okay is the new object this is how it works okay let's see another example
4399,09-26,36:11,here we have a conditional uh get so we have one uh sorry we have one cache and
4400,09-26,36:19,one server okay the cash will say hey can i get this fruit
4401,09-26,36:24,kv dot gif the http version is 1.1 the host hospital name is the first outcome
4402,09-26,36:32,so this is a fruit stock count okay and then the silver will say okay
4403,09-26,36:39,http 200 okay i have this uh object to you i give you this kv and the last
4404,09-26,36:47,modified date and time for the kv is september 9th 2017-15 okay so this
4405,09-26,36:54,contains the kv okay and then a week later
4406,09-26,37:00,the cash will say hey i'm requesting for the kiwi but
4407,09-26,37:06,i already have a version of kv the last mode if i didn't have time is actually
4408,09-26,37:12,last one september 9th 2015. if the object is not
4409,09-26,37:18,modified so the third of your simply respond back with
4410,09-26,37:25,304 not modified and here the amp the entity body is
4411,09-26,37:30,empty because it's not modified so we do not need to update okay
4412,09-26,37:36,but you can imagine if this object is modified then what is the response message the
4413,09-26,37:44,first line would be what can you guess
4414,09-26,37:49,if the object is already modified the first line of the response passage should be
4415,09-26,37:55,http 1.1 200 okay
4416,09-26,38:01,do you remember you remember here if it's already modified
4417,09-26,38:08,then we need to respond with 200 okay and then send in the most up-to-date
4418,09-26,38:13,version of the object okay so that's why here in this example pay attention if
4419,09-26,38:19,the object is already modified then you will send it back with 200 okay
4420,09-26,38:24,here will be http 200 okay
4421,09-26,38:29,okay the first line and here you will also need to send in the most up-to-date version of kv
4422,09-26,38:37,okay it is clear
4423,09-26,38:42,when it says modified does this that's its main object
4424,09-26,38:48,yes when we say modified we mean the object is unmodified or not okay i mean the if the web page is
4425,09-26,38:55,already updated or not okay yeah this will be on the test
4426,09-26,39:07,i want you to remember every sentence here and in the test i may for example i make
4427,09-26,39:13,it give you all the host name uh atp version and everything i want you to
4428,09-26,39:20,specify how will you respond okay so for example how would you
4429,09-26,39:26,respond here i may also ask you to identify the request message how do you write
4430,09-26,39:34,this request message so remember everything here okay
4431,09-28,0:04,all right so for socket programming assignments uh we will talk about two
4432,09-28,0:10,two different directions one is with udp the other ones with tcp through uh 2.01
4433,09-28,0:17,and 2.2 we have already learned that at the transport layer there are two type
4434,09-28,0:22,of protocols udp and tcp the difference between them is udp is unreliable and
4435,09-28,0:28,tcp is reliable that is one major difference that as a developer as a
4436,09-28,0:34,program developer you can choose which protocol to use when you are developing
4437,09-28,0:41,your application so if you choose udp that means you do not care too much
4438,09-28,0:46,about reliability you can tolerate a little bit of data loss for example maybe for the video application you can
4439,09-28,0:52,allow data loss okay because we if we lose some pixels it's fine we can still watch
4440,09-28,1:00,the video like smoothly but if you are developing like
4441,09-28,1:06,um a web service then you have to use tcp because this if it's reliable you
4442,09-28,1:11,cannot afford losing even one detail data okay that's the major difference so today i will basically show you how to
4443,09-28,1:18,do the soccer programming in the socket programming in the in this
4444,09-28,1:23,case our goal is to learn how to build client and server applications that
4445,09-28,1:29,communicate using sockets okay we know there are two different architectures
4446,09-28,1:36,p2p and client server model right so so now we are focusing on client server
4447,09-28,1:41,model but it's fine if you do p2p it's the same thing okay anyway these applications will communicate using
4448,09-28,1:48,sockets if you cannot remember sockets anymore let me help record what we've learned before so the
4449,09-28,1:56,circuit is like a door between application layer and the transporter
4450,09-28,2:02,layer okay so basically the application layer have a num have some processes and
4451,09-28,2:08,they want to communicate okay for example now we have process a and process b so process is like a
4452,09-28,2:16,running application right so you can think this as like an email application
4453,09-28,2:22,or a web application okay so anyway when they are when they code
4454,09-28,2:30,our application are moved to memory to run then we call it a process okay so
4455,09-28,2:36,now the computer to computer communication is actually a process to process
4456,09-28,2:43,communication okay driving process a wants to send a message to process b it
4457,09-28,2:51,needs to push this message through a door okay that door is called socket do you
4458,09-28,2:58,still remember the analogy i gave you before if you want to use the postal service then basically you need to
4459,09-28,3:05,prepare a package and put that package outside the window right so now in this
4460,09-28,3:11,case your door is like the socket then after you push your package outside of
4461,09-28,3:17,your door somebody from the postal office will come to pick up your package
4462,09-28,3:23,and then deliver it for you so it's like this message is picked up at the transport layer and then delay word for
4463,09-28,3:30,you to the other transporter layer at the other side okay at that destination
4464,09-28,3:36,then basically process b can
4465,09-28,3:42,come to pick up this package okay come pick up this message through a socket
4466,09-28,3:48,again okay so that is the socket then in this case you are using the services
4467,09-28,3:56,provided by the internet okay so what you really need to do
4468,09-28,4:02,when you are doing the development is you call some apis okay you call some
4469,09-28,4:10,interfaces so then you can directly directly use the services you don't have
4470,09-28,4:16,to write all the code from scratch so that's something you need to keep in mind okay now let's look at this uh
4471,09-28,4:26,this application so for this application
4472,09-28,4:31,basically uh it has a very simple functions firstly the client reads a
4473,09-28,4:38,line of characters from its keyboard and sends the data to the server you
4474,09-28,4:44,imagine you imagine now you have a client machine and a server machine so this can this one can be a client this
4475,09-28,4:51,one can be a server okay so the client reads a line of characters from its
4476,09-28,4:56,keyboard and sends the data to the server the server receives the data and
4477,09-28,5:02,converts the characters to uppercase then the server sends the modified data
4478,09-28,5:09,back to the client finally the client receives the modified data and displaced this line on its
4479,09-28,5:16,screen so that is the application very simple very simple so basically the main idea
4480,09-28,5:22,is oh the client wants to convert the lowercase characters into
4481,09-28,5:28,uppercase that's all okay the server is providing just one service that is
4482,09-28,5:34,converting the characters to uppercase that's all okay so of course if we think
4483,09-28,5:40,about the web service the other services the service may be much more complicated
4484,09-28,5:46,but here we just use the one very simple very straightforward to
4485,09-28,5:52,demonstrate how the client server model can be deployed or can be implemented
4486,09-28,5:58,using socket programming before i demonstrate the code okay i
4487,09-28,6:03,want to firstly discuss at high level what will happen okay so if you are
4488,09-28,6:09,doing circuit programming with udp you need to pay attention for udp we do not
4489,09-28,6:14,need to do any handshaking kind of thing between the kind of server so we do not need to establish any connection between
4490,09-28,6:21,the client server before we do that exchange okay then in this case the center if the sender wants to send
4491,09-28,6:28,something to the server the sender can ex need to explicitly attach the ip
4492,09-28,6:36,destination address and port number to each packet so it's like
4493,09-28,6:42,there is no established connection between you and your friend if you want to write a letter to a friend you need
4494,09-28,6:49,to explicitly write down the address and the name of your friend on the envelope
4495,09-28,6:55,okay so it's like that then the receiver side will extract this android ip address and phone number from the
4496,09-28,7:02,received package and then reply back okay so like when your friend receives your letter your friend will read the
4497,09-28,7:10,information on the envelope including your name and your address and then
4498,09-28,7:15,extract this this name and address and then reply to the same name the same address okay so that is the udp
4499,09-28,7:23,pay attention for udp the transmitted data may be lost or received out of order okay from application point of
4500,09-28,7:31,view udp provides unreliable transfer of groups of bytes between the client and
4501,09-28,7:39,server so that is udp and i want to skip this part because later
4502,09-28,7:45,i'll show you in the code so if you are doing programming with the
4503,09-28,7:51,tcp pay attention for tcp we must establish a connection first
4504,09-28,7:58,okay that means that means it's like if you want to mail a letter to your
4505,09-28,8:04,friends okay you can imagine there is a huge pipe between you and your friends
4506,09-28,8:10,okay a pipe you need to be firstly established and then what you do is you
4507,09-28,8:16,just drop your letter to that pipe okay then the letter will automatically
4508,09-28,8:21,goes to your friends okay in this case you don't need to specify the
4509,09-28,8:27,destination ip address and destination port number because i mean the pipe is
4510,09-28,8:33,already established with that destination um address and definition name okay so
4511,09-28,8:40,this is like the for tcp so in this case the client must contact the server
4512,09-28,8:47,the server process must first be running okay the first server must have created
4513,09-28,8:52,the socket that welcomes the client's contact this is the same for both
4514,09-28,8:58,udp and tcp um then the client will need to firstly
4515,09-28,9:05,contact the server by creating a tcp socket specifying the ip address phone number of server process okay
4516,09-28,9:13,when the client creates the socket the client tcp established connection to the server tcp so you can see this is
4517,09-28,9:20,basically the pipe part okay the establishing the pipe part is leveraging
4518,09-28,9:26,the connection okay then when contacted by the client the server tcp creates a
4519,09-28,9:32,new socket for the server program process to communicate with the
4520,09-28,9:37,particular client so i will explain this later probably you are already overwhelmed right now and that's totally
4521,09-28,9:44,fine okay that's 225 but anyway from the application point of view okay tcp is
4522,09-28,9:52,providing the reliable in all the byte stream transfer between the client and
4523,09-28,9:57,the server okay so i i'm gonna stop here uh in the
4524,09-28,10:03,slides and i want to give you a demo right now i'm trying to open the
4525,09-28,10:10,terminal and in the terminal so i currently you can see my my code i actually put on the
4526,09-28,10:16,desktop i'm using a mac uh if you are using linux machine okay you will you
4527,09-28,10:22,can do the same thing basically you can deploy your code on your local machine okay or if you are able to connect to
4528,09-28,10:28,athena you can also do the coding on athena directly something you need to
4529,09-28,10:33,pay attention is for this for this exercise because um the scanning code provided by the
4530,09-28,10:40,textbook is using python 2 so please make sure you are using python 2. you
4531,09-28,10:48,should install python to do not install python 3 because otherwise you will run into some problems okay or if you are
4532,09-28,10:56,confident that you can solve the problems those are very minor issues you can solve those issues that's fine but
4533,09-28,11:02,if you are not confident please please use the python too okay here
4534,09-28,11:08,um i'm just going to direct to
4535,09-28,11:13,to my desktop python okay you can see here i have two photos tcp and udp now
4536,09-28,11:21,we can go to tc we can do udp first it's easier okay
4537,09-28,11:27,so in this folder i have two two pieces code client.py and 0.py you can ignore
4538,09-28,11:34,the other one with the sharp sign okay um so usually when you firstly start
4539,09-28,11:40,programming you have not nothing right you need to firstly create a new file on your own okay here i've already
4540,09-28,11:46,created my file so i'm i'm good but if you have nothing there yet you need to
4541,09-28,11:53,create a file so what you can do is you can do for example touch new dot qy okay
4542,09-28,11:59,then you can see here is the new file you can create it then you can do the
4543,09-28,12:06,um editing new py okay then you can do the do the editing
4544,09-28,12:12,so you can see see um do the program in socket whatever okay
4545,09-28,12:18,do the programming here but um here i don't want to do the pro
4546,09-28,12:24,programming lively i'll just show you the code okay foreign
4547,09-28,12:31,i don't want to keep it here you remove it and then now let me firstly run a server
4548,09-28,12:38,program okay so pay attention you always need to run the server program now i
4549,09-28,12:44,just want to give you a sense what what this feel like so and then later i i'll
4550,09-28,12:51,show you the code okay so let me firstly run the server if the server is not there yet the client
4551,09-28,12:57,when the client can't have the server the server is not there so the client will definitely fail so run the server
4552,09-28,13:04,first by using python server.py you can see the server is ready to
4553,09-28,13:09,receive and now you need to start a new window okay new window because this one is
4554,09-28,13:17,already running the server i need another one to run the client okay so do the same thing
4555,09-28,13:23,where are you stop the code
4556,09-28,13:28,dp okay and then i run the client
4557,09-28,13:35,okay you can see the client just giving me a proper message to say input the lower case sentence okay you can say i
4558,09-28,13:43,like computer science okay and then it will return i like
4559,09-28,13:50,computer science in uppercase that's all that's how the code works
4560,09-28,13:57,okay so the for tcp and udp is the same thing okay for tcp and udp is the same thing
4561,09-28,14:04,exactly the same functionality but they are deployed using
4562,09-28,14:09,um different protocol as transport layer so why is using udp and otherwise using tcp okay so now i want to show you the
4563,09-28,14:17,code so let me show you the code
4564,09-28,14:26,[music] um let's see the client first
4565,09-28,14:34,okay so this is the client code this is the client-side code
4566,09-28,14:43,okay so at the client side you can see firstly what we need to do
4567,09-28,14:49,is do from socket import asteroid so this means this means you
4568,09-28,14:55,want to import the library for uh for socket okay then after that because the
4569,09-28,15:00,library is imported so you can directly use some of the functions in this library okay then the server name server
4570,09-28,15:09,name equals to 127.0.0.1 pay attention here because i put my
4571,09-28,15:17,server and client on the same machine on the same machine so here the ip
4572,09-28,15:23,address is actually the local the local machine okay this is
4573,09-28,15:28,127.0.0.1 is for local machine if you are using f athena so for example
4574,09-28,15:35,if you put your client as on your local machine and you put your server on
4575,09-28,15:40,athena then here the server name should be athena's ip address or athena's name
4576,09-28,15:46,so for example you can put athena.ecs.csus.edu here or you can put
4577,09-28,15:52,an ip address of athena here okay so pay attention to that that is
4578,09-28,15:58,very important on the slides on the slide here the server name is type at
4579,09-28,16:04,equal to hostname so some students when they do the programming they follow the
4580,09-28,16:09,slides and then they directly type everything here they directly typing uh
4581,09-28,16:15,hostname equal to hostname but what is host name you didn't really specifies host name right
4582,09-28,16:22,um the we do not have any machine called hostname so then that's why their code
4583,09-28,16:27,didn't work and then the email me say hey professor i cannot figure out what why this code doesn't work it's actually
4584,09-28,16:34,because of this so pay special attention to the server name
4585,09-28,16:39,and then the second the second line is some report equal to one two zero zero one here what i'm
4586,09-28,16:48,using is one two zero one that means i'm contacting the server
4587,09-28,16:54,at port 12001 that means the server needs to listen to this port
4588,09-28,17:00,okay you can use any you can use other ports you don't need to use one two zero
4589,09-28,17:05,zero one this is just a random phone number so pay attention uh for this one
4590,09-28,17:11,you can google online what are the port numbers available it's usually from one to sixty five thousand uh
4591,09-28,17:20,536 i i'm not sure if this is accurate but try to avoid those famous port
4592,09-28,17:27,number like 80 like 25 okay because those ones are reserved okay so you
4593,09-28,17:34,cannot use those ones that's the second thing you need to pay attention and then client stock is equal to socket af
4594,09-28,17:42,internet stock d gram here this means we are calling a function called socket
4595,09-28,17:49,and this socket we are this function will help us create a new
4596,09-28,17:54,socket like a door okay it is using address family internet which means
4597,09-28,18:01,using the ip address and the sock d program uh sorry soccer diagram circuit
4598,09-28,18:07,gram here means we are using udp that is
4599,09-28,18:12,very important that is where you slash it specify you use udp okay
4600,09-28,18:18,so after you create this then this is like uh this is a socket is created and
4601,09-28,18:24,so we later we can refer to this socket as client socket okay after that then we
4602,09-28,18:33,we create another variable called message message equal to raw input
4603,09-28,18:38,this is a function called also okay this function code will give a proper message so the prop
4604,09-28,18:46,message here is called the input lowercase sentence you can type in anything else you can type place type in
4605,09-28,18:53,your sentence or anything any prop message you like okay and after that it will also collect the
4606,09-28,19:00,keyboard input and put this input into the message
4607,09-28,19:06,okay so then now the message has your keyboard input after that what we do is we use this
4608,09-28,19:14,client socket okay do you remember we already established this client socket we use
4609,09-28,19:20,this one and call it some function called send two okay pay attention here we need
4610,09-28,19:29,to use send to not send okay i explain why so in this set of two function first
4611,09-28,19:34,you need to attach the message and then later you will need to
4612,09-28,19:39,uh give the server name and server port so we know server name is ip address so
4613,09-28,19:45,report is the port number do remember i said before
4614,09-28,19:50,because we are using udp there is no connection established yet so that's why
4615,09-28,19:56,you have to you have to explicitly specify the server name and
4616,09-28,20:03,the server port or the destination ip address and that's important so this is how you do that okay after that you just
4617,09-28,20:11,wait okay so here you can say uh we will call another function call called
4618,09-28,20:16,receive from so you will just receive from the server okay so here 20 48 is
4619,09-28,20:24,the buffer size okay it's the buffer size and then after you receive the
4620,09-28,20:29,message the response message from the server you will extract that message and
4621,09-28,20:35,get two wearables one is a two pieces of
4622,09-28,20:41,information basically one piece of information is the modified message which means the message is already sent
4623,09-28,20:47,to the server the server has already converted it to uppercase and then send
4624,09-28,20:53,it back so now you can you can put that message into the modified message this is the variable name and also there is a
4625,09-28,21:01,second piece of information contained in this uh data you received so the second piece of information is the server's
4626,09-28,21:08,address the service address so you will put it into server address
4627,09-28,21:14,because actually here you already know the service address before right you specify the server name so you do not
4628,09-28,21:20,really need this right now but still when you want to put it into some variable okay and then after that you
4629,09-28,21:27,print the modified message and then you close the socket okay you close please
4630,09-28,21:33,pay attention after this is all things are done you need to close the client
4631,09-28,21:40,socket that is very important okay because otherwise this socket will be
4632,09-28,21:46,open okay always open and it will basically waste the resource of the client side
4633,09-28,21:53,and also the server side okay so this is uh the client code client
4634,09-28,22:00,code and um let me show you the server code
4635,09-28,22:20,so this part is the server code okay this is the server code so firstly at
4636,09-28,22:27,the server side the server side you also need to do socket from socket import import the sim library and pay attention
4637,09-28,22:35,here you can see the server port number is exactly the same as the one we
4638,09-28,22:42,specified in the client so usually what we need to do actually is you firstly specify the one in server and then use
4639,09-28,22:50,the same one in the client that's usually uh the order okay then the
4640,09-28,22:55,server side need need to also create a new socket by using socket function and
4641,09-28,23:01,here we can see it is also using udp if you use udp and client sign then you
4642,09-28,23:06,need to use it at the server side okay then later we need to bind bind this
4643,09-28,23:12,server uh port 12001 okay with this socket so then the
4644,09-28,23:19,server socket will uh the several will be always listen to this port at one two
4645,09-28,23:25,zero zero one okay and then after that the server is ready the server will say hey i will print a message to say hey
4646,09-28,23:32,the server is ready to receive okay and then after that do remember we learn
4647,09-28,23:37,when we learn client server model we said the server will have to be always on right so the server will run a while
4648,09-28,23:44,loop forever never stop okay so in this while loop you can see it
4649,09-28,23:51,will firstly do receive from it doesn't do any send it to yet okay because the
4650,09-28,23:57,server is waiting to be contacted so the server will do receive from
4651,09-28,24:03,using the server socket and the buffer is still 2048
4652,09-28,24:08,it will extract two pieces of information again the same thing as here as here in the client side
4653,09-28,24:14,okay do you remember okay so here the two pieces of information is firstly it
4654,09-28,24:22,extracted the message received okay secondly it will extract the address of
4655,09-28,24:29,the client okay because it is contacted by the client but it doesn't know the ip
4656,09-28,24:35,address of the client ip address port number so that's why actually this
4657,09-28,24:41,socket will will extract the client address and then later reply to this
4658,09-28,24:46,same address okay then after that after that it will call
4659,09-28,24:53,another function call called upper it will basically convert this message into our practice and then store it into
4660,09-28,25:01,a new variable called modified message after that as you can imagine the server
4661,09-28,25:07,circuit will basically call another function called section 2. so senator we used this before right in the client
4662,09-28,25:14,code so it will send to what send to
4663,09-28,25:19,send it to the client address okay send it to the client address
4664,09-28,25:25,send what send the message send the modified message okay here you can do
4665,09-28,25:31,the encoding or you can just send modify the message that's also fine but please
4666,09-28,25:36,remember if you do encoding here then you're like in the at the client side you also need to do the uh decoding when
4667,09-28,25:43,you receive it but it's a it's a fine so this part is you have the flexibility okay
4668,09-28,25:50,so that is the client and server code for t for udp okay so let me
4669,09-28,25:58,wait
4670,09-28,26:03,let me show you the code of tcp tcp is a little bit different so let's
4671,09-28,26:09,see the um aligned first okay so this is the client
4672,09-28,26:16,code for tcp we have only eight minutes left so i want to make this faster so firstly
4673,09-28,26:24,firstly you can say we need to import the socket and we
4674,09-28,26:30,specify the server names report we create a new socket called a client
4675,09-28,26:36,socket it's the same but there is one thing you pay attention here
4676,09-28,26:41,it's using stock stream not sock d gram
4677,09-28,26:47,sockscream means we are using tcp that's how you choose okay then later after
4678,09-28,26:54,that it's very important this is very important later when you firstly
4679,09-28,26:59,establish a connection with the server okay do remember in udp we do not need
4680,09-28,27:06,to do this but in tcp we firstly need to establish a connection with the server
4681,09-28,27:13,the server name is this one the support is this one and then it will call raw
4682,09-28,27:18,input okay give this prop message take the input and put it into something called
4683,09-28,27:24,sentence okay later the client socket will call function called send not send
4684,09-28,27:32,to incent function we only need to drop the
4685,09-28,27:37,sentence there the message there we do not need to specify the destination ip
4686,09-28,27:43,destination port the reason is because a pipe is already established between the
4687,09-28,27:49,sender and the receiver we do not need to explicitly specify the name the other the address
4688,09-28,27:56,definition address and destination port that's the reason pay attention to this this is very important
4689,09-28,28:02,and then later we will do receive the client socket will do the receive
4690,09-28,28:07,message and then do the decoding okay so finally print from server the
4691,09-28,28:16,modified sentence so basically the received message is put into the modify
4692,09-28,28:21,sentence and then we'll print out this uppercase sentence after that the client
4693,09-28,28:27,socket will close okay so pay attention here in the client socket really close
4694,09-28,28:33,but in the server socket do you remember in this for example even for udp even
4695,09-28,28:38,for udp the server socket network loads because because
4696,09-28,28:44,the server should be always on it will be there forever okay so that is a tcp
4697,09-28,28:53,and then let's uh
4698,09-28,28:58,see the server code foreign
4699,09-28,29:11,okay so this is uh the tcp code the tcp server side
4700,09-28,29:17,same thing import socket specify the server ip address and then create a
4701,09-28,29:24,server size socket using sock stream because this is a tcp okay and then find
4702,09-28,29:31,the cell reports with this socket to listen to this portfolio ever then do
4703,09-28,29:37,the listening and then we do print this is ready okay so after that it will
4704,09-28,29:43,enter a while loop and pay special attention this part is very important
4705,09-28,29:48,in the while loop we can see the server circuits okay is accept
4706,09-28,29:55,incoming requests so after the accept
4707,09-28,30:01,it will do two things the first thing the first thing is it
4708,09-28,30:07,will extract the address of the client side and put it into address
4709,09-28,30:12,okay and also it will need to create another socket
4710,09-28,30:18,called connection call socket okay so what does this mean
4711,09-28,30:24,this is a this is very interesting so tcp is different from udp in udp we
4712,09-28,30:31,have only one server socket that is called the server socket that server socket is uh welcoming the incoming
4713,09-28,30:38,message and then also do the service right particip is different tcp have two
4714,09-28,30:45,types of server socket so this one the server socket is the one for welcoming
4715,09-28,30:52,it's like when you go to a bank somebody is standing there welcoming you so that
4716,09-28,30:57,is the server socket but that person that person will not do the real
4717,09-28,31:02,business with you that person will not serve you directly instead that person
4718,09-28,31:07,will assign you to some uh teller sitting behind the window and say hey
4719,09-28,31:15,please help this uh this this person um he or she is one wants to withdraw
4720,09-28,31:22,some money right and then the person sitting behind the window is doing the
4721,09-28,31:27,work or doing the service for you so that person is this connection socket
4722,09-28,31:32,okay that means in tcp tcp can receive can welcome a number of incoming
4723,09-28,31:39,requests okay and enough a number of incoming clients and extract their address and then assign that request
4724,09-28,31:47,choose a new socket called connection socket this connection socket will do
4725,09-28,31:53,the service for for you okay so that's why you can see later this connection socket is not the server socket it's the
4726,09-28,32:00,connection socket receive the message and put it into something called sentence and then convert this sentence
4727,09-28,32:07,into uppercase put it into capitalize sentence and then later send this capitalized
4728,09-28,32:13,sentence to the client and again you can see it's using send not to send the tube
4729,09-28,32:18,because as we said a connection is already established between the server
4730,09-28,32:24,and the client what we need to do is we only drop the message we don't need to specify the destination ip address and
4731,09-28,32:31,destination port okay and then after that interestingly you can see the
4732,09-28,32:38,connection socket need to be closed after everything is done we need to
4733,09-28,32:43,connect the close the connection socket that means what that means when you go to the bank you talk to the person who
4734,09-28,32:51,sits behind the window and that person after he finished the service to you he
4735,09-28,32:56,or she can leave okay they can leave to take a rest they don't have to be there forever
4736,09-28,33:02,but the person who stands in front of the door the welcoming person can never leave
4737,09-28,33:09,because he or she will be there forever to welcome the newcomer new new
4738,09-28,33:15,customers it's the same thing here you can see we close the connection socket but we never
4739,09-28,33:22,close the server socket that's the difference okay never close the server
4740,09-28,33:27,socket so in the test i may ask you the question how many types of socket server
4741,09-28,33:35,sockets do you need to create in tcp you know we need to create at least two types let me ask you how many do we need
4742,09-28,33:42,to create how many types do we need to create in udp they you know in udp you
4743,09-28,33:48,only need to create one type okay i may also ask you um do you need to climb close the client
4744,09-28,33:56,socket you should know yes we need to close the client socket do you need to
4745,09-28,34:02,close the server socket you never close the server socket which is welcoming
4746,09-28,34:07,right but you can close the connection socket the one which is doing the real
4747,09-28,34:12,service for you in tcp okay so those are all the things you need to understand if
4748,09-28,34:18,you understand this this very basic principles you will know the answer to those questions okay
4749,09-30,0:02,foreign it talks about the major application of
4750,09-30,0:10,email and basically we will discuss some of the protocols like smgp pop through
4751,09-30,0:17,imap and we will show you how the email works okay some of you may think oh okay
4752,09-30,0:24,when i send an email to somebody else then the email is going from my computer
4753,09-30,0:32,directly to the other computer is this true that is not true okay that is not
4754,09-30,0:38,correct actually there are something in between between your computer and the
4755,09-30,0:44,other computer okay so let's see what is happening what is the entire process for sending email firstly for email you
4756,09-30,0:51,should know there are three major components you have user agent user agent means
4757,09-30,0:58,those um mail also known as a mail reader okay so for example outlook maybe the user
4758,09-30,1:06,agent the iphone mail client may be the user agent the user agent is the one you used to read emails compose emails send
4759,09-30,1:15,emails etc okay so that is the software or the application you use to do those
4760,09-30,1:24,kind of composing editing reading things okay so that is the user agent that is a
4761,09-30,1:29,one very important component this one this user agent is similar to
4762,09-30,1:35,the wire of to the web browser in web service okay and then the second
4763,09-30,1:43,component is mail server so mail server are the ones to help you send email out
4764,09-30,1:51,and the mail service will exchange emails later i will show you the entire process then you will know how the mail
4765,09-30,1:58,server work okay so basically on mail server on each meal server you can see
4766,09-30,2:04,there is a outgoing message queue and also a user mailbox
4767,09-30,2:10,okay so the ongoing message queue is basically a queue
4768,09-30,2:16,coding all the outgoing emails so those emails may all be sent out one by one
4769,09-30,2:22,okay and then the user email box is uh is just like your mailbox at home right
4770,09-30,2:30,so so the poster postman will send those mails into the mailbox so you use those
4771,09-30,2:38,user mailbox to receive mails okay so to receive emails usually each account has
4772,09-30,2:46,a one mailbox okay so then those mail server will assign the emails to each
4773,09-30,2:54,user okay so that is the two things with the email server okay
4774,09-30,3:00,and again those are just machines okay user agents is on a computer and mail
4775,09-30,3:06,server is just a one machine um in addition to those we also need
4776,09-30,3:11,some protocol to help them understand each other okay the protocol we use is
4777,09-30,3:18,called simple mail transfer protocol okay so those are the three major
4778,09-30,3:26,components for email and now let's look at
4779,09-30,3:32,now let's look at the mail server okay the mail server as i mentioned contains
4780,09-30,3:39,the mailbox a message queue okay and also it will implement the smtp
4781,09-30,3:46,protocol so the mailbox basically contains the incoming messages for user the message
4782,09-30,3:52,queue will have outgoing messages okay the smtp protocol is between the
4783,09-30,4:01,mail servers okay or sometimes between the user agent and the mail server okay
4784,09-30,4:07,so basically in this smtp protocol we also have client and server client is
4785,09-30,4:14,the one sending mail out okay and the server is the one receiving the mails
4786,09-30,4:21,okay so that's how we classify the clients and servers
4787,09-30,4:27,then for smtp for smtp smtp is a protocol and application layer
4788,09-30,4:35,if you still remember the five layer
4789,09-30,4:51,okay if you still remember to have five layers we have application here transport layer network layer data link
4790,09-30,4:57,layer and also the physical layer so add application layer we know we learned the protocol step right we said for each
4791,09-30,5:05,layer we need some protocols okay for application layer if if you still if you
4792,09-30,5:12,recall what we have learned in the web service okay application layer the web
4793,09-30,5:17,service is using http do you remember
4794,09-30,5:22,and transportally as we said it will use usually it will use tcp because tcp is
4795,09-30,5:28,reliable right so that is for web service then how about for email
4796,09-30,5:37,for email pay attention the application layer is using smtp
4797,09-30,5:48,of course later we will learn there are actually some more protocols for example popular imap they
4798,09-30,5:56,are all the protocols used for email but here the most commonly used one is smtp let's discuss this first okay
4799,09-30,6:02,application layer we can use smtp and then transport layer
4800,09-30,6:08,what kind of protocol should we use should we use tcp or udp
4801,09-30,6:15,the answer is a tcp why because tcp is
4802,09-30,6:21,reliable for email service of course we cannot afford losing data right so that's why we are
4803,09-30,6:28,using tcp okay all right and also based on what we have learned
4804,09-30,6:35,from the sake programming assignment we know those applications will when they are
4805,09-30,6:41,um communicating they are the motions are actually listening to a port right
4806,09-30,6:46,so for example the server we are listening to a port and the client will also use a port to connect with the
4807,09-30,6:53,server so then for web service we know the port used is 80. that means the server is listening to
4808,09-30,7:00,port 80 okay of course we do not limit the port used by the client the client
4809,09-30,7:06,can use like a random port okay but server will always web server will always listen to quality
4810,09-30,7:12,for email is similar okay the email server will always listen to port 25.
4811,09-30,7:22,okay 425 the client client can use other phone numbers that
4812,09-30,7:28,is also fine okay and uh for smtp it's using direct
4813,09-30,7:34,transfer which means if the smtp is used between two servers okay two servers
4814,09-30,7:40,then the sending server will communicate directly with the receiving server okay and also there are three phases of
4815,09-30,7:47,transfer the first phase because it is using tcp
4816,09-30,7:52,okay so firstly we know if you it is using tcp it must establish a connection
4817,09-30,7:58,first okay before the data exchange they must firstly establish a connection the
4818,09-30,8:04,connection is like establish a pipe between these two machines okay so that
4819,09-30,8:09,is the handshaking's phase so this is a four
4820,09-30,8:18,foreign okay handshake is used to establish tcp
4821,09-30,8:25,connection after the connection is established then they can transfer messages they can exchange the messages
4822,09-30,8:32,okay finally after everything is done we will close this uh connection okay so
4823,09-30,8:39,those are the three phases of transfer and then for the interaction uh basically they will use commands and
4824,09-30,8:47,response all those commands and responses are in oscar code so it's it's a it can be understood by human being
4825,09-30,8:54,okay it's just like http do you remember in http we have the request message
4826,09-30,8:59,which contains get etc okay and we also have the response message which contains the status code
4827,09-30,9:06,and all those phrases it's similar for smtp is the same thing we will have
4828,09-30,9:12,requests or commands and then we will have response from the server so the
4829,09-30,9:18,server will respond with some status code and also phrase explain explaining the status code okay uh those are all
4830,09-30,9:26,the information you need to know now let's look at an example this example will show you how the email is
4831,09-30,9:34,really so how this how the process is for for
4832,09-30,9:40,the email okay so firstly we have a center alice
4833,09-30,9:47,and we also have a receiver robot okay
4834,09-30,9:52,now we are just looking at one way okay alice is sending a message to bob
4835,09-30,9:57,so the first step alex will need to use the user agent
4836,09-30,10:03,to compose a message to bob at some school.edu
4837,09-30,10:08,okay and then alice is a user agent will send this message to her mail server
4838,09-30,10:15,the message is placed in the message queue so basically
4839,09-30,10:21,this message is put here in the message queue
4840,09-30,10:27,then the client side of smtp which means client-side which means here because
4841,09-30,10:33,alice is sending right so that means l is email server is the client side so alice mail server
4842,09-30,10:41,will need to open a tcp connection with bob's mail server
4843,09-30,10:46,okay and say hey can i connect with you i have something for you okay and bob's
4844,09-30,10:52,mail server say sure let's connect and then they establish a connection after that after that the smtp client which is
4845,09-30,11:01,the analysis mail server we all sent the message over this tcp
4846,09-30,11:07,connection and put it into the mailbox for bob
4847,09-30,11:17,so this can be bob's mailbox okay so eventually eventually bob will invoke
4848,09-30,11:26,his user agent which can be outlooked for example to read the message okay
4849,09-30,11:31,probably i'll see hey do i have any messages that the mail server girl say
4850,09-30,11:36,yes there is one incoming message to you okay this is sent to bob that is the
4851,09-30,11:42,entire process okay here in this process
4852,09-30,11:48,the alice may use smtp
4853,09-30,11:53,to connect to alice's mail server and bob
4854,09-30,11:58,bob's mail server and alice mail server may also connect with each other using
4855,09-30,12:04,smtp okay the protocol used between
4856,09-30,12:09,alice melson and bob's master is also smtp the protocol between both male
4857,09-30,12:15,server and bob's user agents um is not smtp we'll we will explain
4858,09-30,12:20,this later why okay so currently you need to know okay smtp is you can be
4859,09-30,12:26,used between ls user agent and lsnl server and also
4860,09-30,12:32,um alice's mail server and bob's mail sir okay so those are the
4861,09-30,12:39,things you need to know first now let's look at the smp interaction okay pay attention this is smtp
4862,09-30,12:48,interaction which means this can happen between
4863,09-30,12:53,alice user agent and alice's may also work or between alice email server and
4864,09-30,13:01,bob's mail server okay so this is an smtp protocol this
4865,09-30,13:06,can be used between two machines okay so now let's look at the uh the entire
4866,09-30,13:14,introduction okay so firstly s represents server
4867,09-30,13:21,c represent light
4868,09-30,13:28,okay the server person is saying 220 hamburg.edu this is like a
4869,09-30,13:36,self-introduction or the 220 is the response code and it is introducing
4870,09-30,13:42,itself say hey i'm hamburger.edu okay the client will say hello to be polite
4871,09-30,13:49,right say hello this is uh crips dot from so it is basically introduced it itself
4872,09-30,13:56,the client is introduced himself okay and then those server will reply with
4873,09-30,14:02,250 again this is the status quo so the server girl say hello pretty stuff from
4874,09-30,14:09,pleased to meet you okay then the client will say hey i have
4875,09-30,14:14,one mail okay this mail is from
4876,09-30,14:20,alice at prep stuff run okay and pay attention pay attention here
4877,09-30,14:25,hello h-e-l-o and mail from are all commands they are commands used for smtp
4878,09-30,14:33,direction it's just like the get in the web service in the http request
4879,09-30,14:41,message okay this this is something you cannot change so some of you may think oh there's a typo in hello no this is
4880,09-30,14:49,how we write it okay hello it's hel it's not h-e-l-l okay
4881,09-30,14:54,and then after that the server say um okay let me check the sender's email
4882,09-30,15:02,address alice at crypto from seems okay so it sends it says the sender is fine
4883,09-30,15:07,okay sender okay then the client will say okay let me
4884,09-30,15:12,tell you who is the recipient who is the receiver so this receiving email address
4885,09-30,15:19,should be bob at hamburger.edu so rcpt 2
4886,09-30,15:24,receipt 2 is is another command telling the receiving email address okay then
4887,09-30,15:33,the server reply with 250 bob hamburger.edu resume okay so basically
4888,09-30,15:39,it's checking the receiver's email address and see everything is fine after that after that the client will say data
4889,09-30,15:47,so what does this mean this is another command data means i'm
4890,09-30,15:53,ready to input the data the data for the message okay then the server will say
4891,09-30,15:59,please enter your your mail okay and the mail with a dot or a period on
4892,09-30,16:07,the line by itself okay so that means what that means okay you can start enter the email
4893,09-30,16:13,but how do i know um which is the end of your
4894,09-30,16:19,email right so you can denote the end of email with a single period online by the
4895,09-30,16:25,by itself then the client will say okay let me type in the data okay data is
4896,09-30,16:42,okay this is the message content data is do you like catch up
4897,09-30,16:48,how about pickups okay that's that is the message content after that
4898,09-30,16:54,it use one single dot or one period on a
4899,09-30,17:01,line by itself to denote this is the end of the message
4900,09-30,17:12,okay so then the server can see okay the message is accepted for delivery
4901,09-30,17:19,then the client say okay i'm done so client can quit the server will say
4902,09-30,17:26,221 hamburg.edu closing connection so this means okay this entire session stuff okay usually here if the client
4903,09-30,17:35,has another mail okay if the client has another male then
4904,09-30,17:40,client will directly say mail from again here
4905,09-30,17:50,received two data so it can continue before it quits
4906,09-30,17:56,okay if it has another email for that mail server if nothing else then it just
4907,09-30,18:02,quit um so you can see uh this can be this can it can continue for more than one
4908,09-30,18:09,email okay so this is the entire process okay we you can actually try this at
4909,09-30,18:16,home okay you can try to talk to a email server
4910,09-30,18:23,um so let me give you a demo right now so in this demo i'm going to give you a
4911,09-30,18:30,demo in this demo okay i'm talking to a server directly so the
4912,09-30,18:36,server is
4913,09-30,18:44,this is the receiving server as you can see here um
4914,09-30,18:49,smtp.csus.edu i'm going to talk to this server directly okay
4915,09-30,18:55,and when i'm talking to this server directly foreign
4916,09-30,19:05,here to connect to that server directly
4917,09-30,19:11,with telnet
4918,09-30,19:17,okay with the telnet and and here as you can see i bypass
4919,09-30,19:25,this entire thing i bypass the client user agents and also
4920,09-30,19:31,the client mail server okay that means i don't want to go through the
4921,09-30,19:37,authentication because if you are using uh the user agent at the center side you
4922,09-30,19:43,have to firstly log into something right and then talk to the mail server alice
4923,09-30,19:48,sanders mail server okay and then the center may also revealed talk to receive resume server but here in the demo i
4924,09-30,19:56,want to show you i can actually bypass the sender's mail server and directly
4925,09-30,20:02,talk to the receivers mail server to send a message to the receiver
4926,09-30,20:08,okay and then i can show you um i can indeed receive a message okay
4927,09-30,20:15,in my email address in my xiao y a n dot
4928,09-30,20:20,dot sign in your email address okay that is the content for the demonstration let
4929,09-30,20:25,me show you that okay so this is my terminal this is my
4930,09-30,20:31,mailbox currently i have one just one email there now i want to demo you
4931,09-30,20:37,the process okay let me tell nuts
4932,09-30,20:43,to smtp
4933,09-30,20:53,and pay attention pay attention i have already used the vpn to connect back to campus network if you do not connect
4934,09-30,21:00,back to campus network currently it does not the campus network will block you it does
4935,09-30,21:06,not allow you to talk to the server directly i believe this is a full security reason okay
4936,09-30,21:11,and now i'm trying to talk to smtp.csus.edu at 25
4937,09-30,21:18,yes you can use global protect to connect okay and then you can see i'm now connected
4938,09-30,21:27,to that machine okay to that machine so what i can do next to remember the first
4939,09-30,21:32,uh you can see firstly it says 220
4940,09-30,21:38,smtp.sexlink.csus.edu this is the self introduction this is the 220 hamburger.edu part so it is introducing
4941,09-30,21:45,self it says okay the real name for me is actually
4942,09-30,21:50,smtp.stacklink.csus.edu okay so then the next thing i need to do is i need to be
4943,09-30,21:58,um polite i say hello this is gmail.com i pretend to be gmail.com as you can
4944,09-30,22:04,pretend to be something else okay i pretend to be gmail.com
4945,09-30,22:10,and this hello i'm using capital letter but actually you can use lowercase it doesn't matter okay but i just want to
4946,09-30,22:16,distinguish the commands with the other uh information here and you can see the server is seen hello
4947,09-30,22:23,back okay let's see hello back and then i say mail from i have a mail from
4948,09-30,22:36,x-i-a-o-y-a-n20060 gmail.com this is my personal email address okay
4949,09-30,22:43,pay attention i didn't sign into gmail.com i'm just pretending i'm i'm this in this
4950,09-30,22:50,gmail address but i didn't really sign into gmail and then the sender said that the server
4951,09-30,22:58,respond with center okay so and he said it's okay then i can see receipt to i
4952,09-30,23:06,want to send an email to xiaoyan dawson at csus.tvu
4953,09-30,23:12,okay and then it checks the recipient email
4954,09-30,23:18,address and say this is okay the next thing i'm gonna do is say okay i have
4955,09-30,23:24,some i'm ready to input data okay then the server say okay start the
4956,09-30,23:29,email in the mail input end with uh this single dot
4957,09-30,23:35,on one line by itself so then i began to type in my
4958,09-30,23:40,data subject test okay
4959,09-30,23:46,this is just a test message okay
4960,09-30,23:53,okay and you can see it is cute for delivery
4961,09-30,23:58,okay i want to check my email address and see if i receive that sometimes because this
4962,09-30,24:04,is sent this is sent through uh it's not directly through the uh
4963,09-30,24:11,original way it may goes to like junk you see this
4964,09-30,24:18,okay this is actually the junk mail
4965,09-30,24:23,this is the meal i received okay so and this close recipient but you can see
4966,09-30,24:29,this is the test this is just a test message okay so i can delete this
4967,09-30,24:35,if you have other emails you can directly continue say mail
4968,09-30,24:40,from ah let's say
4969,09-30,24:51,about what whatever.org okay
4970,09-30,24:57,and then you can do receipt two
4971,09-30,25:08,okay and then you can see i'm ready to input data
4972,09-30,25:14,i can see subject mutation
4973,09-30,25:23,okay foreign
4974,09-30,25:32,house
4975,09-30,25:43,okay then we'll end this message it is cute for delivery again
4976,09-30,25:53,not sure if comes in see you can see each other
4977,09-30,26:00,as you can see this email is also received okay although it's marked at
4978,09-30,26:06,junk okay but you can see i can indeed directly talk to the mail to the mail
4979,09-30,26:13,server exact state dot edu okay so the reason is marked as
4980,09-30,26:18,junk is because my user agent is actually deploying some
4981,09-30,26:23,of the filtering mechanism to filter those messages that are suspicious okay
4982,09-30,26:31,so that is what i want to demo as we mentioned here it is directly
4983,09-30,26:38,connecting to the receiver's mail server it didn't go through the demo in a demo
4984,09-30,26:44,we didn't go through the sender's mail server that means we didn't do any authentication okay that will create a
4985,09-30,26:52,security problem as you can see just now i can i can use biden's mail server i
4986,09-30,26:58,can so find those email address i can use anybody email address i can use your
4987,09-30,27:03,professor's email mail email address or your friend email address or anybody
4988,09-30,27:09,else email address so you can pretend to be anybody that is called emails booking okay email
4989,09-30,27:17,supporting when you can pretend to be anybody then you can do a lot of bad things for example you can include a
4990,09-30,27:25,link in that email and say hey you need to change your
4991,09-30,27:31,password asking you to connect click on that link
4992,09-30,27:37,and to change the password but actually that link may be a phishing website
4993,09-30,27:44,okay it may direct you to some fake website for example to your
4994,09-30,27:51,bank to chase.com and then you type in your username password then they
4995,09-30,27:56,directly connect collected connect collect your username and password then they can use your username and password
4996,09-30,28:03,later to sign into your bank account and withdraw the money okay so you can imagine what kind of
4997,09-30,28:09,things can happen that's why in my class i always tell my students
4998,09-30,28:15,when you receive an email from somebody no matter how how much you trust this
4999,09-30,28:22,person or you trust this email address do not directly click on that link provided in
5000,09-30,28:30,the email okay try to type the link on your own
5001,09-30,28:35,okay type the url on your own in the web browser and then click the use the the
5002,09-30,28:41,then and you can change the password what do do something else okay
5003,09-30,28:46,because you never know you never know they may just provide like for amazon for example amazon.com they can see
5004,09-30,28:53,amazon um a.com you you may not notice this one
5005,09-30,28:58,actual letter in that okay but it may direct you to some fishing website and
5006,09-30,29:03,sometimes this link may direct you to download some children horse onto your
5007,09-30,29:08,machine okay that's also possible so pay attention to that that is a one secured
5008,09-30,29:13,challenge actually okay um so here in this uh this is this is a
5009,09-30,29:20,screenshot basically shows shows you the entire process we have just demoed if
5010,09-30,29:26,you are interested you can do this on your own okay you can see if you can receive the email and this is what i did
5011,09-30,29:34,you can use any fake email address it doesn't need to be legitimate email address okay but if it is a legitimate
5012,09-30,29:41,email address then um it can be useful for email spoofing okay
5013,09-30,29:46,some final words about smtp smtp use persistent connection do you
5014,09-30,29:54,still remember the persistent http and non-person hdp when we talk about the
5015,09-30,29:59,web service right persistent gtp allows you to send
5016,09-30,30:05,multiple objects in one connection okay
5017,09-30,30:11,um and non-president http does not allow you to do that you you can only send a one object in one connection
5018,09-30,30:18,okay so as mtp is using precision connection that's why as you can see in
5019,09-30,30:24,the demo i can send two emails in one tcp connection and after that i can
5020,09-30,30:30,close the connection right so smtp requires the message to be asked we all
5021,09-30,30:36,know that and we know that it also uses a single period to determine the end of
5022,09-30,30:42,message okay so if you compare this with http http is using a pony protocol sm is
5023,09-30,30:51,used in printing protocol which means foreign
5024,09-30,31:03,from the server okay and smtpu is a pushing protocol which
5025,09-30,31:08,means it's actually the silver pushing uh oh sorry it's actually
5026,09-30,31:15,um the the client side is pushing the mail to the server side okay as you can see
5027,09-30,31:22,here you can see here alice is our user agent is pushing to at
5028,09-30,31:29,least mail server and my alice mail server is pushing to bob's mail server
5029,09-30,31:34,so these are all pushing that's why we call smtp is a pushing protocol for web service basically the
5030,09-30,31:42,final firefox the client will poor or request a web page from the server
5031,09-30,31:49,it's different direction okay so pay attention to that in the test i may ask you is http a cooling protocol pushing
5032,09-30,31:57,protocol okay and they both have the oscar command and
5033,09-30,32:04,response interaction the stats codes okay uh in http each object is encapsulating its own response message
5034,09-30,32:10,and the smtp multiple objects can be sent in multiple
5035,09-30,32:17,multipart messages okay and this is the message format you may
5036,09-30,32:22,have the header and body we know the header lines are usually true from and
5037,09-30,32:28,subject okay a position these are different from the commands these are different from
5038,09-30,32:35,the mail from 360 commands okay these are just the header lines showing the message okay the body is in oscar code
5039,09-30,32:43,ask the characters okay so that is uh that is the
5040,09-30,32:49,um smtp and pay attention as we said
5041,09-30,32:55,this is a pushing protocol this is a pushing protocol but between these two can we push
5042,09-30,33:03,we cannot okay between these two we cannot push the reason is because
5043,09-30,33:09,when we push we will need to make sure the other side is always on okay for
5044,09-30,33:16,example when alice is pushing this sandra's mail server is always on
5045,09-30,33:22,so that's why he she can push and when cellular muscle is pushing the
5046,09-30,33:27,receiver's mail server is always on that's why she can push this machine can push okay but when
5047,09-30,33:39,when the receiver's mail server wants to push a message to the user agent can we
5048,09-30,33:44,push we cannot because the user agent may not be always on
5049,09-30,33:49,it may be off if it's off then the receiver's mail server has to try again again and again it's a list of resource
5050,09-30,33:56,it's like if the person personnel is trying to deliver a package for you and you need to sign
5051,09-30,34:02,okay then if you are not at home then they have to try again again so apparently that's not a good idea a
5052,09-30,34:09,better idea is okay do not push let's pull so how do we pull
5053,09-30,34:15,it's basically the user agents will connect with the mail server
5054,09-30,34:23,and ask do i have any messages when this user agent is on it will ask do i have
5055,09-30,34:29,any messages that if yes then the receivers may also will give send this
5056,09-30,34:35,message to the user agent okay that's the reason why we cannot use smtp
5057,09-30,34:45,because smtp is a pushing protocol so we cannot use pushing protocol between these two we cannot use a push in
5058,09-30,34:53,protocol between the receiver's mail server and the receiver's user agent
5059,09-30,34:58,okay then you may answer them what can i use pay attention you can see between these
5060,09-30,35:05,two between the centers your region the center smell server we can use sntp because this may observer alice's email
5061,09-30,35:13,server is always on so you can push okay and then between these two we can
5062,09-30,35:19,also use smtp because the bob's email server is is always on that's why you can push
5063,09-30,35:24,okay here we cannot push because the
5064,09-30,35:30,client may not be there okay we don't want to try again again again then here what we can use between the
5065,09-30,35:37,receivers mail server and the receivers user agent um is something called mail access
5066,09-30,35:43,protocols so male access protocols basically means the user the receiver's user agent can
5067,09-30,35:54,check with the receiver's mail server and ask hey do i have do you have a email for me okay if there is a email
5068,09-30,36:02,for the receiver then the the mail server receivers may also will send this
5069,09-30,36:07,email to the user agent okay um so there are several different types
5070,09-30,36:13,of male access protocols okay the first one pop
5071,09-30,36:19,full name is post office protocol emergency forward second type is called
5072,09-30,36:25,internet mail access protocol imap okay this is a very commonly used right map
5073,09-30,36:31,is a very commonly used the third type is the one rams dimension http okay we
5074,09-30,36:37,can use http why because http is a pulling protocol so let's look at each
5075,09-30,36:43,one for pop okay for pop through we may have authentication uh sorry
5076,09-30,36:49,authorization phase in authorization phase basically what we do is to
5077,09-30,36:54,authorize authenticate the user and authorize it okay so for example the
5078,09-30,37:00,server will say okay server is ready okay and then the clientele will say okay my username is bob the server check
5079,09-30,37:07,it say okay and client will say the password is hungry
5080,09-30,37:13,okay uh then let's check again say okay that's the the username and
5081,09-30,37:18,password are correct and then uh the user can successfully log on okay and
5082,09-30,37:24,the transaction phase um the the user
5083,09-30,37:29,and this around the client will basically check the content of the email okay so firstly the client can say list
5084,09-30,37:35,okay means could you please list the emails for me okay then the server will
5085,09-30,37:40,reply with 1 4 98 2 9 1 9 12. so those
5086,09-30,37:46,are the emails that are available to this user and then with a single period this
5087,09-30,37:52,denotes the end of the list after that the client will say oh you filled the email one place okay then
5088,09-30,37:59,third reversing in a mess with one content with a single period as the end of this message so this client can say
5089,09-30,38:07,okay delete one okay then clients will see it then we'll shoot you uh here the server will send
5090,09-30,38:16,in the message to content okay with a single period then client will say
5091,09-30,38:21,delayed to line us equate and then the server say okay so this is the entire
5092,09-30,38:27,process then in this process we can see uh how the client is authenticated and
5093,09-30,38:33,how um uh emails are retrieved by the client
5094,09-30,38:39,okay so this is the pop third uh for popular what what we just look at is actually
5095,09-30,38:47,called the download and delete mode download and delete means uh we download
5096,09-30,38:52,the email to the user agent and we delete this from the server as you can see here it's
5097,09-30,39:00,deleted from the server so in this case if you want to change the client and you
5098,09-30,39:06,want to retrieve the message again you cannot because of the the messages are already deleted from the server okay and
5099,09-30,39:13,property can also enable a second mode called download and okay found that cap
5100,09-30,39:18,means we download the message okay and we also keep these messages still on the
5101,09-30,39:25,server on the email server then in this case if you change it to a different client for example you change to a from
5102,09-30,39:33,your phone to your laptop or whatever you change the different clients then you are still able to download and
5103,09-30,39:40,access those emails because they are still there okay and pay attention
5104,09-30,39:45,popular is stateless stateless means it doesn't remember
5105,09-30,39:51,the status of the previous client requests okay so it's stateless
5106,09-30,40:00,then for imap imap is much more complicated okay
5107,09-30,40:06,so basically for imap it will keep all the messages in one place and the server
5108,09-30,40:12,side okay and this aligns allows the user to organize the messages in folders
5109,09-30,40:18,and also very interestingly imap is uh is not a stateless protocol it actually
5110,09-30,40:25,remembers the user state across different sessions okay that means for
5111,09-30,40:30,example we all know if you're using succeed emails sometimes you create a
5112,09-30,40:36,new folder for organization right in the in the uh in outlook or in the in the
5113,09-30,40:44,web page directly then in this case in this case um if you log off the next time when you
5114,09-30,40:52,log in again the folder that's still there okay that's because imap is used as the retrieving protocol okay and this
5115,09-30,41:01,also permits a user agent to obtain the comp components of the messages
5116,09-30,41:06,okay so that is the imap uh now uh the last thing let's look at is the
5117,09-30,41:13,web-based email okay um some of you may say oh i didn't use
5118,09-30,41:19,any user agent i just use a web browser for example i use email uh gmail for
5119,09-30,41:26,example okay then in this case what you use is actually the protocol between your client and your mail server is
5120,09-30,41:35,actually the http okay for example may use gmail web-based
5121,09-30,41:41,gmail this is using http to send message out and also you are using http to to
5122,09-30,41:50,retrieve to retrieve the emails okay that is it that is the um
5123,09-30,41:57,web-based email but between the servers between the servers pay attention you
5124,09-30,42:02,are still using smtp okay you cannot use http because there
5125,09-30,42:08,are email servers did not run web service clients so let's summarize what kind of
5126,09-30,42:14,protocols can be used between the centers user agent and the centers may
5127,09-30,42:20,also between the century muscle around the receiver's mail server and also between the receiver's email server and
5128,09-30,42:26,the receiver to digits so water can be used what can be used between the
5129,09-30,42:32,sender's user agent senders mail server smtp
5130,09-30,42:38,okay so can we use anything else here nothing else right we cannot use
5131,09-30,42:45,anything else we cannot of course we cannot use use pop or imap right because those are just for male access to
5132,09-30,42:52,retrieve the emails it's not worth any emails okay okay now look at the senders mail server
5133,09-30,42:59,and the sender a receiver with mail server between them what kind of protocols can we use only smtp can we
5134,09-30,43:07,use anything else http pop imap no okay
5135,09-30,43:12,so how about we turn the receiver email server and the receiver's user agent
5136,09-30,43:18,in addition to http we can also use pop
5137,09-30,43:24,and imap so this will be a test problem
5138,09-30,43:30,i will ask you in a test i will ask you what kind of protocols can be used
5139,09-30,43:35,between for example the sender's user agent and senders muscle
5140,09-30,43:40,okay so i may say oh i can use http between the sender's mail server and the
5141,09-30,43:46,receivers mess over is this correct or wrong all right okay so that's everything
5142,09-30,43:54,about email we are continue to talk about
5143,10-03,0:02,the the next very interesting topic which is uh dns the name name service
5144,10-03,0:10,okay so we all know that uh as a person we
5145,10-03,0:15,have many identifiers we have for example we have the um ssn
5146,10-03,0:21,okay we have the name and we have also password numbers okay
5147,10-03,0:28,um then for um computers computers also have some name called ip address you can use you
5148,10-03,0:34,you can view this uh as a type of identifier right ip address and the
5149,10-03,0:42,computers also have names like yahoo.com google.com okay those names are commonly
5150,10-03,0:50,used by humans so you may ask why do we have the names if we have ip address why
5151,10-03,0:56,do we need the the host names so it's like we know each person's ssn
5152,10-03,1:03,why do we still need a name for for that person if we know michael's ssn is one two
5153,10-03,1:10,three four five okay why do we need a michael the name michael for for him
5154,10-03,1:17,it's very easy to remember michael but it's very hard to remember michael's assassin right we have to use ip address
5155,10-03,1:23,for roughly and everything but we also need uh easily understandable
5156,10-03,1:30,name for that host okay because you can you can remember yahoo.com you can remember google.com
5157,10-03,1:37,it's very easy to type in but it's not easy to remember the 32-bit ip address
5158,10-03,1:44,okay then the question is the question now becomes how can we map between the
5159,10-03,1:51,ip address and the hostname otherwise it wasn't the answer is called the mean
5160,10-03,1:57,name system okay so we need something called domain name system to remember
5161,10-03,2:03,the mapping between ip address and name okay actually actually when we mentioned
5162,10-03,2:09,dns it implies two things one thing is a distributed database that means in this
5163,10-03,2:16,database we need to store the mappings between ip address
5164,10-03,2:21,and the name okay this is this distribute database is actually
5165,10-03,2:26,implemented in the hierarchy of many name servers okay but dns also has
5166,10-03,2:33,another menu that means um the application layer for toko this
5167,10-03,2:39,allowed the house to query the distributed database okay so this is another thing we are
5168,10-03,2:45,going to learn in this class so now let's look at what kind of
5169,10-03,2:50,services can be provided by ds so the first thing that comes into your
5170,10-03,2:56,mind is probably the mapping between the hostname and ip address right host name
5171,10-03,3:01,to ip address translation actually vs does much more than that
5172,10-03,3:08,okay so there are three more other functions that are provided by the dns
5173,10-03,3:13,first one host alice house editing for what does this mean this means uh for
5174,10-03,3:20,each cost it may have a canonical name and also a a-list name for example the
5175,10-03,3:26,canonical name is relay one or really or whatever that's west
5176,10-03,3:32,coast dot enterprise.com this is the canonical name but the alias
5177,10-03,3:39,name that is too long right nobody's going to remember that but the alias name can be enterprise outcome or www
5178,10-03,3:46,dot enterprise.com which are much easier to remember
5179,10-03,3:52,okay so that is actually the uh aliasing it provides a host a lesson okay and it
5180,10-03,3:59,also provides the mail server alice okay that means the mail server may have
5181,10-03,4:05,a very long name but we can also give it a short alias to remember it easily
5182,10-03,4:11,if you still remember in the demo of email we actually use the
5183,10-03,4:18,we actually used the alaci um
5184,10-03,4:23,do you see this telnet
5185,10-03,4:29,smtp.csus.edu this smtp.csus.edu is actually a als
5186,10-03,4:37,the real name for this server is this one smtp.settling.csus.edu
5187,10-03,4:47,okay that's the real name is longer okay it's longer than that
5188,10-03,4:53,um that's the third type okay third additional type the last one
5189,10-03,5:00,that can be done by the dns is called the load distribution okay load
5190,10-03,5:06,distribution um as you can imagine for those big companies okay the web server the web
5191,10-03,5:13,server may be accessed um a lot you imagine about google.com
5192,10-03,5:20,amazon.com right so it's usually it's not possible to
5193,10-03,5:26,have just one web server serving for all the uh clients it's not possible right
5194,10-03,5:34,so in this case what can we do what we can do is we give it to just the one
5195,10-03,5:41,name okay one name like google.com but we actually assign multiple ip addresses to
5196,10-03,5:49,this one name okay then in this case when people access google.com okay then we can kind
5197,10-03,5:58,of distribute the load to google.com to many different ip addresses okay that
5198,10-03,6:04,means to many different machines okay so this is called load distribution
5199,10-03,6:09,so that's another service that can be done by dns okay
5200,10-03,6:15,so then the next question we need to consider is oh how can we how can we deploy this dns
5201,10-03,6:23,system can we just use one centralized server
5202,10-03,6:29,it's like for for example web application can we just use one
5203,10-03,6:34,centralized dns server so we cannot do that for a number of
5204,10-03,6:40,reasons the first is single point of failure that means if this server is down okay
5205,10-03,6:47,then we cannot provide dns service for the entire world
5206,10-03,6:52,okay then in this case the entire internet system this is very important because you can you can think about this
5207,10-03,7:00,for all the clients around or whatever if they want to communicate usually they
5208,10-03,7:07,need the answers the answer is essential okay nobody's going to type in ip
5209,10-03,7:13,address they all type in the hostname okay if the ds service is not there
5210,10-03,7:20,is uh the entire internet is going it's going it's going down okay this is even
5211,10-03,7:26,worse than for example a web service a web server is down it can probably only
5212,10-03,7:32,impact one specific company and the clients to that specific company but if
5213,10-03,7:38,this uh the answer is done then it will impact this entire internet for the
5214,10-03,7:45,entire world okay and another thing we need to consider is if we have one single server then the
5215,10-03,7:52,traffic volume is is huge this server can easily be overwhelmed okay
5216,10-03,7:58,and then we also need to consider uh where we should put the centralized
5217,10-03,8:05,database because everyone wants this to be close to them right but we we do not
5218,10-03,8:10,have like a perfect location for the entire world right
5219,10-03,8:16,um then the last thing is the maintenance okay if we have one single server this server has to be there
5220,10-03,8:22,forever and it has to be up and running forever we cannot afford
5221,10-03,8:30,shutting it down to do maintenance we cannot okay so those are all the things
5222,10-03,8:35,we need to consider so the major reason to summarize one
5223,10-03,8:41,word one sentence it means if we have a single server then it it doesn't scale
5224,10-03,8:46,okay so in reality dns is actually a distributed hierarchical database okay
5225,10-03,8:55,um so that means we firstly have the root dn server okay and then the second layer uh
5226,10-03,9:05,is called the top flower the mean name servers okay that means they are.com dot
5227,10-03,9:12,org.edu okay so those are called top level the new email servers and finally
5228,10-03,9:19,the last layer the lowest layer is called the authoritative name servers
5229,10-03,9:25,okay authoritative name servers so generally if a clients wants ip address
5230,10-03,9:30,for amazon.com okay uh your relay or
5231,10-03,9:36,theoretically the client will need to first contact the root
5232,10-03,9:42,to find the ip address for.com dn server
5233,10-03,9:47,and then the client will query the.com dn server to get the
5234,10-03,9:53,amazon.com's authoritative dn server okay that means
5235,10-03,10:00,from this one we will get the contact of this one okay then finally we go to the
5236,10-03,10:07,amazon.com the answer we're together ip address for amazon.com
5237,10-03,10:12,okay so this is like for example for our department
5238,10-03,10:17,okay for our department if we have uh veronica as the authoritative name
5239,10-03,10:23,server then the college level we may have somebody there let's see it's our day our day is there as the authority so
5240,10-03,10:31,let's see this is the president
5241,10-03,10:37,and the women have the thing and we may have let's use the chair okay
5242,10-03,10:44,instead of veronica okay let's say if you want to find a contact
5243,10-03,10:50,information for me okay i'm a regular faculty in the department of computer science then you have to contact the
5244,10-03,10:57,president say hey do you know the contact information for dean daniel for ecs
5245,10-03,11:03,quality is of vcs and then you'll find the content and then you get the
5246,10-03,11:09,information for the thing and then you cut the thing and asking hey do you have the contact information for the chair
5247,10-03,11:15,and the final encounter the chair to get the contact number for me so that is the entire process
5248,10-03,11:21,okay so it's hierarchical um if we look at the name server the
5249,10-03,11:27,root name servers we for the entire world okay for the entire world we have
5250,10-03,11:33,13 logical root name servers worldwide okay
5251,10-03,11:39,as a marketing this map um when we say logical servers that
5252,10-03,11:45,means um while minority console does not really mean one physical server and one logical
5253,10-03,11:52,server can have many many uh physical
5254,10-03,11:57,servers okay it's just viewed as one server but as you can imagine
5255,10-03,12:03,apparently one physical server is not sufficient to serve the entire world right
5256,10-03,12:10,um so basically the root name server context the authority name server if
5257,10-03,12:16,named mapping is not known okay to get the mapping and then the root names will
5258,10-03,12:23,return the mapping to the local name server okay so um and we just mentioned the top level
5259,10-03,12:29,domain server which is the second layer okay servers are responsible for.com org net
5260,10-03,12:39,edu etc etc okay and it's also for all top level country domain names okay that
5261,10-03,12:45,means like uk from ca um japan okay
5262,10-03,12:52,um so this organization this company network
5263,10-03,12:57,solutions maintains the servers for.com tld okay and for dot edu is add your course
5264,10-03,13:05,maintaining the top level domain servers okay for the authoritative uh dns servers
5265,10-03,13:13,which is the lowest layer okay each organization will maintain their own
5266,10-03,13:19,authoritative dns server okay the organization's own dns servers
5267,10-03,13:26,provide the authoritative hostname to ip mapping for the organization's name has
5268,10-03,13:33,this means for example for sex states we have our own authoritative dn server the
5269,10-03,13:39,reason we call it authoritative because only this dns server knows the correct
5270,10-03,13:46,mapping between ip address and house name for all the host e exact states
5271,10-03,13:53,okay and authoritative the answer can be maintained by the organization or the
5272,10-03,14:00,service provider okay those are the third type of service
5273,10-03,14:07,and there is one more time called the local dns so low code dns does not strictly belong
5274,10-03,14:15,to hierarchy okay um so each isp
5275,10-03,14:22,has a one local dns so for example for succeed we also have local ds so what is local dnf
5276,10-03,14:30,what is the difference between look audience and and this one here so the local dns is like the one
5277,10-03,14:39,uh survey all the queries from this
5278,10-03,14:44,organization for example safe state local ds will serve all the clients in within
5279,10-03,14:53,succeed if you for example you want to know the uh ip address for google.com
5280,10-03,14:58,you will ask a local ds and then local dns will try to find out the answer for
5281,10-03,15:05,you okay so that is the uh the local ds
5282,10-03,15:11,my horse makes dns query the query is sent to its local ds server so yeah some
5283,10-03,15:17,of you may ask what is the difference between local dns and authoritative dns so authoritative dns is is the one
5284,10-03,15:25,maintaining the contact list okay but the local dns is the one
5285,10-03,15:33,answering your queries so it's like for our computer science
5286,10-03,15:38,department probably the chair is the one maintaining the contact list for all the
5287,10-03,15:44,faculty but if you want to ask the contact contact information for other faculty in
5288,10-03,15:51,other universities you have to contact the let's say veronica in this case
5289,10-03,15:56,veronica is the local dna server okay she is helping you helping you to
5290,10-03,16:03,find out the contact information for others does this make sense okay it's like the
5291,10-03,16:10,chair is maintaining uh or the low the authority of dns is
5292,10-03,16:15,maintaining all the ip address and host name mapping for all the machines with
5293,10-03,16:20,insect state okay but if you want to query about something like amazon.com
5294,10-03,16:26,like ebay.com google.com okay then you have to contact the local ds server okay
5295,10-03,16:33,of course sometimes they are combined into one machine especially for small organization and sometimes they are
5296,10-03,16:40,separate but they have different functions as you can see they are very different okay
5297,10-03,16:46,and the local ds has a local cache of the recent name to address translation
5298,10-03,16:51,pairs okay but this may be out of date um it's like
5299,10-03,16:57,a proxy this will forward the query into the hierarchy that means uh
5300,10-03,17:03,for example if you acquire about google.com and google.com is already cached in local ds then in this case
5301,10-03,17:09,local dns will directly provide you the answer but if google.com is not cached
5302,10-03,17:15,in local ds then the local dns will help you to make the query into the hierarchy
5303,10-03,17:22,to basically local the answer will contact the root and ask hey do you know what is the ip address for google.com
5304,10-03,17:28,okay in reality when we do the dns name resolution we have two ways one type is
5305,10-03,17:35,called iterated comparis another type is called recursive query okay now let's
5306,10-03,17:40,look at an example we have a requesting host here
5307,10-03,17:46,okay cis.poly.edu this one is the requesting host which needs to find out the ip
5308,10-03,17:53,address for some machine okay so then that submachine is this gaia.cs.ums.edu
5309,10-03,18:02,so basically the host at cis of the poly.edu wants the ip address for
5310,10-03,18:08,gaia.cs.ums.edu then for italy the query
5311,10-03,18:13,uh basically the contacted server replies with the name of the server to
5312,10-03,18:20,contact okay so generally for for the very first step the requesting host will contact
5313,10-03,18:27,the local ds okay contact the local dns and say you
5314,10-03,18:34,can see the local dns is still belongs to poly.teu right so this local dns
5315,10-03,18:40,serves all the machines within poly.edu
5316,10-03,18:45,okay then this requesting host will ask the local dnc hey i want to find out the ip address
5317,10-03,18:52,for gaia.cs.umass.edu could you please help me then the local dns will say sure let me
5318,10-03,18:59,help you okay and the local dns will then contact the root design server
5319,10-03,19:06,theoretically it's like this okay it will contact the root design server
5320,10-03,19:14,oh i'm sorry i don't know this name okay but i know it belongs to dot edu so
5321,10-03,19:24,please go ahead and contact this server
5322,10-03,19:29,okay so basically the root in step 3 the rooting s is returning the contact
5323,10-03,19:35,information for dot edu dn server okay then this local ds for poly.edu
5324,10-03,19:44,will go ahead in step four go ahead to ask the dot edu dn server say hey could
5325,10-03,19:50,you please help me find out the ip address for this machine and again the dot edu will say oh i'm
5326,10-03,19:57,sorry i don't know i don't know the name but i know who you can contact it's like
5327,10-03,20:03,the thing is saying hey i don't know but please go ahead to ask the cs department chair here is the information for the
5328,10-03,20:09,department chair okay then basically step five the edu dns will return the ip
5329,10-03,20:17,address for the authority dns for
5330,10-03,20:22,umass.edu okay and say go ahead to contact that person
5331,10-03,20:27,that machine then this in step six look at the answer will again ask the authoritative dns server and say hey
5332,10-03,20:34,could you please provide me the ip address for this machine and finally this authoritative dns
5333,10-03,20:42,will provide the ip address to the local audience and then now the local ds is
5334,10-03,20:48,happy local dnc hey i've i completed the work okay local dns will return this ip
5335,10-03,20:55,address to the requesting host okay now eventually that you requesting
5336,10-03,21:01,house has the ip address for gaia.cs.umass.edu and then it will
5337,10-03,21:07,contact the um it will contact this uh this machine
5338,10-03,21:14,for further communication okay uh for example if this machine is a web server
5339,10-03,21:19,we know they will continue to do the tcp connection and they will begin to start
5340,10-03,21:25,with uh the http request message and response message so this is a one time i uh and you can
5341,10-03,21:34,see in this type every time when the server is contacted the server may not know the answer but the server will
5342,10-03,21:40,redirect the local dns to another server who may have the information right
5343,10-03,21:48,um in recursive query is different okay in recursive query every server is very
5344,10-03,21:55,responsible if the server do not know the information the server will say hey
5345,10-03,22:01,please wait here okay hold on wait here and i'll go ahead to find the answer for
5346,10-03,22:07,you okay so it's like that every server is very responsible so again you can see
5347,10-03,22:14,this is the requesting host okay the requesting host will make a request to the local dns
5348,10-03,22:20,and then locally as well say okay let me find it out for you the local ds will
5349,10-03,22:25,then contact the root ds l dns will say hey i don't know the
5350,10-03,22:32,answer but hold on let me find it out for you okay then root will go ahead in step 3
5351,10-03,22:39,root will go ahead to contact the tlddsr and tld will also say hey i don't know
5352,10-03,22:46,but hold on wait here and i will find out for you so then in step 4 tld will
5353,10-03,22:53,directly go ahead to contact the authoritative dna server of cs.ms.edu
5354,10-03,22:58,okay and finally find out the answer so in step five this authoritative dns
5355,10-03,23:06,server from umass is providing answer to tld and then tld prior answer to the
5356,10-03,23:12,roots and the final root provide the answer to the local ds okay
5357,10-03,23:19,again with this answer local dns will in step 8 will provide this answer to the
5358,10-03,23:26,requesting host with the cis.poly.edu okay
5359,10-03,23:31,um the problem for this recursive query as you can see because every server is
5360,10-03,23:38,very responsible so this actually puts the burden of name resolution on the
5361,10-03,23:44,contact name server okay as you can imagine because there
5362,10-03,23:49,are so many machines that that may contact the root yes then the root yes
5363,10-03,23:56,will have very heavy workload because it has to be responsible for all the
5364,10-03,24:02,quarries okay it needs to get the answer for all the queries so in this case the
5365,10-03,24:09,root yes can be easily overwhelmed okay so that is the problem of the recursive
5366,10-03,24:15,query um of course as in the future of course
5367,10-03,24:21,now you can you can think about this um later maybe i i'll explain this again
5368,10-03,24:26,actually um for the local ds
5369,10-03,24:33,the local dns may cache some answers directly
5370,10-03,24:38,for example if you if everyone is visiting google.com
5371,10-03,24:44,then the ip address for google.com may have already been cached on the local ds
5372,10-03,24:52,okay in this case when a requesting host is requesting ip address for google.com
5373,10-03,24:58,the local dns does not need to do the step three two two to seven it doesn't
5374,10-03,25:03,need to do two to seven okay it's it's the same thing here
5375,10-03,25:09,same thing here no matter what kind it basically means the query is not needed
5376,10-03,25:15,to the root to the tld to the authoritative dns server because local ds already knows the answer okay
5377,10-03,25:22,um and also also the local dns may also
5378,10-03,25:28,cash the ip address for root and ip address for tld
5379,10-03,25:34,okay why because we do not have a lot of root ntlds
5380,10-03,25:40,okay we do not have a lot um so it's very easy for the local dn
5381,10-03,25:45,server to cache those ip addresses it's like you if you already have the
5382,10-03,25:51,president and the things contact information okay every time we need to
5383,10-03,25:57,do a query you still need to go back to the present you don't need to right you
5384,10-03,26:03,don't need to contact the project again to find out the contact information for the thing because the things information
5385,10-03,26:09,is already cached at the local dns okay it's the
5386,10-03,26:15,same thing here if the local ds has already cached the root and the tld
5387,10-03,26:21,okay the ip the ip address for tld then every time when the local ds needs to
5388,10-03,26:28,contact a um a tld server it can go good a good
5389,10-03,26:35,content that directly without consulting the root ds okay
5390,10-03,26:42,so that is something you need to pay attention um and for the cash okay the cash
5391,10-03,26:50,entries time out after some time for this time we call it time to expire ttl
5392,10-03,26:56,you probably um are very familiar with ttl right now right so time to leave
5393,10-03,27:03,um so the cash has some time uh been there but it will finally
5394,10-03,27:09,disappear okay uh and again as i mentioned the tld server typically caches in the local audience name
5395,10-03,27:16,servers okay and also need to pay attention the cash entries may be out of
5396,10-03,27:22,date okay um then in this case if for example if
5397,10-03,27:27,you imagine one name one host one host okay uh changes the ip address
5398,10-03,27:35,then this may not be no internet wild
5399,10-03,27:41,internet wide until all the ttls expire
5400,10-03,27:46,okay only after all the ttls higher than everyone knows everyone will everything
5401,10-03,27:52,else will uh have the new ip we'll do a new query and
5402,10-03,27:58,get the new ip address okay before that this may not be known internet-wide okay
5403,10-03,28:04,so those are the information you need to know any questions
5404,10-03,28:12,okay um so another thing is about the dns
5405,10-03,28:18,directors okay um so basically as we said the dns means
5406,10-03,28:24,a database then in the database okay in the database um they will store the records of the ds
5407,10-03,28:32,okay so how how is the record store it's like this
5408,10-03,28:37,foreign the type and the ttl so that is the
5409,10-03,28:46,format okay um so basically for the type we have
5410,10-03,28:51,four types okay type a which means it's a mapping
5411,10-03,28:57,between the name and the hostname and ip address
5412,10-03,29:03,okay which means for type a okay
5413,10-03,29:09,uh let's see if we have pass.com
5414,10-03,29:15,okay and if let's see the ip address is uh
5415,10-03,29:22,this is the ip address for test.com then in this case we will have the name
5416,10-03,29:29,as task.com this is the machine name okay the value will be the ip address
5417,10-03,29:36,and the type is a the tdl can be for example 1000 seconds and this is the
5418,10-03,29:43,type aim for type ns type ns in type ns patients the name
5419,10-03,29:51,is the domain name and the value is the hostname of authoritative name
5420,10-03,29:58,servers for this domain okay so basically we will use type n s
5421,10-03,30:04,to provide uh the the authoritative name
5422,10-03,30:10,server for this domain so for it for example again if we have
5423,10-03,30:17,foreign
5424,10-03,30:26,if the authoritative name server for this dummy is
5425,10-03,30:37,dns.test.com then this is type ns
5426,10-03,30:44,and the aspiration the ttl can still be housing
5427,10-03,30:50,okay this is the name server type the third type the third type is the same name type
5428,10-03,30:58,so in this case for say name type the name is the a-list name for some canonical
5429,10-03,31:05,name it's the alias okay again this is a test.com and then the canonical name
5430,10-03,31:12,can be
5431,10-03,31:28,so this is type c name
5432,10-03,31:35,okay this third type and the fourth type is
5433,10-03,31:40,the mx and mx is basically providing the male silver okay for example we can have
5434,10-03,32:01,foreign
5435,10-03,32:09,types the name and the values are different okay so the last one for test
5436,10-03,32:16,outcome the names the mail server is called neo.test.com of course it can be
5437,10-03,32:21,other names or other email servers it can be smtp.test.com
5438,10-03,32:27,with whatever mail server you have you just put the name there and then this is mx type and the tkl is 1000 okay so this
5439,10-03,32:36,will become a test problem in the exam in exam i may ask you to
5440,10-03,32:45,write down some records okay for example i give you the domain
5441,10-03,32:51,name the ip address the host name and i ask you to provide uh uh maybe ns type
5442,10-03,32:58,or whatever type okay so then you need to know how to write this record correctly
5443,10-03,33:04,okay questions
5444,10-03,33:14,is asking what's the difference between hostname and domain name
5445,10-03,33:19,um so hostname hostname is uh the name for
5446,10-03,33:26,a machine okay and the mean name is usually um usually means um
5447,10-03,33:33,the for example for uh this for this domains the how we reference them in for
5448,10-03,33:40,example csus.edu can be a domain name but it can
5449,10-03,33:45,also be the host name sometimes okay especially when we use for example we use a
5450,10-03,33:52,um csusw to refer to the web server okay but the host name can also be something
5451,10-03,33:57,else hostname can also be
5452,10-03,34:03,smtp.test.edu.test.com okay then in this case the host name is the hostname for
5453,10-03,34:08,this email server okay so um the domain name is like a family
5454,10-03,34:14,name okay but sometimes the host name is is just the same as the domain name
5455,10-03,34:21,especially for the web server because we usually refer to um for example google.com can be the
5456,10-03,34:27,main name and google.com can also be in the host name for the web server google okay but the mail server and dn server
5457,10-03,34:35,database servers may have different names okay
5458,10-03,34:41,all right so then let's look at the dns protocol uh and also the message format
5459,10-03,34:47,for dns the query and reply message they both share the same message format it's
5460,10-03,34:53,like that in the in the figure short here in the table short here okay as you can see for the message hacker for the
5461,10-03,35:01,message header we have identification number which is a 16 bit number this is
5462,10-03,35:07,uh used for query and reply okay so the query and reply message will share the
5463,10-03,35:13,same identification number okay to indicate oh this is the reply for that
5464,10-03,35:19,specific query okay and then um after that we have two guys of flex
5465,10-03,35:26,okay uh another 16 bits is used for flags in the flags it may indicate this
5466,10-03,35:33,is a query or reply message okay and it may indicate uh if recursion is desired or
5467,10-03,35:42,uh if your current is available okay and it may also indicate if the reply is
5468,10-03,35:49,authoritative or not okay if the reply is authoritative that
5469,10-03,35:55,means the reply comes from the authoritative name server directly
5470,10-03,36:00,okay if the reply is not authoritative that means the reply is from the local
5471,10-03,36:07,ds the cache is from the cache it's not from the original authoritative name
5472,10-03,36:13,server okay so after that you may see uh the number
5473,10-03,36:18,of questions uh number of rrs r us means resource records okay and
5474,10-03,36:26,the number of authority authority errors and number of additional hours okay so here uh these four are just the numbers
5475,10-03,36:34,okay that's just the numbers and then after that we will see the questions
5476,10-03,36:41,okay uh if this is a quarry then the questions will be shown here so the name
5477,10-03,36:47,and type fields for query and if this is a response message then the answers will be say uh in the in
5478,10-03,36:56,this field okay the response to the records in response to the card will be shown in
5479,10-03,37:02,this field and um we also have the records for
5480,10-03,37:09,authoritative name servers and there are also some additional information that
5481,10-03,37:15,may be helpful for example um you may have the information for the
5482,10-03,37:21,authoritative name servers um and other things okay
5483,10-03,37:27,all right so let's look at some examples right these um experiments here just for
5484,10-03,37:33,fun okay so a very commonly used tool
5485,10-03,37:38,4ds query is the ns lookup okay you can try it on your own at home so for
5486,10-03,37:45,example here i firstly did let's look up for google.com okay
5487,10-03,37:51,and this is what i get this is the response okay and you can see the first part
5488,10-03,38:02,this server and address pay attention this server and address is not the ip
5489,10-03,38:08,address for google.com this is not the answer this just means
5490,10-03,38:19,this just means is the local dna server means which
5491,10-03,38:25,local dns server is providing you the answer okay and then if you look at the answer
5492,10-03,38:32,here the non-authoritative answer
5493,10-03,38:37,okay you can see the ip address for google.com is 200 this one i don't want to read it
5494,10-03,38:44,okay but this is the ip address for google.com okay
5495,10-03,38:59,and also you need to pay attention
5496,10-03,39:05,this is a non-authoritative answer that means the answer comes from the
5497,10-03,39:12,cache from the local ds the answer does not come from the authoritative name
5498,10-03,39:19,server of google okay pay attention to that and after that i did another query
5499,10-03,39:24,our csus.edu as you can see it is showing the same
5500,10-03,39:31,ip address 251-251 again that is the local dn server that means it's still
5501,10-03,39:37,the same server replying to me okay and some of you may ask what is this
5502,10-03,39:43,this is the pearl number 53 is the post number for dds service
5503,10-03,39:50,okay it's like 84 http 25 for email okay and then you can see the answer for
5504,10-03,39:58,csus.edu is
5505,10-03,40:04,130.86.9.189 this is the ip address for sac state for for csus.edu okay
5506,10-03,40:10,and then i did another query i'm very curious so i call it
5507,10-03,40:17,dns.csus.edu i want to know the ip address for dns of cn csus.edu
5508,10-03,40:24,but unfortunately the server cannot find this dns.csus.edu
5509,10-03,40:32,that means safety do not have this machine does not have this machine
5510,10-03,40:38,then i'm curious if this is not the dns server then who is the answer
5511,10-03,40:46,so then i did a lookup again and this time i type in the type
5512,10-03,40:53,equal to ns csus.edu [music] okay this is two
5513,10-03,41:03,get the name server for csus edu so i get two answers
5514,10-03,41:09,apparently the name for csu for the csus cdu the answer is not
5515,10-03,41:16,ds.csus.edu it's actually s4.csus.edu and as through.csus.edu
5516,10-03,41:24,okay um and then i'm again very curious i want to know which one is this machine
5517,10-03,41:33,okay is this s4 os3 so i did another ns lookup
5518,10-03,41:41,as4.csus.edu and then you can see actually this is an s4
5519,10-03,41:49,right it's ns4 and then i did another lookup of s3 and it returns me a
5520,10-03,41:56,different ip address so this proves that is actually as for
5521,10-03,42:02,providing the local dn service to me and it also shows you that on exact state we
5522,10-03,42:09,actually have more than one dn servers okay
5523,10-03,42:15,and then i did another lookup okay what i look up is i want last time to
5524,10-03,42:23,remember we talked about the smtp.csuf.edu right so this is the mail
5525,10-03,42:30,server do you remember mail server adjusted but we want to know
5526,10-03,42:37,the canonical name for this one and after that you can see after the lookup you can see i get the canonical
5527,10-03,42:45,name which is smtp.statlink.csus.edu okay
5528,10-03,42:51,so you can do the same practice at home if you like um
5529,10-03,42:56,this is a this is like exploring process very interesting okay so then now you understand how you can do the lookup
5530,10-03,43:03,okay any questions
5531,10-03,43:10,okay so another thing i want to emphasize is
5532,10-03,43:16,about inserting records into ds so why we need to re research records into ds
5533,10-03,43:24,you imagine in a scenario for example you are um you have a new company a new startup
5534,10-03,43:30,which is called for example network utopia okay and you want everybody to
5535,10-03,43:36,know about your network right to know about your company then you have to register your company at the dns
5536,10-03,43:44,register okay you basically need to register this name network utopia.com
5537,10-03,43:54,okay so then what you need to do is you need to
5538,10-03,44:00,provide two things at least two records okay one thing is that you need to tell
5539,10-03,44:08,others what is your dns server that is very important because ds server the d
5540,10-03,44:17,answer reveal provides all the mappings between the host between all host and
5541,10-03,44:22,the ip addresses so the answer is like the contact person you need to let
5542,10-03,44:28,others know who your contact person is otherwise nobody can contact you right
5543,10-03,44:33,nobody can reach reach out to you that's why the very first directory need
5544,10-03,44:38,to insert is the network utopia.com and provide the dns
5545,10-03,44:46,the dns server name and this is type ns type n s because that is used to provide
5546,10-03,44:53,the dns server's name okay but pay attention this is just providing
5547,10-03,45:00,the name but the question is how can others contact him you also need to
5548,10-03,45:05,insert another record into the um
5549,10-03,45:11,uh tld server you also need to tell others ip address for the cnn's name server
5550,10-03,45:21,okay and then others will know how to contact it so for this record it's type
5551,10-03,45:27,a because this is a the name
5552,10-03,45:32,the ip this is type a record okay you are providing a mapping between ip and a
5553,10-03,45:38,name okay so this will become a test problem
5554,10-03,45:44,so in the test i may ask to you if you have a new startup
5555,10-03,45:51,okay if you want to let others know your company your your
5556,10-03,45:58,um the ip address for all your domain name what would you do what are the two
5557,10-03,46:04,records that you will insert into tld for sure okay at least two records so
5558,10-03,46:11,again keep that in your mind first thing is tell others who is your dn server use
5559,10-03,46:17,the using the ns type and then tell others the ip address for this dns
5560,10-03,46:23,server using the type a record okay those are the two records you need to
5561,10-03,46:29,add of course you you need to also include another type a record for your
5562,10-03,46:36,web server right and then you need to also insert
5563,10-03,46:41,um mx record for this dummy that means you need to provide a mail server okay
5564,10-03,46:48,and with all those four then you are complete okay so
5565,10-03,46:55,but at least you need to insert the dns and then the ip address for the s okay
5566,10-03,47:01,all right so the last thing we want to talk about very quickly today is uh
5567,10-03,47:06,about attacking 2ds okay uh so a very
5568,10-03,47:12,common type of the attacking is the ddos attack he does attack basically means
5569,10-03,47:17,bombard the root servers with traffic so we if we send you as you can imagine if we send a lot of queries okay and if all
5570,10-03,47:25,those colors go to the root server prove dns that will cause radiance will be all
5571,10-03,47:32,around so this is the ddos attack okay but in reality in reality is very
5572,10-03,47:39,challenging or very hard to attack the rootiness
5573,10-03,47:44,can we imagine why because the root yes
5574,10-03,47:51,okay in reality is not contacted a lot because the tld servers as we mentioned
5575,10-03,47:58,are already uh already cached in the local ds okay it's like with everyone
5576,10-03,48:07,all the local audience already has the content information for the thing they
5577,10-03,48:12,don't want to bother the president again because they already know how to contact the thing so what what is the rationale
5578,10-03,48:18,to contact the president again so that's why in most cases
5579,10-03,48:24,attacking the routine server is actually very difficult but uh doing the details
5580,10-03,48:31,to the tld servers is possible okay it's possible because the trd server may
5581,10-03,48:37,be contacted a lot um so that is uh that is the uh the details
5582,10-03,48:43,attack okay and another type of attack is called the redirect attacks okay and uh
5583,10-03,48:51,also dns poisoning so this is a very common type so what is happening is
5584,10-03,48:57,actually for example if this is the local ds
5585,10-03,49:04,okay and then it will contact
5586,10-03,49:09,the original routines or whatever or tld
5587,10-03,49:15,okay for example tld name servers okay and then some people some money in the
5588,10-03,49:23,middle okay will intercept the query so for example the tld will return some
5589,10-03,49:30,ip address right a real ip address but this bad person this bad guy will
5590,10-03,49:35,actually intercept the query and provide a fake ip address
5591,10-03,49:42,pride provide a fake ip address to this local ds does this make sense okay give a fake
5592,10-03,49:51,ip and this click it will be stored here at the local ds
5593,10-03,49:57,okay it's cached there in the local ds then in this case we call this as dns
5594,10-03,50:04,poisoning the reason is because if there's somebody else the client is requesting for local ds contacting local
5595,10-03,50:11,dance again uh for uh the ip address for some
5596,10-03,50:16,machine okay let's see if this is uh again test.com
5597,10-03,50:22,and now test.com has a fake ip and then this fake ip will be returned to client
5598,10-03,50:28,if there are some other clients contacting the game for test.com the local ds will say oh i already have
5599,10-03,50:35,the ip for test.com so the fake ip is returned again to the to another client
5600,10-03,50:41,so that's why it's called pointing because um they are all cached here at the local
5601,10-03,50:46,ds okay and yes poisoning can also happen
5602,10-03,50:52,um between the other dn servers like between the root and tld between the tld
5603,10-03,50:58,and the authoritative name so it doesn't need she doesn't necessarily happen between the local and others okay
5604,10-03,51:06,so as long as a fake ip address is stored or cached in their server then
5605,10-03,51:15,this is called against poisoning okay because then this cancer reveal
5606,10-03,51:21,they are pro always provide the wrong ip address or the fake ip address okay
5607,10-03,51:28,this is called the redirect attack another type of attack is called employed dns for ddos attack so this is
5608,10-03,51:35,this one is also very interesting this one means when the client send out a
5609,10-03,51:42,query it will use a spoof ip address
5610,10-03,51:47,okay and it will send out a lot of queries using a spoof ip address and then as you
5611,10-03,51:56,can imagine all those queries will have a response right and then all those
5612,10-03,52:02,queries will will come back two
5613,10-03,52:08,this ip address to this moved ip address then this both ip address is the target
5614,10-03,52:14,ip actually it's the victim because it is receiving so many responses then this
5615,10-03,52:20,is like ddos attack uh in this attack you are pretending to be someone else to make a lot of queries
5616,10-03,52:27,to the dna servers and machine with that ip address will receive a lot of responses and that is the ddos attack
5617,10-03,52:34,okay so
5618,10-05,0:03,so we have learned uh two models before client server model and p2p model we
5619,10-05,0:09,talked about the web the email the dns these applications are mainly using the
5620,10-05,0:15,client server model okay for example for web we know we have a web service we
5621,10-05,0:21,have the web clients the clients programs are usually the firefox the web browser right so safari firefox chrome
5622,10-05,0:29,etc then for email application we also know it is uh using email server and also email client
5623,10-05,0:37,the email client may be outlook for example then for ds for ds
5624,10-05,0:43,it also uses a cleanser model because we have the answer we're serving all the
5625,10-05,0:49,clients okay so then those clients who want to know the ip address for certain
5626,10-05,0:58,host name then they can just acquire it via server okay so those are all the
5627,10-05,1:03,client server applications and the in 2.5 we are going to talk about the p2p
5628,10-05,1:10,applications which is peer-to-peer applications okay it is using a p2p
5629,10-05,1:16,architecture which means it has all the features we have discussed before
5630,10-05,1:22,regarding the p2p for example there is no server no always one server okay and
5631,10-05,1:29,those up those end systems can directly communicate with each other they don't
5632,10-05,1:34,need to communicate with the server we know in client server model these applications must this clients must
5633,10-05,1:42,communicate with the server right they cannot communicate with the clients okay
5634,10-05,1:47,but if p2p is different and also those peers are intermittently
5635,10-05,1:55,connected and they can change their ip addresses as many times as they want okay so the architecture is changing the
5636,10-05,2:04,the structure of this network may change a lot so um this this is the phase this is the
5637,10-05,2:12,one of the features of p2p okay it makes the management of p2p actually uh very
5638,10-05,2:18,difficult okay so there are some examples of p2p application like
5639,10-05,2:24,for example b torrent bittorrent is used for file distribution some of you may
5640,10-05,2:29,have used this before um and it's uh it's actually it's a very
5641,10-05,2:35,sometimes it's very fast okay it's very fast food for downloading but later i'm
5642,10-05,2:40,gonna talk more about this okay how would the speed current work uh one of the feature you probably noticed is
5643,10-05,2:47,sometimes you may use this kind of p2p application you feel like your machine
5644,10-05,2:52,slows down a lot okay so we will talk about why and a second application is
5645,10-05,3:01,actually one application that is used to worry um often in china for video streaming
5646,10-05,3:09,okay and also skype is another application so those are the some of the examples we will mention
5647,10-05,3:16,um some of them later okay before we start to talk about the p2
5648,10-05,3:21,application one thing we want to discuss is what is the performance of the p2p okay
5649,10-05,3:30,so when compared with the client server model um what is the difference okay what is the
5650,10-05,3:37,difference between client server model and p2p model basically means for example for for this file distribution
5651,10-05,3:43,okay the question is how much time should be used to
5652,10-05,3:52,distribute the files okay from one server to amperes okay we want to
5653,10-05,3:59,compare the performance of cleanser model and the p2p model and see which
5654,10-05,4:05,one is uh um it has better performance okay it is more efficient okay
5655,10-05,4:12,so now let's look at this example in this example we assume we assume the file size is f okay and
5656,10-05,4:22,you can see this is one server it has multiple
5657,10-05,4:27,clients okay a lot of clients and we have a file f okay file size f
5658,10-05,4:35,which we want to distribute to every client okay distribute to every client
5659,10-05,4:41,and if we are using client server model okay uh let's say firstly let's look at
5660,10-05,4:47,some of the parameters so firstly this server has a upload capacity
5661,10-05,4:53,upload capacity means upload speed okay and for each client
5662,10-05,5:01,it has one upload capacity and one download capacity which means uploading
5663,10-05,5:07,speed and downloading speed okay for each client it has a different uploading speed and downloading speed
5664,10-05,5:14,okay so for example for the peer eye we can see the uploading speed is ui
5665,10-05,5:21,downloading speed is di okay this is these are all the parameters you need to know before we do
5666,10-05,5:27,any calculation now let's look at the client server model
5667,10-05,5:34,you think about this for client server model if we want to distribute this file to every client
5668,10-05,5:42,that means every time one client make a
5669,10-05,5:47,request the server needed to upload this file to the network once
5670,10-05,5:54,okay that means if we have on clients if these alkalines make n requests
5671,10-05,6:01,then this server needs to upload this file and times okay that means it needs
5672,10-05,6:09,to upload and copies of this file okay so then let's see
5673,10-05,6:15,we if we want to understand the time used for distribution then we first need
5674,10-05,6:22,to think okay how much time do we need for uploading right because we need to upload this and copies
5675,10-05,6:29,so if the file size is f okay then the time to upload one copy
5676,10-05,6:37,for the server okay is f over u s
5677,10-05,6:43,okay this is the time to upload one copy if we want to upload any copies
5678,10-05,6:49,of course the time is just earn time n times f over us okay that is
5679,10-05,6:57,the uploading time okay pay attention uploading time and then we need to think
5680,10-05,7:02,about the downloading time so from downloading we know the downloading speed for each
5681,10-05,7:10,peer sdi right so for d for for number one for p1 is d1 for peer two is d2 okay
5682,10-05,7:19,so that means that means the downloading speed is different
5683,10-05,7:25,for every machine okay for every client if we consider
5684,10-05,7:30,the downloading time then download time for the first computer will be
5685,10-05,7:36,foreign the second computer will be
5686,10-05,7:42,f over d2
5687,10-05,7:48,okay so for the pri then the downloading time the time used for downloading is f
5688,10-05,7:53,over d i to continue okay and now we understand
5689,10-05,8:00,for uploading the servers uploading time in total is
5690,10-05,8:07,uh f over us and the downloading time is f f over d1
5691,10-05,8:13,for one f or d242 etc okay so these things can happen this this
5692,10-05,8:19,downloading and uploading can happen in parallel then that means if we consider the time
5693,10-05,8:27,we use the for file distribution then we only need to consider the
5694,10-05,8:33,maximum time among all of these times right so among all of these numbers we
5695,10-05,8:41,choose the maximum one then that is the time we use it for
5696,10-05,8:46,file distribution for distribute this file to an uh clients right so that
5697,10-05,8:53,means okay the distribution time should be the
5698,10-05,9:01,maximum of
5699,10-05,9:10,nf over us foreign
5700,10-05,9:24,so should it be that maximum of all these numbers okay
5701,10-05,9:29,then for this for f over d1 f over d2 f over d3 etc
5702,10-05,9:37,okay if we want to choose the maximum y is very easy we only need to choose
5703,10-05,9:44,f over dmin right the m means the minimum client downloading rate
5704,10-05,9:52,okay the minimum client downloading speed okay so eventually this formula
5705,10-05,9:58,becomes this okay becomes okay i only need to choose
5706,10-05,10:04,the maximum of lf over us and f over dmin okay f over d minimum so among
5707,10-05,10:12,these two numbers i choose the bigger one then that's fine okay this is a client server model i hope you
5708,10-05,10:18,understand uh the rationale behind okay foreign
5709,10-05,10:29,for p2p model we also need to upload and download okay the difference is this
5710,10-05,10:36,time at the server side do we need to upload
5711,10-05,10:41,and copies we do not we only need to upload one copy why because those peers
5712,10-05,10:51,can serve each other okay so for example this one copy is uploaded and maybe p1
5713,10-05,10:57,maybe the um pier one downloaded this copy okay all
5714,10-05,11:03,downloaded part of this copy then pier one can begin sharing this with other
5715,10-05,11:09,peers okay it so the the server do not need to be responsible to upload and
5716,10-05,11:16,copies okay then in this case we can say oh okay the server the uploading speed
5717,10-05,11:21,is us so the time for uploading for the server is only
5718,10-05,11:27,f or us okay and then after that those are uploading
5719,10-05,11:33,the uploading of the peers and the downloading okay among the peers can
5720,10-05,11:39,happen simultaneously so in this case we should consider the uploading speed of all the peers okay so for example
5721,10-05,11:46,this is u1 this is youtube
5722,10-05,11:53,okay the uploading speed of all the peers okay for one piece u1 for second place
5723,10-05,12:01,youtube so then you think about uploading speed if we want to uh finally
5724,10-05,12:08,download and copies then the server together with all the peers they need to
5725,10-05,12:13,upload and copied okay so that means in total the
5726,10-05,12:19,uploading time should be
5727,10-05,12:24,we need to upload pages we need to upload nf okay and copied but the uploading speed
5728,10-05,12:33,uploading speed this time is not the us okay it's actually the u.s
5729,10-05,12:51,okay the uploading speed is all of the uploading speed including the server and the client
5730,10-05,12:57,because those peers will also upload so that means it's equal to
5731,10-05,13:04,foreign
5732,10-05,13:10,so this is the time we used for uploading okay so here you can see we need two uh
5733,10-05,13:18,two numbers for time for uploading time one is the one copy from the
5734,10-05,13:25,server okay that means the time used is f or us
5735,10-05,13:30,the second number is this one is the total uploading time for earned copies
5736,10-05,13:36,okay and for downloading downloading no surprise it's very easy i've already won
5737,10-05,13:43,and forward d2f already through okay we continue right and then if you
5738,10-05,13:49,want to find the maximum downloading time then we just do f over d minimum
5739,10-05,13:55,okay so now among these three numbers among these three numbers
5740,10-05,14:01,f over us nf over us plus all the uploading speeds
5741,10-05,14:08,of the clients or of the peers and then f over dmin among these three numbers we
5742,10-05,14:17,need to choose the maximum okay we need to choose the maximum then i know
5743,10-05,14:23,probably by now you still don't know what is the which one is better which one has a better efficiency okay which
5744,10-05,14:31,one can be distributed file quickly and let's now compare the dp to p
5745,10-05,14:40,the distribution distribution time using p2p method and the dcs distribution time
5746,10-05,14:47,using com cleanser method okay let's compare these two how can we can
5747,10-05,14:53,we compare let's look at this assumption in this assumption we have uploading
5748,10-05,15:00,route u okay we're assuming all the clients do remember for the clients we have uis
5749,10-05,15:07,right so all the clients will assume they have the same uploading speed which is you and we assume f over u is one
5750,10-05,15:15,hour we are assuming the server's uploading speed is 10 times faster case 10 u and we also assume the
5751,10-05,15:23,download this video is the minimum downwind speed is uh equal to or bigger
5752,10-05,15:29,than the or greater than the uploading speed of the server so d min is
5753,10-05,15:35,equal to or greater than us okay then in this case in this case
5754,10-05,15:42,how can we compare these two okay let me just write down
5755,10-05,15:48,here
5756,10-05,16:10,foreign
5757,10-05,16:33,so those are the two numbers those are the two formulas we want to compare and
5758,10-05,16:38,then we want to say okay the assumption
5759,10-05,16:45,is that all your eyes equal to you
5760,10-05,17:08,okay so those are all the assumptions okay now let's look at these two
5761,10-05,17:13,formulas one and two okay foreign
5762,10-05,17:20,one for one we know d m i n is greater than uh us right
5763,10-05,17:29,so then
5764,10-05,17:38,it is correct because dmi n is bigger d minimum is
5765,10-05,17:44,bigger than us so we know f over d m and n is of course smaller or equal to f o u
5766,10-05,17:51,s right so then of course this will be smaller or equal to
5767,10-05,18:00,nf or us right so then you can see okay comparing
5768,10-05,18:05,these two okay then f over dmi is smaller that
5769,10-05,18:14,will cause for one
5770,10-05,18:29,right for one dcs then we do not need to look at f over dm anymore we only need
5771,10-05,18:36,to look at nf over us okay ac equals to
5772,10-05,18:45,maximum of over 10 u because u is equal to 10u okay and currently you probably
5773,10-05,18:52,do not understand why i change it to you later you will see okay
5774,10-05,18:57,then for two what will we know if we compare these
5775,10-05,19:04,two f or u s and f over dmin we already know the answer
5776,10-05,19:11,right so for two then
5777,10-05,19:16,we don't need to look at f over dmi anymore because
5778,10-05,19:21,we know it is smaller than f or us
5779,10-05,19:28,so we only need to compare this one and
5780,10-05,19:34,thank you and this one
5781,10-05,19:40,okay and if we change this into u
5782,10-05,19:49,h
5783,10-05,19:56,us plus let's change us into 10 u
5784,10-05,20:03,okay foreign
5785,10-05,20:14,and then let's we know the sum of all the uis if all the uis are the same we
5786,10-05,20:21,have n clients so that means we have earn you right so we're only to compare these two
5787,10-05,20:29,okay and now how how can we compare okay let's see
5788,10-05,20:35,for these two how can we compare if
5789,10-05,20:42,okay
5790,10-05,20:48,if n goes to infinity
5791,10-05,20:54,okay then in this case we can change
5792,10-05,21:01,we can still keep f over 10 u but for the second formula this becomes
5793,10-05,21:09,if n goes to infinity pay attention if n go to infinity then we can ignore this
5794,10-05,21:15,10 u right because n will become like a huge number right then tangyu doesn't
5795,10-05,21:21,matter anymore so then this becomes foreign
5796,10-05,21:28,this becomes f and f over n u okay then this equals to
5797,10-05,21:41,okay then we'll only need to compare f or rectangle and f over u of course f
5798,10-05,21:47,over u is bigger right so this then equals two f over u
5799,10-05,21:54,okay and then if you compare this one
5800,10-05,21:59,and this one and i have over 10u and an f over u so what are their difference
5801,10-05,22:05,the difference is if n goes to infinity
5802,10-05,22:18,dcf dcs will go to infinity
5803,10-05,22:24,right because you can see and is going to infinity and f over 10 u
5804,10-05,22:30,of cos is equal to infinity but if n goes to infinity
5805,10-05,22:36,okay then the t d p to p actually equals to f over uf overview window is one hour
5806,10-05,22:45,it's a constant number right it doesn't change anymore do you see the difference
5807,10-05,22:51,okay so the five if we plot this okay into a
5808,10-05,22:56,figure then you can say when n goes to infinity
5809,10-05,23:02,okay for client server model it is ink the
5810,10-05,23:07,distribution time is increasing linearly okay that means the distribution time
5811,10-05,23:13,we all goes to infinity also but if angle to infinity for p2p model
5812,10-05,23:21,eventually eventually this will
5813,10-05,23:26,be approximate to one hour it will be closer and closer to one hour okay but
5814,10-05,23:33,it will never increase beyond one hour do you see the difference okay the difference is the difference is
5815,10-05,23:41,for client server model again client server model if the number of clients is
5816,10-05,23:47,going bigger and bigger then the time distribution time is increasing linearly
5817,10-05,23:53,then the distribution time will go to infinity but if we have more and more
5818,10-05,24:00,peers in p2p model okay then this doesn't affect the
5819,10-05,24:08,distribution time too much because the decision time will finally be
5820,10-05,24:13,approximate to one hour be approximate to a constant number okay so that is the
5821,10-05,24:21,difference between client server model and p2p model so this is actually very intuitive if you if you think this if
5822,10-05,24:27,you're using analogy for example if i'm a server and the students in our class are the
5823,10-05,24:34,clients if what i i'm the only one serving the entire class then i of
5824,10-05,24:39,course i cannot handle a class that is very big if we have a thousand students
5825,10-05,24:45,how can i handle that right because all the requests are coming to me but if we are using p2p model which
5826,10-05,24:52,means everybody is teaching each other so all the students can teach each other okay then when you are requesting for
5827,10-05,24:59,service you are also providing service in this case it doesn't increase my
5828,10-05,25:04,workload right so then the distribution time or the serving time okay the
5829,10-05,25:10,service time is much much shorter compared to client server model okay
5830,10-05,25:16,so for this part do not worry okay i know you you are probably overwhelmed
5831,10-05,25:22,about this slide okay no test
5832,10-05,25:28,on this slide okay but
5833,10-05,25:33,i will have tests regarding this slide that means you don't need to know how we
5834,10-05,25:40,finally do the calculation but you need to understand what is the rationale
5835,10-05,25:45,behind and what is the takeaway message okay the takeaway message is for p2p
5836,10-05,25:52,model the distribution time we'll become will be close close to a
5837,10-05,25:59,constant number as the number of clients increasing or the number of peers increasing but for client server model
5838,10-05,26:05,the distribution time will increase linearly as the number of clients increase okay so those are the uh
5839,10-05,26:14,current conclusions you need to know okay so b current is one of the p2p file
5840,10-05,26:20,distribution application probably you have used this before but you may not understand the mechanism
5841,10-05,26:27,behind utorrent it is a very smart design i would say so generally the file
5842,10-05,26:33,is divided into the 256 kb chunks the peers in this torrent will send and
5843,10-05,26:41,receive the file chunks they are exchanging the file chunks they basically serve each other when they are
5844,10-05,26:48,also got service from each other so basically in bittorrent we have one
5845,10-05,26:53,server or we call it tracker this server is not the real server in the client
5846,10-05,27:00,server model and not in that sense but it's just a one tracker this track
5847,10-05,27:06,reveal tracks the peers participating in the torrent and then torrent is basically a group of
5848,10-05,27:12,peers exchanging the file chunks so let's say if a new user arrives alice
5849,10-05,27:19,arrives then alice will firstly obtain the list of peers from the tracker
5850,10-05,27:26,and then starts exchanging the file chunks with appears in this torrent so
5851,10-05,27:32,that is the general idea but when up here joining a torrent for
5852,10-05,27:38,example when alice firstly joined this torrent it has no chance but
5853,10-05,27:44,it will accumulate them over time from other peers so alice will gradually
5854,10-05,27:49,collect more and more final chance of course this peer will also need to register with the tracker to get list
5855,10-05,27:56,their own peers and connect to the subnetal appearance basically for those we call them as neighbors
5856,10-05,28:03,and they also need to pay attention when downloading the peer will upload the
5857,10-05,28:08,chunks to other peers okay so it is getting service and is also providing
5858,10-05,28:13,service to others so the pr makes change peers with whom it exchange chunks that means
5859,10-05,28:22,alice may decide to exchange chunks with abc right now but later it may decide to
5860,10-05,28:28,exchange chunks with the efg so the peers the peer may decide to
5861,10-05,28:34,change the peers with whom it is changed the chunks and also the peers may come
5862,10-05,28:40,and go once up here gets the entire file it may have two options one option is
5863,10-05,28:48,is it may be selfish and decide to live so i'm down i'm done with my file okay i
5864,10-05,28:55,don't want to stay here to provide more service it's a selfish behavior but it's a it's one option that the speaker can
5865,10-05,29:03,can do another option is it can stay in the storage and provide the service to
5866,10-05,29:11,other peers those are the two options and one request importance
5867,10-05,29:18,okay one requesting for chunks at any given time different periods have
5868,10-05,29:24,different subsets of file chunks so that means that means for example at
5869,10-05,29:31,this time the alice will ask the peer and say hey i'm interested in this file
5870,10-05,29:37,what kind of file chunks do you have at you at your site at least we'll ask this
5871,10-05,29:43,question to each peer and then those cures will say for example let's see
5872,10-05,29:51,here a pra may say oh i have one two three four
5873,10-05,29:58,five let's see let's see if this file has a one two three four
5874,10-05,30:13,let's say this one has a one two three four five chunks and a said i have uh
5875,10-05,30:19,one two three four five and b said
5876,10-05,30:27,he said i have two three and four she said
5877,10-05,30:35,i have three four and five
5878,10-05,30:42,d said i have two three and five so you can see at any given time different
5879,10-05,30:47,peers may have different subsets oh this file chunks then uh purely alice
5880,10-05,30:55,will check with each pure what kind of uh what what uh file
5881,10-05,31:00,chances they have then at least need to request for the chunks
5882,10-05,31:08,and it's need to make requests to abcd so pay attention there is one very
5883,10-05,31:14,important principle here this may be a test problem alice will
5884,10-05,31:21,ask your question missing chunks from the peers it will follow a principle called rarest first what does this mean
5885,10-05,31:29,for example if you look at a b c d okay a has one two three four
5886,10-05,31:34,five b has two three four c has three four five d has two through five and in this case in this case you can
5887,10-05,31:41,say two has multiple copies two is available on
5888,10-05,31:47,a b and also d third is available on a b c and d four
5889,10-05,31:55,is available on a b c and five is available on acd but one is available
5890,10-05,32:03,only on a so then one is the rarest piece then in
5891,10-05,32:11,this case alice will request the the rarest piece first that means alice will
5892,10-05,32:17,firstly contact a to get the chunk one
5893,10-05,32:24,why because remember this is a p2p network p2p means every peer can come
5894,10-05,32:31,and go especially when a for example a already has one two three four five it gets all
5895,10-05,32:37,the file right all the file chunks so amy decide to leave if a leave then
5896,10-05,32:42,nobody has the chunk of one then nobody can get the complete file
5897,10-05,32:49,so that is the issue that's why alice will need to request the rarest chunks
5898,10-05,32:54,first okay pay attention to that this will appear on the test and then
5899,10-05,33:00,when sending a chance let's send you the chunks b torrent has a very interesting
5900,10-05,33:06,mechanism called tit for attack so what does this mean this means alice sends
5901,10-05,33:11,chunks to those four peers currently sending her chunks at the highest rate
5902,10-05,33:18,so there are so many cheers right so many peers so alice among these appears
5903,10-05,33:23,alice will say oh okay so these four these four peers are sending me the file
5904,10-05,33:30,jumps at the higher street so they are the factors so i like this four so that
5905,10-05,33:35,io will also send them i'll be also sent them the
5906,10-05,33:42,bottoms at my highest at the high street so then it will choose the top four
5907,10-05,33:48,peers then the other peers will be talked talked means the other peers
5908,10-05,33:54,cannot receive file chunks from alice alice will just choose the best of work
5909,10-05,33:59,and ignore the remaining say hey i don't want to become friends with you because you are not good enough so as we are not
5910,10-05,34:08,sent the chunks to alice to those peers so it will only choose the basketball of
5911,10-05,34:16,course l is the best four may change so alice will do re-evaluation of the top
5912,10-05,34:23,four every 10 seconds and always choose the top four
5913,10-05,34:28,then you may say um if so so you may say what if there are another noob here coming out who is
5914,10-05,34:36,really really fast right so you have to give opportunity to other peers also that's why every 30 seconds at least
5915,10-05,34:44,randomly select another appear randomly select another appear from the group and
5916,10-05,34:50,then start sending tabs if this peer is really good and alice is not
5917,10-05,34:57,disappointed then of course l is real optimistically and choke disappear and
5918,10-05,35:03,say oh okay you are new but you're good enough you can join my top four then i we become friends i can send the
5919,10-05,35:10,um the file trans to you but if of course if this appear is not good enough
5920,10-05,35:16,then alice will also talk this here and and refuse to communicate with this peer
5921,10-05,35:23,so this is like the principle then following this principle you can see alice can always
5922,10-05,35:30,can always communicate with the best four um our cause and it may also become the
5923,10-05,35:37,one of the best four for the for the other peers so let's see an example here we have alice and we have bob so alice
5924,10-05,35:46,optimistically and talksport bob is new then alice may become one of bob's top
5925,10-05,35:55,four providers so bob is very happy bob recipe and say okay i want to send you
5926,10-05,36:03,at the highest rate also so number becomes one of alice's
5927,10-05,36:08,top four providers then at least of course will do the same right so that in this way you can see
5928,10-05,36:17,teeth voltage ensures that each peer can find the better trading
5929,10-05,36:26,partners and get the file faster okay so this is a i would say this is a why
5930,10-05,36:33,i see a t-test t410 is a very smart mechanism okay so it ensures the peers
5931,10-05,36:40,can always find their best partners to to uh exchange file terms okay all right
5932,10-05,36:48,okay pay attention this may appear on the test so in the test i made ask you
5933,10-05,36:54,what is uh for example i may ask you what is the best basic mechanism for t4
5934,10-05,37:00,touch or what is the effect of what you did for that okay so this is something
5935,10-05,37:05,you need to pay attention foreign
5936,10-05,37:11,so then the next product we are going to discuss is the video streaming and
5937,10-07,0:02,so then the next product we are going to discuss is the video streaming and the content distribution network
5938,10-07,0:09,video is a very important part in application layer okay among all of
5939,10-07,0:15,these applications because we almost use video every day right uh the video
5940,10-07,0:20,traffic is actually one of the major consumer of the internet bandwidth
5941,10-07,0:26,um for example the netflix youtube they took about 37 percent at 16 percent of
5942,10-07,0:31,the downstream residential isp traffic respectively this was your old data okay
5943,10-07,0:37,this is not updated you can say maybe it is even bigger percentage right and also
5944,10-07,0:42,the youtube users was 1 billion and netflix users was 75 million but now i
5945,10-07,0:49,as i again this number make become bigger anyway we we faced several
5946,10-07,0:54,challenges we said with at least two challenges in the video streaming so one
5947,10-07,0:59,challenge is about the skill how can we reach so many users
5948,10-07,1:07,can we use just one single mega video server will this work
5949,10-07,1:14,apparently this will not work right we have discussed this question in web
5950,10-07,1:20,service in dns for those even for those applications the single server may not work okay
5951,10-07,1:28,because of like single point of failure the scalability issue the uh the
5952,10-07,1:34,location where should we put this server right because of a number of problems the second challenge is the
5953,10-07,1:40,heterogeneity problem what does this mean this means different users actually
5954,10-07,1:45,have different capabilities if you think about this so for example some users are using a
5955,10-07,1:53,mobile phone some users are using wireless network right some some users
5956,10-07,1:58,may have a bigger benefit but some may have a very
5957,10-07,2:03,poor benefit but in this case how can we accommodate all these different users with different
5958,10-07,2:10,capabilities how can we provide very smooth experience to them this is
5959,10-07,2:16,actually another i would say huge challenge in the video application
5960,10-07,2:21,so the solution to the about problem is that we need to have some kind of
5961,10-07,2:26,distributed infrastructure at application level to ensure smooth experience of the users
5962,10-07,2:34,in video streaming before we talk about the the video application let's first look at the
5963,10-07,2:41,video itself so we do is basically a sequence of images you think something
5964,10-07,2:47,is moving the video but actually it's not it's actually just a number of static images a sequence of static
5965,10-07,2:55,images displayed at a consonance rate that makes you feel like oh the things
5966,10-07,3:01,are moving for each image for each image it's just an area of pixels each pixel
5967,10-07,3:09,is usually represented by the beats for example it may be represented by the red green blue color
5968,10-07,3:16,for red we know it's it can be one byte for blue it can be one by green it can
5969,10-07,3:22,be one byte we can use for example 24 bits to represent one pixel of course
5970,10-07,3:28,that's just one method there are many different methods to represent a digital
5971,10-07,3:34,image but anime for image and for video we have
5972,10-07,3:42,different encoding methods so for example one method is called spatial
5973,10-07,3:47,encoding so coding means we use redundancy within and between the images
5974,10-07,3:53,to decrease the number of bits used to encode the image so that means for
5975,10-07,3:59,example here for spatial coding we can say we have a bunch of pixels in the same
5976,10-07,4:06,color and it's in purple if we can use for example if we can use nine to
5977,10-07,4:12,represent purple color because in reality we do not use 9 to
5978,10-07,4:19,represent the purple color right but this is just for for demonstration for example so if we use 9 to wrap it in a
5979,10-07,4:26,purple color if we have 1000 pixels in this one row then that
5980,10-07,4:36,this is one row we have one thousand pixels then when we have if we want to
5981,10-07,4:41,include this then we have to do
5982,10-07,4:51,so we have say nine nine nine nine so we continue in total we have one thousand
5983,10-07,4:58,nines to wraps in this one thousand purple color pixels but if we are doing
5984,10-07,5:04,special encoding we don't need to we don't need to do this we can just say
5985,10-07,5:09,okay let's do this using
5986,10-07,5:14,nine and one thousand what does this mean this means the color value is nine
5987,10-07,5:20,and the number of repeated values is one thousand so this 9 is repeated for one
5988,10-07,5:27,thousand times okay this is a used to represent represent the one thousandth
5989,10-07,5:32,purple color pixels this is called spatial coding we can so
5990,10-07,5:38,here you can see instead of using 1000 numbers we can use only two numbers to represent that right so this saves the
5991,10-07,5:45,space or this saves the number of bits used to include the image a lot this is
5992,10-07,5:52,one type a certain type of encoding is called temporal coding so temporal
5993,10-07,5:58,coding means instead of sending a complete frame at i plus one for example
5994,10-07,6:05,we have frame i and frame i plus one they have very very minor differences
5995,10-07,6:12,you cannot even notice that right so then in this case we do not is we do not
5996,10-07,6:18,need to send the entire frame i plus one instead of sending this complete frame
5997,10-07,6:24,at i plus one we send only the differences from frame i this can save a
5998,10-07,6:30,lot of bits so those are the two coding examples
5999,10-07,6:37,and for video we also have constant bitrate and the variable bitrate constantly bit rate means the video
6000,10-07,6:43,encoding rate is fixed it never change but variable bitrate means that we do including rate changes as amount of
6001,10-07,6:50,spatial temporal coding changes so the next thing we are going to discuss is
6002,10-07,6:55,how can we stream the videos to the users okay how can we do the video
6003,10-07,7:01,streaming so this is a very simple scenario in this scenario we have a video server
6004,10-07,7:07,the video server has the video stored on it and then we have the internet we have
6005,10-07,7:13,the clients so our goal is we want to stream the video to the clients okay how
6006,10-07,7:19,can we do that can we use one big server big mac server to connect to
6007,10-07,7:26,all the clients that's not a good idea right you usually okay usually what we do is
6008,10-07,7:33,actually uh we use something called content distribution network okay so i
6009,10-07,7:38,i'll talk about that later but for now let's talk about the mechanism of
6010,10-07,7:43,streaming when they do the streaming one very effective way is to use dash okay
6011,10-07,7:49,what is dash that is a dynamic adaptive streaming
6012,10-07,7:56,over http that means the basic protocol is hcp then on top of http we can do
6013,10-07,8:04,some dynamic and adaptive streaming okay how can we do that at the server side
6014,10-07,8:13,at the server side the file the video file is divided into
6015,10-07,8:19,multiple accounts it's not one complete piece of video it's actually multiple
6016,10-07,8:25,chunks each chunk is stored and encoded at different rates
6017,10-07,8:31,different risk means it may be faster it may be slower okay which means if it has
6018,10-07,8:40,a higher rate than the video quality is usually higher because you can the
6019,10-07,8:46,videos the images can be displayed at the higher speed right so the video
6020,10-07,8:52,quality is usually better if you have a lower rate than the video quality is
6021,10-07,8:57,usually poor and then there is one file called manifest file
6022,10-07,9:04,this file will provide the urls for different chunks
6023,10-07,9:09,okay different charts at the client side the client
6024,10-07,9:15,periodically matters the server to client bandwidth it will measure the benefit and say oh
6025,10-07,9:21,my benefit is very good right now or all my bandwidth is not so good okay
6026,10-07,9:27,depending on the bandwidth the client will consulting the manifest file
6027,10-07,9:33,request one chunk at a one time
6028,10-07,9:39,and also choose the maximum coding rate sustainable given the current database
6029,10-07,9:48,so that means if my bandwidth is very good right now i can choose a
6030,10-07,9:55,file chunk or video chunk with higher rate if my bandwidth is not so good then i
6031,10-07,10:02,can choose a chunk with lower rate so the client can choose different
6032,10-07,10:09,coding risks at different points in time okay the read may change depending
6033,10-07,10:15,because the bandwidth may change right so then the reads maintain that's why when you watch the video sometimes you
6034,10-07,10:21,can see oh the video quality is really good but sometimes it becomes a little bit blurry okay so that's because it is
6035,10-07,10:29,dynamically changing the risk of the video okay all the reads of the file
6036,10-07,10:36,chunk and if you think about this uh mechanism that you will realize
6037,10-07,10:43,the intelligence is actually at the client side it's not at the server side
6038,10-07,10:50,that means the client determines when to request the chunk
6039,10-07,10:56,okay so that we don't won't have the buffer starvation or overflow
6040,10-07,11:01,and kind will determine what encoding retro request based on the bandwidth
6041,10-07,11:07,available so it will always request the higher quality videos the higher quality
6042,10-07,11:13,video chunks okay when more bandwidth are available
6043,10-07,11:19,and client also determines where to request the chunk okay because as we said the manifest
6044,10-07,11:27,file will provide the urls for different chunks and then the client can check
6045,10-07,11:34,this manifest file and decide oh this server this url server is
6046,10-07,11:39,probably closer to me so i want to request my file from that server okay so
6047,10-07,11:46,the client is making um in the decision based on the manifest file or this server if this server has a
6048,10-07,11:53,higher bandwidth okay then i can request from this server you can see the client
6049,10-07,11:58,has the intelligence pay attention to this this may become a test problem okay i may ask you
6050,10-07,12:07,who has the intelligence in dash who is deciding one what and where
6051,10-07,12:13,in the dash so you need to know it's actually the client it's not the server
6052,10-07,12:19,so then now let's go back to talk about the two challenges the one challenge is
6053,10-07,12:24,how can we stream the content to hundreds of thousands of simultaneous users
6054,10-07,12:29,option one is we can use one single large map server but as i mentioned you
6055,10-07,12:35,may say seller problems firstly single point of failure if this server is done then
6056,10-07,12:40,this entire application is done nobody can get videos right so second point of network condition okay this server may
6057,10-07,12:48,be too busy there are too much traffic coming to this server right so this is
6058,10-07,12:53,uh this may cause the network congestion and then the long path to decent clients
6059,10-07,12:59,so if you put this server in us then how about the users from europe from asia
6060,10-07,13:07,right how can they connect to this server okay their response time may be
6061,10-07,13:13,too long and also multiple copies of video sent over the other clinic these
6062,10-07,13:18,are all the problems associated with the one mega server so then the explorer is
6063,10-07,13:26,okay this doesn't scale how can we address this issue now as i said we will use something called
6064,10-07,13:33,content distribution network to address that issue then the option two is we can store or serve the multiple
6065,10-07,13:42,copies of videos at multiple geographically distributed sites this is called the content distribution network
6066,10-07,13:49,so for content distributing network there are usually two modes one mode is called enter deep enter deep means
6067,10-07,13:57,so basically first you need to understand that the content dictionary network is basically a bunch of servers
6068,10-07,14:03,okay a bunch of servers which store and also serve the multiple copies of videos
6069,10-07,14:09,and they are distributed at different locations different geographical uh
6070,10-07,14:14,geography locations right then in this case in this case for enter deep
6071,10-07,14:20,basically means we push those servers deep into many access networks do you
6072,10-07,14:28,still remember access networks we have for example
6073,10-07,14:36,residential networks
6074,10-07,14:46,you still channel networks and mobile networks right those are all the access networks so we can push the servers into
6075,10-07,14:53,those exact network for example we may have some kind of contribution network server
6076,10-07,15:00,in a campus that's exact state we may have cdn server on on the sensitive
6077,10-07,15:07,campus so this is closer to close to the users then the user can get the videos
6078,10-07,15:14,faster this is one mode another mode is instead of pushing those servers into
6079,10-07,15:20,into the access networks we actually put those servers put a smaller number of
6080,10-07,15:29,larger clusters in the ixps which are
6081,10-07,15:35,internet exchange points near the access networks but they are not with the indu
6082,10-07,15:41,access networks okay so those are the two modes that may be used enter deep and bring home
6083,10-07,15:47,okay so right now let's look at this one example in this example i i try to show
6084,10-07,15:53,you how the cdn works let's say um cdn scenario restore copies of
6085,10-07,15:59,content addresses and notes right so each cdn node is one is a obsidian server or a bunch of servers
6086,10-07,16:06,then you can see now we have we have this uh cdn network those servers they
6087,10-07,16:14,all store a copy of a magnet okay this is a one one video and if this clients
6088,10-07,16:23,when they want to watch this video madman this
6089,10-07,16:29,client will ask the server where is madman then the netflix server
6090,10-07,16:36,will reply with a manifest file telling this kind hey the minima is
6091,10-07,16:42,available here and there so it's telling the urls then the client may decide oh
6092,10-07,16:47,okay this server is very close to me so i want to request management from this
6093,10-07,16:52,server okay when i see close it doesn't necessarily mean
6094,10-07,16:58,geographically close it may mean it's the response time is shorter which
6095,10-07,17:05,means oh okay this this path is not so it's not uh very congested or not very
6096,10-07,17:11,busy so i can get to the video faster all these benefits is higher than the
6097,10-07,17:17,other path so it really depends um this is the general idea for the cdn
6098,10-07,17:23,if of course one path network part is congested then the uh subscriber or the
6099,10-07,17:30,user can decide to choose a different copy from a different server
6100,10-07,17:36,all right so that is the general idea now let's take a closer look of the cdn
6101,10-07,17:42,pay attention many companies many video providers they have their own
6102,10-07,17:50,recipients they have own cdls to distribute the content especially for large companies
6103,10-07,17:57,because they have the power they have the money to do this right but for some small providers for small video
6104,10-07,18:04,companies they may not they may not have the cdn network they may not have the
6105,10-07,18:11,infrastructure in this case they may use some third-party cdns to provide the service
6106,10-07,18:19,for example here we have one company called netcinema.com
6107,10-07,18:24,this netsimo.com does not have the cdn network so that's
6108,10-07,18:31,why it is actually using the service the cdn service
6109,10-07,18:36,from a third-party provider called kingcdn.com which means the videos are actually
6110,10-07,18:43,stored on kingcdn.com is not stored on now cinema.com
6111,10-07,18:49,okay the contents are stored in kingcdn.com now in this case this becomes a little
6112,10-07,18:56,bit complicated because when the user is making requests
6113,10-07,19:01,so for example client bob is making requests it is actually requesting
6114,10-07,19:06,directly from netcinema.com okay he said oh okay i want to watch
6115,10-07,19:12,this video but the video is not stored intimate.com actually it is actually stored in
6116,10-07,19:19,another url it's stored in the cdn provider
6117,10-07,19:24,kingzickian.com then in this case how can bob reach the
6118,10-07,19:30,kings again.com okay let's look at the process the process is like this
6119,10-07,19:35,firstly bob will get the url for the video now cinema.com 6y something from
6120,10-07,19:42,the nasima.com webpage and then bob will need to contact
6121,10-07,19:49,contact bob's local dns server to resolve this url
6122,10-07,19:55,because this is a this url is just telling the host name etc it doesn't
6123,10-07,20:00,tell the ip address right if you have watched the video in the uh dns part
6124,10-07,20:08,then you will know okay we need to translate this into ip address right so
6125,10-07,20:14,that in this case in this case bob's local ds server need to resolve this url so usually what
6126,10-07,20:23,happens if you remember what happened in the in the dns part you will know bob
6127,10-07,20:28,the look of the ass may contact the root and then contact the tld
6128,10-07,20:36,which is a.com and then final contact
6129,10-07,20:49,the final account has authoritative ds right so which is the net cinema
6130,10-07,20:59,so it is actually doing something else right so contact with may contact route
6131,10-07,21:05,may contact tld but um sometimes these gaps this this steps
6132,10-07,21:11,may be skipped okay but eventually it will need to contact the authoritative
6133,10-07,21:16,yes which is actually this one which is actually this one so and this
6134,10-07,21:24,this step is very interesting so after above the local audience contact enough
6135,10-07,21:30,cinemas the authoritative dance the authority within us
6136,10-07,21:35,normally it should return an ip address right but in this case this dns will not
6137,10-07,21:43,return an ip address it will return another url why because it knows it
6138,10-07,21:53,knows the video is not on that cinema it is actually on key incident so that's
6139,10-07,21:59,why it is actually returning another url to redirect the bob to kingcdn.com so
6140,10-07,22:06,then after this local ds receives this then it will help to contact this kcdn's
6141,10-07,22:15,authoritative dns eventually to resolve this url the new url
6142,10-07,22:20,of course before this it may contact the rule to make trd etc right so it may or may not show it
6143,10-07,22:28,uh contact those ones and then finally finally can cdn will
6144,10-07,22:35,return the ip address for this url to both the local ds and then above the
6145,10-07,22:41,local dns will reply this back to what and finally bob now know the ip address
6146,10-07,22:47,for that url so bob will contact that one contact this one which has the video on
6147,10-07,22:54,on it okay so then it will require the video from the king scan server and the
6148,10-07,22:59,video will be streamed via atp so you can see in this case in this case
6149,10-07,23:05,we are using something called redirect dns redirect okay so dns is used to
6150,10-07,23:12,redirect the client from the original server to the
6151,10-07,23:17,real content distribution network server okay that is very important pay
6152,10-07,23:23,attention to that and leave me this may appear on the test so this is another example of netflix in
6153,10-07,23:31,netflix in netflix uh netflix is actually using amazon cloud
6154,10-07,23:38,to store the videos okay store the original copy of the
6155,10-07,23:43,videos and also um the manifest files so basically you
6156,10-07,23:48,can see for the clients the clients need to firstly contact netflix the registration and accounting servers okay
6157,10-07,23:56,to get a netflix account this is step one and in step two
6158,10-07,24:02,but we all browse netflix videos and then request for the manifest file
6159,10-07,24:08,so the manifest file is returned for the request in the video after that after that you can see
6160,10-07,24:16,actually those videos are already uploaded to the cdn servers
6161,10-07,24:22,okay the student servers which are distributed in different locations then
6162,10-07,24:28,based on the manifest file the client bob will check which one is the closer
6163,10-07,24:34,one and then start the dash streaming with the cdn server so this is the
6164,10-07,24:40,entire process amazon cloud is studying the videos and uploading those videos to cdn servers and cloud will also return
6165,10-07,24:48,the manifest file to the to the client okay the client is only doing the
6166,10-07,24:53,account registration and management with the netflix servers so the next one is youtube youtube is
6167,10-07,25:01,actually using a pulling cache which means the client is pulling the
6168,10-07,25:07,um videos from the server and it is also using the ds redirect which means dns is
6169,10-07,25:15,used to redirect the client to the cluster which the rtt is the lowest rtt
6170,10-07,25:21,we know this is the round trip time which is uh which means the response
6171,10-07,25:26,time is the lowest which which means it can respond to the users faster okay so
6172,10-07,25:32,i hope you still remember what his dns redirect this is what we just discussed here the dns redirect
6173,10-07,25:39,all right the nasa one the last application is cancan okay kanken is
6174,10-07,25:46,also a very interesting one you probably haven't heard about this before but can can is a very popular application used
6175,10-07,25:54,in china for watching the videos basically 10 is using a hybrid model
6176,10-07,26:01,what does this mean we know for client server model we need to pay for the
6177,10-07,26:06,server hardware and also the bandwidth right the bandwidth the server uses to
6178,10-07,26:11,distribute the videos this may be very costly very costly okay
6179,10-07,26:17,if you want to satisfy all the demand from all the users right you have to
6180,10-07,26:22,deploy a lot of servers and have a lot of bandwidth distributed videos that's
6181,10-07,26:28,why uh kenkey is actually using a p2p model or we call it a hybrid cdn and p2p
6182,10-07,26:36,model so what does this mean this means when the clients make the
6183,10-07,26:41,initial request the client requested the beginning of the content from the cdn
6184,10-07,26:46,servers if it was freshly start with the server and then in parallel thus this uh client
6185,10-07,26:54,will also request the content from the peers we just talk about p2p right it
6186,10-07,26:59,will also request the company from the peers when the p2p traffic is sufficient
6187,10-07,27:06,which means if the peers can already satisfy
6188,10-07,27:12,the the request from the uh from the client then the client will not rely on
6189,10-07,27:19,the server anymore the client will seize the streaming from the cdn servers and
6190,10-07,27:25,only stream from the peers only when the p2p traffic becomes insufficient then in
6191,10-07,27:32,this case the client will restart the cdn connections and connect with the the server to get the
6192,10-07,27:40,the video from the server okay and return to the mode of a hybrid cdn p2p
6193,10-07,27:46,streaming so it's like for example for our class you will if you have a problem to resolve you will firstly contact me
6194,10-07,27:54,at the same time you will also contact your classmates and if you can already resolve this
6195,10-07,28:00,problem from your classmates then you don't need any help from me only when
6196,10-07,28:06,you think oh they cannot help meet me okay they cannot satisfy my request then
6197,10-07,28:11,in this case you can start contacting with me again say hey can you help me
6198,10-07,28:17,with this problem then in this case you return to the mode of hybrid city and p2p streaming so in this case you can
6199,10-07,28:24,say uh client server model is like more like a backup or p2p
6200,10-07,28:29,but one very interesting observation i had before when i use the canker is
6201,10-07,28:35,whenever i start camping then my computer becomes super busy a super a
6202,10-07,28:43,temperature become becomes super higher high and then it becomes super slow the
6203,10-07,28:49,reason is because for p2pu you think about this the p2p application you are
6204,10-07,28:55,downloading and you are also uploading you are making requests you are also
6205,10-07,29:00,actually serving others so that's why it uses a lot of the cpu and also bandwidth
6206,10-07,29:07,okay that's why your computer can become super busy uh and it may sometimes
6207,10-07,29:13,because it is occupied too much resources sometimes it may block the other applications okay the other
6208,10-07,29:19,application may not get enough resources to to work that's why you feel like your
6209,10-07,29:25,computer is getting slow it's it's not response responding anymore okay things
6210,10-07,29:30,like that yeah so that's all about the video streaming and the content distribute
6211,10-07,29:36,network foreign
6212,10-10,0:03,foreign
6213,10-10,0:14,chapters the first chapter we studied the principles of the networking and we
6214,10-10,0:20,learned about the different layers the second chapter is about application layer so we learned about the application like
6215,10-10,0:28,emails web services videos etc the chapter 3 then is going to be a layer
6216,10-10,0:35,below which is a transport layer okay and we know from what we have learned
6217,10-10,0:40,before we know transport layer is actually providing services to the app layer to the application layer okay and
6218,10-10,0:48,in this chapter we are going to learn in detail about those services okay
6219,10-10,0:54,so basically we will try to to talk about the multiplexing the
6220,10-10,0:59,multiplexing uh how we do the reliability transfer we mentioned in tcp
6221,10-10,1:05,tcp is a reliable protocol right so then we will design our own reliability
6222,10-10,1:13,transfer protocol from scratch and tell you the principles why we do that why we
6223,10-10,1:20,do this okay so it's like that um then after that we will talk about the
6224,10-10,1:26,protocols that we use in reality including the udp and tcp okay
6225,10-10,1:32,so let's review the transport layer services um the transparently here basically
6226,10-10,1:40,provides the logical communication between
6227,10-10,1:45,application processes running on different halls those still remember a
6228,10-10,1:51,long time ago i mentioned when we see communication to communication we always say oh computer a is communicating to
6229,10-10,1:57,computer b but that is not accurate right we should say process a or process one
6230,10-10,2:06,is communicating with process two okay process one on computer a is coming
6231,10-10,2:12,communicating with process 2 on computer b okay that's how we should say
6232,10-10,2:19,um the communication um so basically what the transport layer
6233,10-10,2:26,protocol do is at the center side uh the transport layer will break the
6234,10-10,2:31,application layer message into smaller segments and then pass them down below
6235,10-10,2:38,to the network layer
6236,10-10,2:45,so we now add application layer we are sending out a message like http message
6237,10-10,2:51,hp request message atv rush long message email messages right so we look we call
6238,10-10,2:58,them as messages application layer then when it goes down to transport layer the
6239,10-10,3:03,messages need to be divided into smaller units we call them
6240,10-10,3:09,as segments okay and if you still remember what we
6241,10-10,3:17,will do is we add headers we add transport layer headers
6242,10-10,3:22,to each segment and then pass them to the layer below
6243,10-10,3:27,so that is at the center side at the receiver side the receiver will reassemble
6244,10-10,3:35,reassemble those segments into a message and pass that to the layer above which
6245,10-10,3:41,is the application layer okay and in the transport layer the common
6246,10-10,3:48,protocols we use arc tcp and udp okay
6247,10-10,3:55,so some of you may get confused about transport layer and network layer so you may think oh if i know network layer is
6248,10-10,4:02,for routine then why do i need a transport layer okay so yes that's
6249,10-10,4:08,correct network layer is can do the routing but the routing the communication is between cost okay so
6250,10-10,4:16,it's like when you deliver a package okay uh oman you write a letter
6251,10-10,4:21,then the postman will simply drop this letter to
6252,10-10,4:27,the uh for all this package to your house or to your friend's house right so
6253,10-10,4:33,it's like that it's like a half speed half speed and house communication
6254,10-10,4:39,but as we said the communication needs to happen really happen in processes
6255,10-10,4:44,okay between processes um so we need for example my firefox is
6256,10-10,4:51,communicating with the apache on the server okay it's one my person firefox
6257,10-10,4:59,process when it is running it's not called application anymore it's called a process what this process is
6258,10-10,5:06,communicating with another server process at the apache server so it's the
6259,10-10,5:11,communication should happen between process and process and on my computer i may have a lot of processes not just the
6260,10-10,5:19,firefox i may also have my email running right i may also have other applications
6261,10-10,5:25,running like video games maybe i'm playing video games right so a lot of processes then we need to specify which
6262,10-10,5:34,process you are talking to okay or which process is communicating
6263,10-10,5:40,so then within this house we have multiple processes it's like when you deliver a package okay you need to know
6264,10-10,5:48,you need to say oh i'm delivering this package to somebody to to some person this specific
6265,10-10,5:56,person in that house in that address okay so it's like that
6266,10-10,6:02,you can see we have an analogy on the right side uh it's a household analogy
6267,10-10,6:08,so travel case the end house is sending letters to tell kids uh in bill's house
6268,10-10,6:16,okay so basically here we know the houses are like the host okay and the
6269,10-10,6:22,kids are like the processes okay so then the letters in the envelope are like the
6270,10-10,6:28,application messages then the transported layer protocol is like
6271,10-10,6:33,the app and the host n and bo will d max d multiplexing
6272,10-10,6:40,uh the letters to the in-house siblings okay and then the network layer protocol
6273,10-10,6:46,is like the postal service okay so you can say the transpose layered protocol
6274,10-10,6:52,is actually happening within this person within this horse
6275,10-10,6:58,okay with in-house and the network layer protocol is happening uh for this entire network
6276,10-10,7:05,okay uh now let's look at
6277,10-10,7:11,um the two type of protocols one is tcp and unwind codp and we have mentioned
6278,10-10,7:16,this for many times but i'm sure you have already forgot everything okay
6279,10-10,7:22,um so basically tcp is a reliable protocol it will do reliable in order
6280,10-10,7:30,delivery um so tcp can provide services like
6281,10-10,7:35,congestion control flow control and connection setup it requires connection
6282,10-10,7:42,setup okay i have mentioned before what is congestion tone what is flow control
6283,10-10,7:47,i hope you still remember because that may be a test question okay i may ask
6284,10-10,7:53,you what is the difference between flow control and congestion control you should know that okay
6285,10-10,7:58,so let me remind you again flow control means we don't want to overwhelm the
6286,10-10,8:04,receiver foreign
6287,10-10,8:18,the receiver um it's like you don't want to call your friend again again and again
6288,10-10,8:24,okay so or or if you're sending things too fast he cannot process then you are
6289,10-10,8:31,overrunning your receiver so that is the flow control
6290,10-10,8:48,congestion control means not to overwhelm the public network
6291,10-10,8:54,okay not to overwhelm the public network that means if i know the network is
6292,10-10,9:00,already congested okay then i won't send the package out or i will control my
6293,10-10,9:06,speed and sending the packets out slowly so it's like that that's the major
6294,10-10,9:11,difference between flow control and congestion control okay so the second protocol is called udp udp
6295,10-10,9:20,is an unreliable protocol it will do unordered delivery
6296,10-10,9:28,okay it doesn't do flow control it doesn't do congestion control nothing okay
6297,10-10,9:35,um and it does not require connection setup okay for both type of protocols tcp and
6298,10-10,9:43,udp they do not guarantee the delays and they do not guarantee the bandwidth okay
6299,10-10,9:50,both services do not provide this um
6300,10-10,9:55,okay so that is the overview of the transport layer now let's talk about multiplexing and
6301,10-10,10:01,d-mark d multiplexer you heard about that right i talked about that so multiplexing basically means we
6302,10-10,10:09,handle the data from uh the sender side okay we handle data from multiple
6303,10-10,10:16,sockets and transform the header that is called the mod flexing and then d
6304,10-10,10:21,multiplexing is means at the receiver side when we receive the package we have
6305,10-10,10:27,to assign them to different receiving processes or receiving ports okay so
6306,10-10,10:34,that is called the demultiplexing so if we use the postal service analogy again
6307,10-10,10:40,then multiplexing is like at the center side okay for example your parent is
6308,10-10,10:47,collecting all the letters from your house okay from your sibling from uh
6309,10-10,10:53,everybody okay and then click them together and then put them into uh the
6310,10-10,11:00,outgoing mailbox okay that's the multiplexing and then d
6311,10-10,11:06,multiplexing is like one for example when the receiver when your friends
6312,10-10,11:11,parents okay receives a lot of letters for different people then they will
6313,10-10,11:17,check the packet the letter the letter uh envelope
6314,10-10,11:22,and then assign these letters to different people in the house so that is
6315,10-10,11:30,the multiplexing so and now you can see we have two computers communicating uh
6316,10-10,11:36,with the server buildings machine as a server um and now you can see this
6317,10-10,11:43,p3 is communicating with the p1 they are processing p1 p2 p2 p4 are all processes
6318,10-10,11:49,so p2 is communicating with p4 okay so it's like that and now let's uh
6319,10-10,11:57,this is if this gives you like a overview of uh multiplexing and d
6320,10-10,12:03,multiplexing but we actually have uh two types of multiplexing and d multiplexing
6321,10-10,12:09,we are going to talk about this later okay so now let's look at firstly how
6322,10-10,12:14,the d multiplexing works okay as i said the marketplace is like a sun in the
6323,10-10,12:20,laterals to different people in the house right so how does this work basically the horse receives ip
6324,10-10,12:27,datagrams okay each datagram so here
6325,10-10,12:33,ip datagram basically means uh it's a network layer thing okay and network
6326,10-10,12:40,layer we in do you remember at application layer we call it a message at the transport layer
6327,10-10,12:47,we call it a segment right then at network layer we give a different name
6328,10-10,12:52,it's called ip datagram okay so now you can view an iptogram as a
6329,10-10,12:58,letter when the host receive a letter one of the hosts receive our ip datagram okay
6330,10-10,13:04,from the network layer then each datagram has the source ip address and
6331,10-10,13:10,destination ip address it's like when you when you receive a letter on the letter you will see the source address
6332,10-10,13:16,and destination address so from this address to that address okay
6333,10-10,13:22,and also each datagram carries one transport layer segment
6334,10-10,13:29,okay so it's like this
6335,10-10,13:55,and when you receive an ip in the ground it looks like this firstly
6336,10-10,14:03,it has a higher ip layer header okay in ip layer header or network layer
6337,10-10,14:11,header you can see the source ip and destination ip okay and then within this
6338,10-10,14:32,within this it carries it carries a tcp or udp segment
6339,10-10,14:39,okay so basically we can use the source ip and destiny ip to to identify oh this
6340,10-10,14:45,is to this computer or that computer okay so like we are using the soft stress areas and destiny address to
6341,10-10,14:51,identify the address for the house okay then within this within this diagram it
6342,10-10,14:58,carries something then something is called tcp or udp segment it's like
6343,10-10,15:04,um um so so this segment is like this is
6344,10-10,15:10,okay this is the tcp odp settlement format so you can say
6345,10-10,15:16,add to the
6346,10-10,15:23,this part is called the transport layer header
6347,10-10,15:35,okay in the transport layer header then you can see what the soft spot
6348,10-10,15:41,and destination part okay source port and dashing reports are
6349,10-10,15:46,like the names on the letters okay it's like my call for address a or draw now for
6350,10-10,15:55,address b okay it's like that so the source point number and the singapore number are like
6351,10-10,16:02,the names on the letters so based on the pod numbers you are able to know oh this
6352,10-10,16:07,goes to process a oh that goes to process b so basically
6353,10-10,16:12,the house will use the ip addresses and phone numbers to
6354,10-10,16:19,direct segments to the appropriate socket okay this is a what we do
6355,10-10,16:25,this is how the d multiplexing works okay so if you look if you think about
6356,10-10,16:31,the entire process it's basically uh do you remember the five layers
6357,10-10,16:38,send aside receiver side they all have five layers and we said the message is
6358,10-10,16:44,going to be breaking into smaller segments and we will add headers to the smaller
6359,10-10,16:51,segments and then it's passed to the lower layer and then
6360,10-10,16:56,we will again add headers
6361,10-10,17:06,to each segment right
6362,10-10,17:15,okay and it has three seven and then pass them to the receiver
6363,10-10,17:21,okay and the receiver sign the receiver will receive something like this
6364,10-10,17:26,okay at the network layer and network layer they will receive something like the datagram
6365,10-10,17:33,okay and then they will read the source ip destination ip and check the source portion decision port and then pass them
6366,10-10,17:40,to the up layer so i i want to put this into the big
6367,10-10,17:45,picture so you kind of know what is happening okay now let's look at the
6368,10-10,17:51,connectionally steam multiplexing which is corresponding to udp why do we call it connections because we
6369,10-10,17:59,know for udp we do not need to establish any connection that's why we call it connectionless okay if you recall what
6370,10-10,18:08,we have learned in the soccer program assignment we basically whenever we want to uh
6371,10-10,18:16,start a communication as the client side especially okay so we need to create a
6372,10-10,18:21,socket first and this socket will have a local port number
6373,10-10,18:27,okay so for example here datagram socket
6374,10-10,18:33,my socket 1 equals to new socket and we give it a phone number
6375,10-10,18:39,when creating the datagram to send into the udp socket we must also specify
6376,10-10,18:46,the destination ip address and the singapore number do you remember that okay reset for udp we must specify the
6377,10-10,18:54,destination ipn port but for tcp we do not need to do that right because a
6378,10-10,18:59,channel or has already been established okay so then when the house receive the udp
6379,10-10,19:07,segment the host will at the receiver side the host the receiver will check the destination port in the segment and
6380,10-10,19:15,direct the udp segment to the circuit with that port
6381,10-10,19:21,okay that means the uip datagrams with with the same decision point number
6382,10-10,19:28,but different source ip addresses or source point numbers will be directed to
6383,10-10,19:34,the same socket as a destination so what does this mean this means no matter this
6384,10-10,19:41,package no matter where this package comes from as long as they have the same
6385,10-10,19:47,destination port then there will be sent to the same socket
6386,10-10,19:54,okay let's look at an example in this example
6387,10-10,19:59,we have again one server and two clients okay
6388,10-10,20:04,p1 process p1 is communicating with p3 and p4
6389,10-10,20:11,so now at the client side we need to create a new socket with socket number
6390,10-10,20:16,9157 and then add the other client side we
6391,10-10,20:22,also need to create a new socket 5774 at the server side it will create a new
6392,10-10,20:27,socket which has port number 6428 thank you
6393,10-10,20:33,peter is sending a packet or we required a segment
6394,10-10,20:39,to the server with source part 9157 and this report four six four two
6395,10-10,20:48,eight and we know now this segment will be sent to
6396,10-10,20:53,the socket of p1 right
6397,10-10,20:59,and then this this p1 will reply back with source port 6428 and destiny report
6398,10-10,21:06,91557 for the the other side to the same thing
6399,10-10,21:13,okay so can you guess here what is the saucepot and what is the
6400,10-10,21:19,destination port so now you notice the one thing because
6401,10-10,21:24,this packet and this packet they share the same destination port sorry not this
6402,10-10,21:31,one no this one this one this set this share the same doesn't import and then they
6403,10-10,21:37,will be sent to the same socket oh p1 no matter where they come from although
6404,10-10,21:44,they have you can say they have different they have different soft spots but still
6405,10-10,21:49,they will be sent to the same socket okay this is called connectionless
6406,10-10,21:55,demultiplexing okay the second type is called connection
6407,10-10,22:00,oriented multiplexing and this is specially for tcp
6408,10-10,22:06,this one is different from that the one of udp okay so in tcp
6409,10-10,22:16,um the socket is identified by four tuple
6410,10-10,22:22,by a four tuple which contains source ip address source point number destination
6411,10-10,22:28,ip address and decision post number so when we receive a package or a
6412,10-10,22:35,segment whatever you call it okay the receiver will use all the four values to
6413,10-10,22:41,direct the segment to the appropriate socket that means if any value
6414,10-10,22:48,for these four values if any one is different then the packet will be
6415,10-10,22:54,directed into a different socket okay so that is uh the connection
6416,10-10,23:01,oriented um and several hearts may support many
6417,10-10,23:06,simultaneous tcp sockets each socket identified by its own four people that's a
6418,10-10,23:11,um for that product we know right for web servers web servers have different
6419,10-10,23:17,sockets for each connecting client the non-processing http will have a different socket for each request okay
6420,10-10,23:25,so now let's look at an example an example again clients
6421,10-10,23:31,a okay and server b
6422,10-10,23:37,then client c so uh we also use abc to represent ip addresses for this horse
6423,10-10,23:44,okay so now let's look at um let's look at the um
6424,10-10,23:51,server part first the server here now how through processes p4 p5 and p6
6425,10-10,23:59,the client side has a p1 p2 p3 okay
6426,10-10,24:05,and now i want you to look at um
6427,10-10,24:10,this one first okay for this one the source ip is
6428,10-10,24:17,b and the source port is 80. the destination ip is a and that's not
6429,10-10,24:24,import is nine five one seven sorry 9157
6430,10-10,24:31,okay and this one is
6431,10-10,24:38,80. call number 80. this one also has port number 80.
6432,10-10,24:47,and this one also had pawn number 80. this one has port number of
6433,10-10,24:53,five seven seven five
6434,10-10,24:59,okay so i'm marking the phone numbers some of you may say oh why does p 45 p6
6435,10-10,25:07,has the same port we will explain this later okay for now
6436,10-10,25:13,i want to i want you to look at these three this one
6437,10-10,25:18,okay this one and also this one look at these three
6438,10-10,25:24,packets these three segments and check their source ip and source
6439,10-10,25:30,port are they the same their source ip and source port
6440,10-10,25:37,are they the same for all these three foreign
6441,10-10,25:45,sport as you can see they are different they're different right they are not the
6442,10-10,25:51,same okay but if you check destination ip and destination port are they the same
6443,10-10,26:00,they all have the same destination report definite destination ip okay
6444,10-10,26:07,and if we are using nationalists the multiplexing if we share the same
6445,10-10,26:13,destination ip and the same destination port they will be directed to the same socket
6446,10-10,26:18,which is a the socket for p1 right but here as you can see although these three
6447,10-10,26:26,packets let's call them number one number two and number three although
6448,10-10,26:32,number one two three they all have the same destination ip and decision port they are assigned to different sockets
6449,10-10,26:43,do you see for example number one goes to the socket for p4 number two goes to
6450,10-10,26:49,the socket for p6 number three goes to socket for p5 why as we said before in tcp we will check
6451,10-10,26:59,all four values okay if any value is different then they
6452,10-10,27:05,will be assigned to a different socket okay and especially for two and three
6453,10-10,27:11,you can see although they come from the same machine they all come from c
6454,10-10,27:17,okay but because we come from different processes they feel that they have a
6455,10-10,27:23,different source point numbers okay two has five seven seven five and seven has
6456,10-10,27:29,nine one five seven because their point number sourceful numbers are different then they have still they have to be
6457,10-10,27:35,assigned to different sockets and the server side
6458,10-10,27:41,okay this is something you need to pay attention uh that is actually the feature of
6459,10-10,27:46,connection oriented the multiplexing so in reality in reality if p4 p5 and p6
6460,10-10,27:54,they share the same port numbers okay we do not call them as different
6461,10-10,28:00,processes we call them as different threads of the same process okay so in
6462,10-10,28:09,reality in our reality p4 p5 p6 they are just a one process
6463,10-10,28:16,okay one process we call it p4 for example but this process may share
6464,10-10,28:22,different may have different sockets they have multiple sockets okay and for
6465,10-10,28:29,this for this kind of threshold we call it threaded server that means in this
6466,10-10,28:34,case um we can deal with multiple clients
6467,10-10,28:39,requests at the same time okay with one process but multiple
6468,10-10,28:46,threads okay multiple service and if you you have already taken 139 or if you are
6469,10-10,28:53,going to take 139 you keep that in mind you are either learn the relationship between threats and processes
6470,10-10,29:01,next let's talk about a little bit about the udp okay connectionless transport
6471,10-10,29:06,udp so again udp protocol is just a best
6472,10-10,29:11,service best effort protocol okay so it will try it best to do the work it
6473,10-10,29:18,doesn't care about the loss the reliability okay so it may
6474,10-10,29:23,may lose data it may deliver the data out of order okay and also its
6475,10-10,29:30,connection is we do not need to do any handshaking between the sender and receiver
6476,10-10,29:35,each edp segment is handled independently of the others okay so
6477,10-10,29:42,udp can be used to um for example do the
6478,10-10,29:48,streaming mod media because we know multimedia can tolerate the loss right
6479,10-10,29:54,if we lose some pixels it doesn't really matter okay we can still see the entire picture
6480,10-10,30:00,um and then it also it is also using other protocols like dns we just learned dns
6481,10-10,30:06,right because it's very fast you do not need to accept the connection etc so it's a so udp is preferred we can also
6482,10-10,30:15,do reliable transfer over udp okay if you want but it's not because the udp
6483,10-10,30:23,itself has this functionality it's because you can add reliability at the
6484,10-10,30:28,application layer okay so that means you can do the
6485,10-10,30:34,um checking errors or checking reliabilities at an upper layer is not in within the transport lead okay so
6486,10-10,30:41,that's something you can you should keep in mind and this is the uh udp segment format
6487,10-10,30:48,so basically if you write a letter or write an email okay uh the email message
6488,10-10,30:55,as we said will be be cut into smaller pieces each piece is called a segment
6489,10-10,31:02,it's like this okay but we need to add something called header to that segment
6490,10-10,31:10,okay so the header information will contain the source point number that's
6491,10-10,31:16,an important number we learned this right the length of this entire udp segment including the header and also
6492,10-10,31:23,the checksum okay so then within the data part the
6493,10-10,31:28,payload part is just the application layer data it's like if you write an email then all the email content will be
6494,10-10,31:36,put in the payload part if you look at the header
6495,10-10,31:41,okay each line is 30 to 32 bits which means four bytes
6496,10-10,31:49,so the udp header in total will be
6497,10-10,31:58,advice so eight parts it's actually very short later we are going to learn uh tcp when
6498,10-10,32:06,we learn tcp will investigate the tcp header is about 20 bytes
6499,10-10,32:11,or 20 plus in more than 20 okay so the udp header is much smaller
6500,10-10,32:18,so some of you may ask if udp does not provide any flow control
6501,10-10,32:24,congestion control no connection and no reliability is guaranteed nothing now
6502,10-10,32:30,why do we still use udp okay we have multiple reasons number one reason we do
6503,10-10,32:37,not need to establish connection between the center and receiver okay that seems
6504,10-10,32:44,a lot of delay okay it saves delay that's number one that's very important sometimes we
6505,10-10,32:50,really want it to be fast okay we don't want we don't want to add like the
6506,10-10,32:56,connection time okay it takes time and second
6507,10-10,33:01,so it's very simple no connection states at the center and the resume side is the
6508,10-10,33:07,methane okay we we can just if you want to send you the same just specify the
6509,10-10,33:12,destination and there's an important there's an ip important that's that's enough okay it's very simple
6510,10-10,33:19,third the third point is that it has a very small header size
6511,10-10,33:25,it has only eight bytes of header if you use tcp then it's going to be it's gonna
6512,10-10,33:30,be 20 plus bytes okay so the header size is a bigger in
6513,10-10,33:36,tcp that's why udp is sometimes favored okay it seems the resources
6514,10-10,33:43,and number four udp does not provide any congestion control okay so it can blast away as fast as
6515,10-10,33:52,desired as long as um you want to send as long as you have
6516,10-10,33:57,the data then you can go ahead to send data you don't need to worry about anything else okay so that those are all
6517,10-10,34:03,the benefits of udp and this may be a test question i may ask you what are the features of
6518,10-10,34:10,udp or what are the benefits of using udp okay you should delete list at least one
6519,10-10,34:18,um the last thing i want to talk about is the udc udp checksum so here you can see
6520,10-10,34:24,the checksum what is checksum used for techsum is used to detect the errors
6521,10-10,34:31,which are usually inflict bits in the transmitted segment so basically what
6522,10-10,34:36,will happen is at the center side the center side will treat the segment
6523,10-10,34:41,contents including the header fails as a sequence of 16 bit integers so we for
6524,10-10,34:48,example we treat this one as one part and this one another part then every 16
6525,10-10,34:54,bit every 16 bit is treated as one integer and then we do
6526,10-10,35:01,the addition of the sacrament content okay we do the addition for this we call this chuck sum okay and
6527,10-10,35:09,then the center will put the checksum value here in the udp
6528,10-12,0:01,um the last thing i want to talk about is the udc udp checksum so here we can see
6529,10-12,0:07,the checksum what is checksum used for techsum is used to detect the errors
6530,10-12,0:13,which are usually the flipped bits in the transmitted segment so basically what will happen is at the center side
6531,10-12,0:21,the center side will treat the segment contents including the header fields as a
6532,10-12,0:27,sequence of 16 bit integers so we for example we treat this one as one part
6533,10-12,0:33,and this one another part then every 16 bit every 16 bit
6534,10-12,0:40,is treated as one integer and then we do the addition of the segment content
6535,10-12,0:46,okay we do the addition uh for this we call this checksum okay and then the
6536,10-12,0:52,center will put the checksum value here in the udp uh chuckson field
6537,10-12,0:59,the receiver sign when the receiver receives the assignment it will compute the checksum of the received segment in
6538,10-12,1:06,the same way in exactly the same way and check if the computed checksum
6539,10-12,1:12,equals to the checks and field value if
6540,10-12,1:18,if the are not the same that means error is
6541,10-12,1:24,directed sorry error is detected if they are the same that means no error is
6542,10-12,1:30,directed detected so basically we need to come the center side will calculate
6543,10-12,1:35,one value put it into this field the receiver side will also do the same calculation and save the match if they
6544,10-12,1:42,match no error if it doesn't match then we we can see there is error okay
6545,10-12,1:49,so you may ask how do we do the checksum how do we do the editing uh now you can
6546,10-12,1:54,see we have two 16-bit integers okay and it's very easy to do the add-in zero
6547,10-12,2:00,plus one is one one plus zero one one plus one is zero and add one so this
6548,10-12,2:07,becomes one you continue okay until you finish all the edit if
6549,10-12,2:12,you have one more bit okay then you need to carry out this bit
6550,10-12,2:19,from the most significant bit and put it to the to here
6551,10-12,2:24,okay you move this one to here and then add one again okay then one plus one is
6552,10-12,2:33,zero and add one and z it becomes zero and then add one it becomes one okay so
6553,10-12,2:40,that is called the sum and now the check sum means you flip the beats okay so we
6554,10-12,2:45,flip zero to one zero to one one two zero one two zero one two zero so it's like that okay this is how you calculate
6555,10-12,2:52,the check sum uh this is a how to do the eddie and
6556,10-12,2:58,everything okay and basically the sender and the receiver will follow the same way to
6557,10-12,3:03,calculate this checksum okay we will continue with the 3.4 principles of
6558,10-12,3:10,reliable this transfer and let me tell you this part is very important
6559,10-12,3:17,and it will definitely appear on the test so pay attention from now
6560,10-12,3:24,um so basically in this section we are going to design a reliable data transfer
6561,10-12,3:30,protocol from scratch okay so i can show you the principles of the designing and
6562,10-12,3:36,you you will understand oh why i do this why i do that there are some reasons behind okay so basically for reliability
6563,10-12,3:43,transfer our goal is we want to transfer the data
6564,10-12,3:49,reliably okay um and this is very important in application transport and also link
6565,10-12,3:56,layers this is the reliability transfer is the top 10 list um important
6566,10-12,4:01,networking topics okay uh and what we are going to discuss
6567,10-12,4:07,today is basically about how we are going to design such a protocol to make
6568,10-12,4:14,sure we indeed have reliability transfer so now you can look at the figure on the
6569,10-12,4:20,left and on the left you can see we have sending process on the right you can see the receiver process okay
6570,10-12,4:27,um and then now we have a transport layer we know transport layer is going to provide a service to the application
6571,10-12,4:34,layer okay and ideally if the transporter
6572,10-12,4:39,layer has a reliable channel okay that means all the data are sent through this reliable channel
6573,10-12,4:46,then no data will get lost right so this this is reliable we don't need to do anything else
6574,10-12,4:53,it's like if our usps is reliable completely reliable and you will never
6575,10-12,5:00,lose any letters or packages okay but is that the truth
6576,10-12,5:06,no right that is not the truth so your name
6577,10-12,5:11,the channel itself is unreliable like usps is unreliable okay similarly
6578,10-12,5:18,networking is also unreliable you think about the links we are using like the wireless links the cables or even the
6579,10-12,5:26,fiber the fibers although it has a very low error rate but this it still has errors okay uh wi-fi has a lot of errors
6580,10-12,5:35,i would say okay then with this kind of unreliable channels how can we achieve
6581,10-12,5:42,the reliability that's the issue okay then what we will do in reality is okay
6582,10-12,5:48,let's design some kind of data transfer protocol okay then the upper layer can just call
6583,10-12,5:56,some reliability transfer protocol okay and say oh okay please send this
6584,10-12,6:02,for me in a reliable way okay and then this protocol we are basically
6585,10-12,6:09,ensure everything is reliable okay by
6586,10-12,6:15,calling some unreliable transfer functions
6587,10-12,6:20,okay by using some unreliable channels okay so then
6588,10-12,6:26,this is a this is uh what we will do in the real in the reliable data transfer
6589,10-12,6:31,protocol so basically we will say okay for example i understand you i'll do
6590,10-12,6:36,some packets uh it's fine but how are we gonna ensure the reliability we may say okay check it
6591,10-12,6:43,again if it's it's lost then let's send it again right so using this way we can
6592,10-12,6:49,ensure the reliability okay that's what we are going to do in the reliable this transfer protocol we
6593,10-12,6:56,are going to design something like that to ensure the reliability okay so i'll just skip this part and at
6594,10-12,7:03,the receiver receives receiver side you can see um they will call a relay relay position
6595,10-12,7:09,for receive and then finally after all the receive uh data are received and
6596,10-12,7:14,then we will deliver the data to the upper layer which is the application layer okay so i just skip that
6597,10-12,7:21,all right so then what we will do is we will incrementally develop the sender
6598,10-12,7:27,and receiver size of reliable this transfer protocol uh we consider we consider only unit
6599,10-12,7:35,direction of this transfer okay that means the data is only from sender to
6600,10-12,7:40,receiver but the control flow sorry the control uh information will flow on both
6601,10-12,7:47,directions okay that means data is going one way but the control information can be sent back okay
6602,10-12,7:53,all right let's look at rdt 1.0 rdt means reliability to transfer okay
6603,10-12,7:59,version one we assume we are sending data over a
6604,10-12,8:06,reliable channel in this case the underlying channel is
6605,10-12,8:11,perfectly reliable no bid errors no loss of packets okay when we say reliable or unreliable
6606,10-12,8:18,we will we will mainly refer to these two aspects bit errors or loss of
6607,10-12,8:23,packets okay and then in this case if we have a reliable channel then do we need to do
6608,10-12,8:29,anything no we don't need to do anything so this is rdp 1.0 you do nothing that's
6609,10-12,8:36,very easy right very easy okay rdt 2.0 now let's assume the
6610,10-12,8:43,channel has big errors okay pay attention we assume the channel has big
6611,10-12,8:49,errors but no loss
6612,10-12,8:58,okay we assume the channel can deliver all the packets but some packets may
6613,10-12,9:04,have big hours okay with habit errors um so the underlying channel may flip
6614,10-12,9:13,bits because we have only zeros at once we let me have let me see bit arrows we basically mean
6615,10-12,9:19,um zero becomes one one becomes zero right philippines in the packet and then the question is how can we
6616,10-12,9:25,detect the error how did how can we detect a bit error do
6617,10-12,9:31,you still remember when we talk about the udp
6618,10-12,9:36,we talked about something called checksum you remember this
6619,10-12,9:41,okay how do we deter that how do we detect errors we set at the center side
6620,10-12,9:47,the center will calculate the traction basically treat a 60 treat every 16 bit
6621,10-12,9:56,as a one integer and then add it integer together right so we calculate checksum and put the checksum into this field
6622,10-12,10:05,okay take some fear then when this packet is received at the receiver side the receiver will calculate the checksum
6623,10-12,10:12,again in the same way and then compare if that checksum is the
6624,10-12,10:17,same as this taxum if they are the same we say no error okay if they are not the
6625,10-12,10:25,same then we say oh some piece has been flipped there are errors do you remember
6626,10-12,10:31,that okay so that's how we detect the errors okay how we detect the arrows but the
6627,10-12,10:38,question is oh if we know there are some errors then
6628,10-12,10:44,how can we recover from the arrows for human being how do we recover from
6629,10-12,10:49,errors during a conversation for example if i say something wrong what do you do start over
6630,10-12,10:55,start over right yes so you just signal me right you will signal me say hey professor said something wrong right and
6631,10-12,11:03,then i will um correct that okay i'll i'll repeat
6632,10-12,11:08,and translate so that is how we recover from error so let's look at what is
6633,10-12,11:14,happening here so basically i will check some firstly to detect the bit errors and then we use
6634,10-12,11:22,something called x acknowledgment ack
6635,10-12,11:27,okay to express explicitly tells the center that the packet is received okay
6636,10-12,11:34,but if this is not okay if the packet had arrows then we will directly see
6637,10-12,11:40,negative acknowledgments k-o-n-a-k neck
6638,10-12,11:46,okay and ak so the in this case the sender when it
6639,10-12,11:53,receives naked it will re-transmit the packets
6640,10-12,11:59,okay to correct the arrows so it's just a re-transmission of the packet
6641,10-12,12:07,um so this is the rdt 2.0 we have a channel with mid-bit
6642,10-12,12:13,arrows but this 2.0 has a fatal flow what is the flow
6643,10-12,12:19,the floor is basically what happens if a c k or nak is corrupted
6644,10-12,12:26,so if this is corrupted then the center side doesn't know what has happened at
6645,10-12,12:31,the receiver so what should the sender do should i retracement should i not you so if you do not
6646,10-12,12:40,retransmit them maybe the receiver side has some errors right you cannot correct it but if you
6647,10-12,12:46,decide to retransmit then you the receiver may re receive a duplicate
6648,10-12,12:51,package so then how can we address that issue so basically in order to address
6649,10-12,12:57,that duplication issue the sender will add sequence numbers to
6650,10-12,13:03,each packet okay that is very important how do we handle the duplications we add sequence
6651,10-12,13:10,number to each packet so basically in this case when the
6652,10-12,13:15,sender is rescinding a certain packet it will say oh i'm receiving packing fine
6653,10-12,13:21,okay then receiver side we'll look at this packet and say oh
6654,10-12,13:28,um if for example if i didn't receive packet file correctly then i will use
6655,10-12,13:35,the new packet file if i have received 5 correctly then i'll just discard the
6656,10-12,13:42,duplicate packet okay so that's what we do with uh with the duplication
6657,10-12,13:50,okay and pay attention uh in this case we are
6658,10-12,13:55,talking about a stop and read mode so basically the sender will send one
6659,10-12,14:00,packet at a time then which for the receiver's response and then the sender
6660,10-12,14:06,continue okay if the sender does not get any response from the receiver then the sense the sender cannot continue okay so
6661,10-12,14:13,one pack at a time we are using a stop and wait wait let's now discuss the 2.1
6662,10-12,14:21,okay i mean 2.1 is actually adding the sequence number okay adding the sequence
6663,10-12,14:26,number 2.0 is we use a a c key and aak okay
6664,10-12,14:33,so now second number is added into the packet um and the two two single numbers are
6665,10-12,14:40,needed only two are needed actually 0 and 1 we are surface why because as we
6666,10-12,14:47,said here we only need uh to send one packet at a time right so we only need
6667,10-12,14:53,to uh denote this packet and this old packet and new packet so zero and one
6668,10-12,14:59,are enough okay um and we also the center side also must
6669,10-12,15:06,check if the received nak or ack is corrupted okay and the receiver side
6670,10-12,15:12,then the receiver must have if the received packet is duplicated or not okay the receiver cannot know if its
6671,10-12,15:21,last ack or any case is received okay at the center side
6672,10-12,15:26,that means that receiver can send signals to the sender but it cannot know if that is or that is a received
6673,10-12,15:33,correctly or not okay so it's like there is a curtain between the sender and the receiver side
6674,10-12,15:40,now that is 2.1 okay let's review again 2.0 is we adding the and we use n a k
6675,10-12,15:49,and ack okay to signal the center
6676,10-12,15:54,and 2.1 is we add six numbers to handle the duplications
6677,10-12,16:00,okay now for 2.2 we want to design uh
6678,10-12,16:06,nak free protocol so what does this mean
6679,10-12,16:11,because we use ack both ack and nak to signal the center right so that means if
6680,10-12,16:20,we design the package the packet must have two fields one field is n a c k
6681,10-12,16:26,another field is nak okay so we can we can see oh ack is one or is k0 and k is
6682,10-12,16:33,one or nk 0. okay but we say the la case
6683,10-12,16:39,is kind of redundant we want to say how can we remove this one okay if we remove
6684,10-12,16:44,this field we can basically save some space for for the data for example right so save some resources then that's why i
6685,10-12,16:52,want to design a nak free protocol so that instead of naked what can the
6686,10-12,16:58,receiver do to repeat the functionality of nak so this is a very interesting thing i
6687,10-12,17:04,would say this design is is also very smart so let's now think about an example in this example you
6688,10-12,17:11,let's see a okay you are sending a gift to be okay
6689,10-12,17:19,to a friend b as new york okay and this is a
6690,10-12,17:25,christmas okay gift time and you shouldn't be as an apple
6691,10-12,17:32,for the first time okay and b will say what
6692,10-12,17:39,a c k apple
6693,10-12,17:44,right so then this means apple is good okay b
6694,10-12,17:49,is very happy and then you send your friend uh orange
6695,10-12,17:57,okay and then your friend will send back he should send back ack orange right but
6696,10-12,18:05,if there is something wrong then previously what we will do is what we will see
6697,10-12,18:12,m a k orange right so something is wrong with orange
6698,10-12,18:19,please send it again to me this is what we did originally but now if we want if
6699,10-12,18:25,we want to remove an ak we want to remove this how can we replace it okay so what we
6700,10-12,18:32,can do is is this your friend doesn't want to hurt you
6701,10-12,18:38,so instead i was saying hey your orange is bad i don't like that
6702,10-12,18:44,female constantly say oh i like the apple so much okay
6703,10-12,18:55,he doesn't want to hurt you so instead of saying the orange is bad your friend
6704,10-12,19:01,will just say oh the apple is very good then you will begin to think oh what happens to my orange
6705,10-12,19:07,okay i sent you orange but you didn't comment okay you just say oh something is very good about the last gift
6706,10-12,19:14,right then this indicates something is wrong with my second gift with my orange
6707,10-12,19:22,does this make sense okay so this is what we will do in in
6708,10-12,19:28,the networking even now working instead of seeing naked instead of naked the current
6709,10-12,19:35,package the receiver will just ack the last package received okay
6710,10-12,19:45,okay it's similar to the orange apple thing instead of naked only say the
6711,10-12,19:50,cardinal wine is not good we will just see the last one is good then the center will realize there is something wrong
6712,10-12,19:57,with the current package that makes sense okay so that's what we will do okay so the
6713,10-12,20:06,duplicate now even you will see oh the first time i have ack airport second time i have ack airport game this is uh
6714,10-12,20:13,called a duplicate sdk
6715,10-12,20:19,okay when we see a duplicate ack at the center side this will result in the same
6716,10-12,20:25,action and and making okay we are basically retransmit to the current
6717,10-12,20:31,package so it's like when you receive two ack
6718,10-12,20:36,apples you will find some things wrong with your orange and then you will resend
6719,10-12,20:43,another orange to a friend okay similar things in the networking if you
6720,10-12,20:50,receive duplicate sdk for the last packet then you will need to resend or
6721,10-12,20:55,re-transmit the current package and the next one rt 4.0 we will deal with the
6722,10-12,21:01,channels which has errors and loss okay now it's not just errors
6723,10-12,21:07,okay we may experience loss of packets then in this case what can we do okay so
6724,10-12,21:14,now we can say in the end of this new assumption the underlying channel can also lose the packets like the data or
6725,10-12,21:22,the ac keys both of them okay and then um we may still use checksum to detect
6726,10-12,21:29,errors we may still use sequence number to remove the duplications we may still
6727,10-12,21:35,use ac keys but we may still do transmission they all help but not
6728,10-12,21:40,enough why because those packets may simply get lost okay as i said it's like there is a curtain
6729,10-12,21:47,between the sender and the receiver they cannot see each other they cannot communicate right so then uh when for
6730,10-12,21:55,example when the sender sends something to the to the receiver the data gets lost at the receiver side the receiver
6731,10-12,22:01,receives nothing right the receiver doesn't know what has happened okay so it will of course have has has
6732,10-12,22:09,no reason no response to the sender and then at the center side the center receives no feedback from the receiver
6733,10-12,22:16,right now what can the center do it cannot do a real transmission because it
6734,10-12,22:21,it doesn't receive any duplicate sdks right so then what can we do in this
6735,10-12,22:27,time in this case i will see the center
6736,10-12,22:33,after sending out the packet it will wait for some time to wait for the response
6737,10-12,22:40,okay if after a reasonable period of time the sender does not receive
6738,10-12,22:46,anything then the sender will do a re-transmission okay so it's like if you send a gift to
6739,10-12,22:53,your friend okay your gift should your friend should write a thank you letter to you okay if after 14 days you didn't
6740,10-12,23:01,receive any thank you letter then you will reason the gift right so to make sure your friend
6741,10-12,23:08,received the gift so this is what we do so basically the center will reach for a reasonable
6742,10-12,23:17,amount of time here the keyword is reasonable okay and later we will discuss how we
6743,10-12,23:24,get this reasonable time okay it's like when you send a gift to a friend you cannot say oh i listen again after one
6744,10-12,23:31,hour doesn't make sense right it takes time for the gift to arrive at your friend it
6745,10-12,23:36,takes time for a friend to write you the letter right so reasonable time is a is a very
6746,10-12,23:42,important so the time the reasonable amount of time basically means the round trip time
6747,10-12,23:47,we need to estimate hormone time is used to reach the
6748,10-12,23:53,receiver and then how much time do we need for the receiver to send back the
6749,10-12,23:58,feedback like a secure and k okay so it's like if you take if you really it
6750,10-12,24:04,takes seven seven days from sacramento to new york for the gift and then take
6751,10-12,24:10,another seven days for the letter to arrive from your friend to you round
6752,10-12,24:15,trip time into 14 days so that is a reasonable amount of time basically if the sender
6753,10-12,24:22,um does not receive any ack during this time then the sender will re-transmit
6754,10-12,24:27,okay if the package or the ac case just got delayed okay just got delayed not
6755,10-12,24:35,lost okay for example the data is delayed it's not lost all the sdks are
6756,10-12,24:41,just delayed are not lost then in this case the real transmission will be a duplicate okay but you don't need to
6757,10-12,24:49,worry because the sequence numbers will handle this okay for example if let's see uh you
6758,10-12,24:56,send your friend a gift and your friend replied a letter by the letter you you
6759,10-12,25:01,expect the 14 days to receive the letter but now um the letter arrived at the 15th day
6760,10-12,25:10,okay but you already sent out another gift now in this case your friend will
6761,10-12,25:15,receive two gifts from you right this is a duplicate but we don't need to worry about that because the sixth number will
6762,10-12,25:22,handle the duplicate okay it's the same thing if the sdk just arrived late and
6763,10-12,25:27,the sender has already sent out a packet okay has already retransmitted the
6764,10-12,25:33,previous packet then the receiver may have duplications um in this case we just use secret
6765,10-12,25:38,number to remove the duplication okay
6766,10-12,25:43,um so then this means how do we wait for a reasonable time we just need a timer
6767,10-12,25:50,okay we need a countdown timer okay so let's look at an example here
6768,10-12,25:55,in this example we have a sender the sender is sending out packet zero here
6769,10-12,26:01,we assume we have no lots okay no loss everything is received the receiver will
6770,10-12,26:06,receive package there and see ack package zero so we continue so the
6771,10-12,26:14,packing one and ac key packet one then we send the package 0 again and ack
6772,10-12,26:19,package 0. so here you can see we use only zero and a one as a single number because we said we it's already enough
6773,10-12,26:25,okay but if we have a loss then what should we do take zero
6774,10-12,26:32,ack 0 and then it sends out packet one center package one and pack the one is
6775,10-12,26:40,lost receiver has no response for packet one there you can see the sender will have a
6776,10-12,26:48,timer when the timer times out it will resend packet one okay now the
6777,10-12,26:54,receiver receives packing one and it will ack one and then centers and package zero the receiver ack0 so it
6778,10-12,27:01,will continue okay so what if we have ac kilos
6779,10-12,27:08,if we have ac key loss what will happen is peck is zero acq zero as normal take it
6780,10-12,27:15,one ac q1 but this time pay attention a
6781,10-12,27:21,c k is lost that means at the center side the center
6782,10-12,27:27,hears nothing from the receiver no feedback from the receiver then the
6783,10-12,27:33,sender will say oh what should i do if nothing
6784,10-12,27:39,if i hear nothing then i'll just rely on the timer if the timer times out then it
6785,10-12,27:46,will reason the packet one then in this case at the receiver side you can see because the receiver has already
6786,10-12,27:54,received packing one and it received package one again okay
6787,10-12,28:00,and then the receiver will use the sequence numbers to deal with the
6788,10-12,28:06,duplication so basically we'll say oh i received two packing one the second packing one will be discard discarded
6789,10-12,28:13,okay so then it will continue as normal this is the ac key loss okay
6790,10-12,28:20,and paper pay attention we set the timer must has a reasonable time
6791,10-12,28:27,if the time is not reasonable then it will create some problems for example
6792,10-12,28:33,pegas0 ack 0 pack 1 and ac k1 ac k1 is
6793,10-12,28:39,delayed so that's why packet one is firstly sent out again
6794,10-12,28:46,and then we received acky then in this case pay attention this ack one at the
6795,10-12,28:52,center side the center will think this ac keyword is actually for
6796,10-12,28:58,the new ecq one not the old ac camera right okay
6797,10-12,29:04,so um and whatever happened next okay is
6798,10-12,29:12,and the receiver side so don't get overwhelmed as a receiver side the
6799,10-12,29:17,receiver will receive another packing one and then it will ac key one again
6800,10-12,29:25,okay ack one again then you can see at the center side
6801,10-12,29:32,it receives two ac one
6802,10-12,29:38,in total received two ac key ones what does this mean
6803,10-12,29:43,this means it is a duplicate right when we see we may have a duplicate ac key do
6804,10-12,29:50,you remember what happened do you remember the apple or anything you didn't see anything about my orange
6805,10-12,29:56,you kept seeing my apple is good so that means something is wrong with my orange right you remember that
6806,10-12,30:02,so here's the same thing sender has already sent out new packet
6807,10-12,30:08,0. but from the center side it feels like oh you didn't say anything about my
6808,10-12,30:14,new package zero but you kept seeing the package one is good that means packet
6809,10-12,30:22,zero is not good so that's why the sender now is sending
6810,10-12,30:28,out another packet zero again because send your thoughts there's something
6811,10-12,30:35,wrong with the package zero so that's why it's reasoning again and because of this resending you can say now
6812,10-12,30:43,again two ack zeros are received by the root sender right and you can
6813,10-12,30:50,imagine the center will again send out the package one
6814,10-12,30:56,repeatedly okay so then this will continue forever never stops okay so
6815,10-12,31:03,that's why that's that's that means if you have a early timeout then you may have
6816,10-12,31:11,duplicates a lot of duplicates okay it will continue forever okay so that's why
6817,10-12,31:19,since uh setting the uh the timer for reasonable reasonable amount of time is
6818,10-12,31:25,very important okay it's very important do not set up a premature time timer or
6819,10-12,31:33,uh yes of course sometimes you cannot control the ac kit right if the ac keys are delayed then this is what you're
6820,10-12,31:40,gonna say okay um so that is the
6821,10-12,31:45,uh the 3.0 but the 14.0 the performance is is not
6822,10-12,31:53,very good okay 3.0 is correct but the performance is not good why because every time you just send out one packet
6823,10-12,32:00,and then you wait okay it's like that so every time you send
6824,10-12,32:06,you take this much time do you remember the l over r thing okay so the l is the size
6825,10-12,32:14,oh package l is the size of a packet
6826,10-12,32:19,and r is the bandwidth okay or the packet transmission rate so now
6827,10-12,32:26,the time we use the two send out the data is l over r the first
6828,10-12,32:32,package right and after that you can see the data this is this is the time
6829,10-12,32:39,okay at the center side and the receiver side this is the time so after the data is sent out the data
6830,10-12,32:46,is is traveling to the receiver side okay and at the
6831,10-12,32:53,center side a center is reaching meeting for what for feedback okay is waiting
6832,10-12,32:58,for feedback so all this time called rtt is wasted because the seller
6833,10-12,33:05,is doing nothing during that time it's like every time you send out one layer
6834,10-12,33:10,and then you wait for 14 days for your friends uh feedback
6835,10-12,33:17,you send out one gift okay and then you send a second gift and you wait for
6836,10-12,33:22,another seven 14 days okay so the efficiency is really bad if
6837,10-12,33:28,you look at the utility utilization rate then it will be l over r which is this
6838,10-12,33:34,time okay over divided by rtt plus l over this is
6839,10-12,33:41,the total time okay the total time
6840,10-12,33:47,then uh if if we follow the assumptions here we are following uh the bit packet
6841,10-12,33:54,is the packet is has a 8 000 bits okay and we assume the proposition
6842,10-12,34:00,propagation delay is 15 ms and this bandwidth is uh uh one gigabs okay then
6843,10-12,34:09,the transmission delay is lor which is uh eighty eight thousand this over 10 to
6844,10-12,34:17,9 this is one gigan right 10 to 9 bits per second so that means the
6845,10-12,34:22,transmission delay is 8 microseconds okay so then the utilization rate is
6846,10-12,34:28,basically this this number okay it's basically l over r divided by rtt plus
6847,10-12,34:35,lor so this is uh eight microseconds and
6848,10-12,34:40,then uh this is a uh this is the rtt the total rtt is 30.
6849,10-12,34:47,let's assume it's 30 microseconds okay so that's 30 plus 0.008 in total this will become
6850,10-12,34:59,0.00027 okay that is the utilization rate it is very very very low okay so
6851,10-12,35:06,how can we improve this we can improve this by sending multiple
6852,10-12,35:15,packets at the same time okay we send multiple and we then we wait it's like
6853,10-12,35:21,you send your friends 10 gifts and maybe wait for the response for those hand
6854,10-12,35:26,gifts for the for the feedback right so that's how we improve the efficiency so
6855,10-12,35:32,now let's summarize what we have learned today rtrt 1.0 is a completely reliable
6856,10-12,35:38,channel rdt 2.0 we will detect the arrow with checksum and we will send the
6857,10-12,35:44,sender ac key and any case as feedback but in rdt 2.1 we want to avoid
6858,10-12,35:52,duplicate packets okay so that's why we want to use the sequence numbers okay so
6859,10-12,35:58,for rdt 2.2 we want to design a naked frame
6860,10-12,36:04,protocol okay so what we do is instead of a nak the current package we ack the
6861,10-12,36:14,last package received okay okay that is 2.2 remember the apple or an example
6862,10-12,36:20,so for rdt 3.0 we will deal with packing loss how do we deal with that we will
6863,10-12,36:27,introduce a countdown timer if the timer times out then we will do a
6864,10-12,36:33,re-transmission for the artists we design
6865,10-17,0:02,for the rdt that we designed they have uh very bad performance why because it
6866,10-17,0:10,is using something called stop and wait which means every time i just send out
6867,10-17,0:15,one package and then i'll just wait okay wait until i receive the feedback
6868,10-17,0:22,then i send it again so apparently this is uh this is not very efficient
6869,10-17,0:28,um then people began to think oh how about we send a multiple packets together and then receive for the ac
6870,10-17,0:33,keys so that for those kind of protocols we call them as pipeline protocol okay there are two types of pipeline
6871,10-17,0:41,protocols go back in and select to repeat so then first thing let's take an
6872,10-17,0:47,overview of these two protocols what are their difference for go back-end protocol the sender can
6873,10-17,0:54,have up to n and a secret package in the pipeline
6874,10-17,0:59,okay so that means we can send up to n packets out together then when the
6875,10-17,1:06,receiver receives the package the receiver has a problem to to resolve how
6876,10-17,1:11,should we do the ack okay if we if i receive for example 10
6877,10-17,1:16,packets how should i execute them should i execute them individually
6878,10-17,1:23,okay uh for go back and the method taken by the receiver is to send a cumulative ack
6879,10-17,1:32,what does this mean this means if we have packet 1 to 10 for example they are
6880,10-17,1:37,all received correctly then the receiver will only act 10. ac content already
6881,10-17,1:44,means all the pack is up to 10 are received correctly okay but pay attention if there is a gap
6882,10-17,1:52,between them we do not execate the package so for example now
6883,10-17,1:58,if we have packet one to five okay and six is missing then we have
6884,10-17,2:06,seven eight nine and ten these 10 packets okay this is the center
6885,10-17,2:14,at the receiver side the receiver will ack 1
6886,10-17,2:20,might received one into execute one i'm going to receive two ac key 2 okay
6887,10-17,2:26,executive 3 is equal four ac k5 6 is missing
6888,10-17,2:31,okay six is the missing so nothing is sent back then when seven comes in
6889,10-17,2:38,when someone comes in the receiver will not ack 7 why because this is cumulative
6890,10-17,2:46,this sdk is a cumulative if we ac k7 that means everything up to 7 is good is
6891,10-17,2:52,received correctly but that's not correct right that's not wrong and sorry that's not correct that's uh that's
6892,10-17,2:58,wrong because 6 is missing right so that's why instead of sending backs acq7
6893,10-17,3:06,we will still escape 5. so for eight we will still execute five nine still a65 term is still execified
6894,10-17,3:13,so we keep repeating ack 5 so that's the center and then we all
6895,10-17,3:19,know oh something is wrong with six okay then the central wheel has a timer we'll
6896,10-17,3:27,have a timer for the oldest nac kit package okay that means for six in this case
6897,10-17,3:34,it's six so when the timer expires the sender will re-transmit
6898,10-17,3:42,all and executed packets okay we transmit all and execute packets
6899,10-17,3:51,so this is the go back in selective repeat is different for selective repeats again we can still
6900,10-17,3:59,have up to n and executive packs in the pipeline let's assume we have again one
6901,10-17,4:05,two three four five six seven eight nine ten okay
6902,10-17,4:13,and the sender let's assume 6 is missing again okay the center will send individual ack
6903,10-17,4:21,for each packet okay so that means if you are execute one two
6904,10-17,4:28,three four five and seven eight nine ten okay so the
6905,10-17,4:39,timer sorry the sender maintain maintains a timer for each nac kit
6906,10-17,4:45,packet that means the center will maintain a timer for package six when
6907,10-17,4:52,the time expires it will retransmit only that and ack package that means only six
6908,10-17,4:58,is root transmitted okay nothing else so this is the difference between go
6909,10-17,5:04,back and and select or repeat so then uh what i'll do next is um i'm
6910,10-17,5:12,going to use an animation to to to help you get a better understanding
6911,10-17,5:17,so now let's see this is the go back-end protocol if you uh google search
6912,10-17,5:24,computer networking and top-down approach that's the title of our textbook and you also add student
6913,10-17,5:31,resources then uh you can find this page okay on this page you can click on
6914,10-17,5:36,interactive animations uh there are some very interesting animations here you can look into that
6915,10-17,5:44,um and for our class today we will look at this go back and protocol okay
6916,10-17,5:50,so keep what i said in mind go back and is a cumulative is using a cumulative
6917,10-17,5:59,ack okay and think about the gaps if there is gaps it will
6918,10-17,6:05,not act the um the package after the gap okay so let's
6919,10-17,6:12,see we send let me firstly explain what these are okay so this part
6920,10-17,6:19,this line above is the center okay and this from 0 to 19 these are the
6921,10-17,6:27,packets we that are uh waiting to be sent out then uh this line below is the receiver
6922,10-17,6:36,okay again these packets are just these are not packages are just like let's say
6923,10-17,6:41,they are uh you can view them as a holders okay um these are just used to hold those
6924,10-17,6:49,packets okay so now let's assume the uh sender has a
6925,10-17,6:56,window size on five that means each time animals the five packets can
6926,10-17,7:04,be sent out okay so the sending when the limb is the standard to a maximum of
6927,10-17,7:10,five outstanding and executed packets and you can see um now i send out to five if i want to
6928,10-17,7:18,resume i cannot send a new because of the window sites when the packets are received by the receiver in the package
6929,10-17,7:25,mail acknowledgment those packets right so for example when zero is received you
6930,10-17,7:31,can see it will execute zero ack 1 hq2 is equal to three and four
6931,10-17,7:37,and those are all the acks okay those are all the ac keys ac keys are also
6932,10-17,7:43,similar to like a regular packets okay and then when zero is received
6933,10-17,7:50,when zero nck 0 is received this window will slide to the right
6934,10-17,7:57,okay so that means oh package 0 is received fine it's received okay then
6935,10-17,8:05,the center will see now you can send one more packet okay because the window size is the five
6936,10-17,8:10,we can allow at most five and execated data packets
6937,10-17,8:15,so you can see it is uh moving to the right element one is received it's moving right two three
6938,10-17,8:22,four it's like that okay and i can of course listen some new packets
6939,10-17,8:30,okay so for the first situation for the first situation now you realize
6940,10-17,8:37,um oh everything is fine we have no loss no errors right
6941,10-17,8:43,in the second situation okay in the second scenario let's discuss what if the data is lost what if a packet loss
6942,10-17,8:50,so let's see example let's kill this package package seven got lost during
6943,10-17,8:57,this process so when 5 is received can tell me what
6944,10-17,9:02,is ac kit so we will do ack 5. right
6945,10-17,9:09,so when six is received we will do a c k six
6946,10-17,9:15,okay you can see 5 6r ac kit now let me ask you a question
6947,10-17,9:20,what if 8 is received what will happen
6948,10-17,9:26,what will be the ac key number so in this case with ack 6 why because
6949,10-17,9:34,there is a gap between 6 and 8. okay that means something is wrong after six
6950,10-17,9:42,that's why you can see we are still ack 6 ac k6
6951,10-17,9:48,okay and you can see one five and ack five and six are received the window is
6952,10-17,9:53,sliding to the right but 1 6 8 6 are received again
6953,10-17,9:59,will the windows slide to the right should we slide the window to the right no because 7 is not received right so
6954,10-17,10:08,that's why you can see even n66 is received it doesn't help okay and
6955,10-17,10:14,of course now you have two more positions you can send out two more okay
6956,10-17,10:19,but what will happen next what will happen next is still in statistics right
6957,10-17,10:26,so now the time the sender has a timer okay when the timer is for the oldest
6958,10-17,10:34,nac package which is seven so when the time expires the package all the packets
6959,10-17,10:40,that are unexecated will be sent out together okay now you can see the time i didn't
6960,10-17,10:46,do anything okay so the timer times out then 7 to 11 are all sent out and then
6961,10-17,10:53,they are all easy kids this is the case when the data is lost
6962,10-17,11:02,the next case we are going to discuss is what if other
6963,10-17,11:07,what if the ack is lost
6964,10-17,11:13,so now i send out this five package again and we have those ac keys
6965,10-17,11:21,okay now i want to maybe delete 14 again
6966,10-17,11:28,okay pay attention this time is the ack
6967,10-17,11:34,getting lost okay acq is lost then let's guess what will happen when 12 is when
6968,10-17,11:42,ack 12 is received at the center side should we slide the window to the right
6969,10-17,11:49,yes yeah when we receive 12
6970,10-17,11:54,we can slide to the right how about 13. should we slide them into the right
6971,10-17,12:07,yes okay we should also slide to the right so then for 14 we have no ac key
6972,10-17,12:14,how about 15. for 15 should we slide the window to the
6973,10-17,12:19,right
6974,10-17,12:24,this is a very interesting question should we slide the window to the right
6975,10-17,12:30,so now let's step back to think about the meaning of ack
6976,10-17,12:36,what are the exact 15 mean keep in mind this is cumulative
6977,10-17,12:42,nck 15 means all the packets up to 15 are received
6978,10-17,12:49,okay pay attention to this sentence all the
6979,10-17,12:55,packets up to 15 are received okay
6980,10-17,13:03,so then does this mean 14 is okay yes or no
6981,10-17,13:11,ack 15. also pay attention 15 also implies
6982,10-17,13:17,14 is fine right okay then with this in mind with this in
6983,10-17,13:25,mind should we slide the window to the right
6984,10-17,13:30,so in this case we should slide them into the right why because as i said again
6985,10-17,13:35,ack and go back and ack's community when we
6986,10-17,13:41,execute a number that basically means all the packets up to that number are received fine then in this case although
6987,10-17,13:48,within the ack 14 is fine because basically 15 already implies ack 14.
6988,10-17,13:55,okay so then then you can see it is actually select to the right
6989,10-17,14:01,okay so now of course we can send some more packets out and then wait for them
6990,10-17,14:06,to be execated let's do it again and so you can then think about the different scenarios okay
6991,10-17,14:13,for the first scenario for the first scenario we send all all
6992,10-17,14:19,of them out okay then there are oac kits nothing happened no errors no loss pay special
6993,10-17,14:28,attention to this protocol because go back and selective repeat may appear on the final exam okay
6994,10-17,14:35,and then let's just resume i'm sending some some more out
6995,10-17,14:43,and if we have some data loss okay i can
6996,10-17,14:48,use this case i can kill maybe let's see k06 okay and you can see what
6997,10-17,14:56,will happen is ack 5 5 8 6 5 again
6998,10-17,15:04,okay and it's not sliding to the right because 6 is not ac key
6999,10-17,15:11,okay and then when the timer times out
7000,10-17,15:16,all the nac kit package will be recent
7001,10-17,15:25,we are waiting for the timer to time out okay you can see six seven eight nine they are all recent i can send more
7002,10-17,15:33,okay they are all ack
7003,10-17,15:41,and some send some more okay and if the ack is lost
7004,10-17,15:50,okay if the ac key is lost then
7005,10-17,15:57,you think about this what will happen next the window will slide to the right
7006,10-17,16:05,window will slide to the right and then 14 is received the window will
7007,10-17,16:10,also slide to the right because ack 14 implies ack 13.
7008,10-17,16:18,okay and then we can continue so this is the go back and protocol
7009,10-17,16:24,uh and i'll i'll continue to talk about the selective repeat
7010,10-17,16:31,okay if you recall what we have discussed about selector repeat in selective repeat we will do the
7011,10-17,16:38,individual executes okay there's no cumulative ac keys so individual sdks
7012,10-17,16:43,and then the timer is kept for each and executed packet it's not for the oldest
7013,10-17,16:50,and executive package okay it's a selective repeat is for each the timer is for each and executed packet so then
7014,10-17,16:58,uh when the timer times out um the sender will resend only that
7015,10-17,17:06,execute packet okay so let's see there's a new
7016,10-17,17:14,and if nothing happens then it's just a similar ads uh the go back in
7017,10-17,17:23,okay but if for example if we lose some packet let's see
7018,10-17,17:29,six and eight are killed and whatever happened is you can see
7019,10-17,17:35,ack 5 ack 7 and ack 9. do we do ac k5
7020,10-17,17:40,here no we do not okay do we do ac k7 5 here no we do not so i although there
7021,10-17,17:47,are gaps but but as you can see we only ack
7022,10-17,17:53,um those ones that are received correctly okay and interestingly as you can see
7023,10-17,17:58,here uh when we receive five okay we just mark this as received because there
7024,10-17,18:05,is no gap between five and uh the packs before okay for this one we have we
7025,10-17,18:12,haven't received six at the receiver side so nothing is powerful there but we received seven so at the receiver side
7026,10-17,18:18,the sum is buffered okay seven is buffered similarly to nine nine is buffered at the receiver side okay and
7027,10-17,18:26,now this the receiver is waiting for six and eight okay and only five seven nine
7028,10-17,18:31,they are ac kit as you can see then the window will slide to the right
7029,10-17,18:37,okay so here the window will not slide to the right because there is a gap for
7030,10-17,18:43,six okay six is not executed yet so then as we said the timer is for each
7031,10-17,18:51,individual and ac kit package so the timer will be for six and also eight
7032,10-17,18:57,okay so you can see only six and eight are recent okay nothing else only six and eight
7033,10-17,19:03,then with your ack 6 and 8 okay then they are marked as received because there is no gap between this package
7034,10-17,19:11,okay so this receiver side also has a receiving window then it is sliding to
7035,10-17,19:16,the right okay so then the their ac kit in the center window will also slide to
7036,10-17,19:22,the right okay this is what will happen and another case we want to test is what
7037,10-17,19:29,we what will happen if acks are if acks are killed let's see let's see we kill
7038,10-17,19:36,11 whatever happened so what is lost
7039,10-17,19:42,um although at the receiver side we all we know they are all received correctly right but at the center side when 10
7040,10-17,19:49,arrives we know the window will slide to the right okay when ack 12 arrives the
7041,10-17,19:54,window will not select slide to the right this is different from go back and forth go back and we know act 12 implies
7042,10-17,20:02,basically 11 so the window will slide to the right but here for selective repeat we know this is for each case for each
7043,10-17,20:09,individual packet so basically 12 only implies ack 12. uh that doesn't that has
7044,10-17,20:18,no relationship with 11 what happened to 11. so in this case the window will not
7045,10-17,20:23,slide to the right okay similar for 13 14 okay this is what will happen
7046,10-17,20:30,and you can see slide no slide no slide no slide okay and then you may wonder oh
7047,10-17,20:35,what will happen next what will happen next is the timer there is a timer for
7048,10-17,20:40,11. because this is an executed when the timer times out
7049,10-17,20:45,this 11 package will be resent okay you can see it is reset and you may
7050,10-17,20:53,ask oh what if uh oh the 11 is recent but actually 11 is always already
7051,10-17,20:58,already received correctly at the receiver side now the receiver will have a duplicate packets right have two
7052,10-17,21:05,elements what will happen next this is very easy you don't need to worry because
7053,10-17,21:10,we know these packets are all um they all have their own sequence numbers right so the receiver side can
7054,10-17,21:17,directly discard this new element because it will say oh i have received this package i don't need it anymore
7055,10-17,21:23,okay so this will be discarded
7056,10-17,21:29,okay although it's this is discarded but it will still send back ack to let the
7057,10-17,21:35,sender know 11 is fine it's received correctly okay then this time this
7058,10-17,21:41,window can slide to the right okay so this is the entire process for selective
7059,10-17,21:46,repeat and uh i'll just stop sharing here
7060,10-17,21:52,so make sure you really understand this part
7061,10-17,21:57,um because this will appear on the test now let's look at uh we have explained
7062,10-17,22:03,how it works right um so in the slides uh let me just quickly go over this slide so when you
7063,10-17,22:10,review the slides you understand what is uh shown on that on those okay so
7064,10-17,22:15,basically as you can see for these are all the packets that we want to send out
7065,10-17,22:23,okay and these ones are not usable uh the the green ones are already execated
7066,10-17,22:29,this is at the center side okay uh the yellow ones are sent but not yet
7067,10-17,22:35,execated okay um these ones are the usable space that
7068,10-17,22:40,means uh we can still send out to those ones okay and the window size is and this is basically the same as we have
7069,10-17,22:47,discussed in the animation um so we know the timer is for the
7070,10-17,22:54,oldest in-flight package okay when the timer times out then we will retransmit
7071,10-17,22:59,all the packets okay all the packets that are not sick
7072,10-17,23:04,so here is a an example okay in this example as you can see we have the uh
7073,10-17,23:11,sender window and equals to four that means and most we can send out to four okay and then for the uh then for the
7074,10-17,23:20,very beginning we can see we were sent out at the center side we are sent out 0 1 2 3. okay and you can see here the
7075,10-17,23:28,packet two gets lost okay at the receiver side the receiver will just ac key ack 0 acq one and two is not
7076,10-17,23:37,received so nothing nothing is down here okay and then once third arrives when
7077,10-17,23:44,packet 3 arrives with a steel sent out packet uh ack 1
7078,10-17,23:49,because there is a gap between 1 and 3. okay so as you can see actually packet
7079,10-17,23:57,three is discarded it's not buffered in slightly repeat we know this is this
7080,10-17,24:02,will be buffered but in go back and this will be discarded okay
7081,10-17,24:08,and then um all these ac keys are sent out okay
7082,10-17,24:13,um as at the center side as you can see when it received acp zero the window will slide to the right and now we can
7083,10-17,24:20,send out the four okay when it received ack one the manual slide to the right
7084,10-17,24:26,and now we can send out packet five okay so then one package four and five are
7085,10-17,24:33,received again they will be discarded why because still at the receiver side
7086,10-17,24:39,the receiver didn't receive package two okay so you can say they will still ack
7087,10-17,24:45,1 means which means there is something happening to two okay and finally the
7088,10-17,24:52,timer times out okay the timer for package two times out because two is not execated and then all
7089,10-17,25:00,the pack is up to five are recent okay two three four five are recent so this
7090,10-17,25:05,is the entire process uh it actually shows the same thing as in animation but
7091,10-17,25:11,uh we just put it uh on a static picture okay on static picture
7092,10-17,25:18,and then for a selective repeats as we said receiver individually ac key uh all
7093,10-17,25:24,the correctly received packets and those packets will be buffered at the receiver side and the center side the center will
7094,10-17,25:31,keep a timer for every packet individual package when timer times out then the
7095,10-17,25:38,sender will resend only those and executed packets okay so so this card is
7096,10-17,25:44,the same the center part is the same as the receiver part you can see it has a receiver and the window so then you can
7097,10-17,25:51,see uh these are the expected but not yet received okay and these ones are
7098,10-17,25:58,out of order packets that means they are received they are buffered
7099,10-17,26:03,okay and then this is the acceptable uh
7100,10-17,26:08,positions okay that means for these ones we are still except expecting packets new packs coming okay
7101,10-17,26:17,so basically um here we can look at an example i think we don't need to talk about this
7102,10-17,26:24,um part yeah we can directly look at this example in this example we have
7103,10-17,26:31,um package zero one two three sent out again package two is lost okay and you
7104,10-17,26:37,can see one pack zero is received with an sdk 0 then we've seen ick one and
7105,10-17,26:44,when we receive packet third we know 2 is not received yet so in this case we will just buffer
7106,10-17,26:52,the package through and send back executor okay and similarly when ack 0
7107,10-17,26:59,is received then the window will slide to the right now we send out packet four similarly for ac key one then we slide
7108,10-17,27:07,the window to the right then send out packet five okay and now we received ac
7109,10-17,27:13,key through okay we receive ack3 we cannot slide to
7110,10-17,27:18,the right because you can see this is a third and two is not received yet
7111,10-17,27:25,okay ac2 not received so here we cannot slide the window to
7112,10-17,27:32,the right okay that's why you can see we we only we need to wait for the timer
7113,10-17,27:38,okay the timer expires then packet two is recent only package with reason we do
7114,10-17,27:45,not resend two three four five okay and then at the receiver side the
7115,10-17,27:51,receiver has already buffered packet four packet 5 package three okay and now
7116,10-17,27:58,two is received so then it will basically combine two three four five and then deliver them to the upper side
7117,10-17,28:04,to the upper application layer okay so uh at the same time the sender the
7118,10-17,28:11,receiver will also send back ac key to tell the sender hey two is now fine okay
7119,10-17,28:17,so this is the entire process um again so this may appear on the test
7120,10-17,28:26,and this may appear on the test so in the test that i may describe this so for
7121,10-17,28:31,example i give you a bunch of packets i say oh um the center is sending uh one two
7122,10-17,28:38,three four and what happens to to some packets okay oh what happened to some ac keys then what will
7123,10-17,28:45,be the package that what will this what will what package will the center send next
7124,10-17,28:51,okay or what what ac keys without the receiver sending next to those kind of things so you should be uh well familiar
7125,10-17,28:59,with vest and you should really understand the principles behind so you can answer them correctly
7126,10-17,29:05,okay for selecting repeat there is a very interesting thing okay we call this as
7127,10-17,29:12,the selective dilemma okay so what what is what does this mean basically
7128,10-17,29:18,um when you use select to repeat you have to be very careful about the
7129,10-17,29:24,relationship between a window size and sequence number that means if you have a
7130,10-17,29:30,window size like third then your secret number should be as big as 7. okay you
7131,10-17,29:36,should have zero one two three four until seven to be as the second number if you choose a secret uh the second
7132,10-17,29:44,number to be only 0 1 2 3 then you may run into a problem okay so let's let's
7133,10-17,29:50,together look at the problem um so in the first case
7134,10-17,29:56,in this case okay this case is defined it has no problem you can see we are sending out
7135,10-17,30:02,uh the window size is three right so we are sending out to zero one two and 012 are received correctly
7136,10-17,30:11,then you can see this one will will is basically it will sorry it's the ac key
7137,10-17,30:19,zero okay so when ack 0 is received
7138,10-17,30:26,the window is slide to the right with us an out packet through okay
7139,10-17,30:32,um and unfortunately package 3 is lost this time okay it is lost
7140,10-17,30:40,um but anyway when packing when when uh ac went this one so when this is uh this
7141,10-17,30:47,week this is ack 0 is this is your acq one right so when ac keyword is received
7142,10-17,30:53,we will slide the window to the right again so this time we send out a package zero okay so pay attention this zero is
7143,10-17,31:02,the new pack is here
7144,10-17,31:07,okay which means it's this one is not the the one before it's not the old
7145,10-17,31:13,packager it's the new package zero okay and this is a this has no problem
7146,10-17,31:19,but for the next case if you look at the next case okay in this case we received package uh
7147,10-17,31:26,we sent out zero one two okay then we were ack 0 ac k1 ac k2 okay
7148,10-17,31:34,unfortunately these ac keys are all lost
7149,10-17,31:40,okay then in this case we know there is a timer for zero one two right so
7150,10-17,31:46,because those ac keys are all lost so the timer will finally expires we'll
7151,10-17,31:51,find an inspired then in this case the timer will retransmit 0 1 and 2.
7152,10-17,31:58,okay it will really transmit zero and amount to resend one zero one and two so
7153,10-17,32:04,in this case this pack is zero as is actually the old zero
7154,10-17,32:15,this pack is zero is actually this one it's the old zero it's not the new zero
7155,10-17,32:21,no okay it's not the new zero it's actually o zero because it's actually rescinding
7156,10-17,32:28,but if you put up for these two cases these two scenarios
7157,10-17,32:33,if you put a curtain between the sender and the receiver
7158,10-17,32:39,as this the receiver side okay and the receiver side the receiver
7159,10-17,32:44,is ac key one a zero sck one ack 2 and
7160,10-17,32:49,then it receives a package zero right so it will think this package zero
7161,10-17,32:57,is a new zero in the second case it's also doing ack 0
7162,10-17,33:05,acq1 acq2 and then it receives a pack zero
7163,10-17,33:12,okay and in this case it will also view this package 0 as a new zero
7164,10-17,33:20,but it is actually the old zero okay this this is this is a is a
7165,10-17,33:30,viewed as
7166,10-17,33:36,new but it is uh actually
7167,10-17,33:45,out zero okay it's viewed as new pack zero but
7168,10-17,33:51,it's actually the old package zero so that is the problem because at the receiver side the
7169,10-17,33:58,receiver does not see any difference between these two cases nothing different
7170,10-17,34:04,okay but actually we know at the center side it's different the center in the
7171,10-17,34:09,first case of the center is sending a new package zero in the second case the packet 0 is actually the old package
7172,10-17,34:15,zero it's just a resending okay so that is what we call as dilemma
7173,10-17,34:21,then in this case we we know um there is something between the sixth
7174,10-17,34:27,number and the window size okay so if the window size is k
7175,10-17,34:35,foreign
7176,10-17,35:09,number should be at least 0 to 2 2 k minus one okay that means if k is a
7177,10-17,35:17,third then this number will be seven two two three minus one seven so the second number should be zero one two three two
7178,10-17,35:23,seven at least okay so in order to award certain kind of dilemma okay so that's
7179,10-17,35:31,something you should keep in mind uh so that's all about the reliability
7180,10-17,35:37,transfer and about about the go back and select to repeat
7181,10-19,0:02,we will continue to discuss the real protocol that we are using in reality
7182,10-19,0:09,okay the real reliable protocol we are using in reality which is tcp okay
7183,10-19,0:15,e3.4 we just learned the principle uh principles how would we design those
7184,10-19,0:21,protocols by in 3.5 we are going to discuss um
7185,10-19,0:27,the actual protocol we are using in reality okay
7186,10-19,0:33,so for tcp uh we know this is uh
7187,10-19,0:39,um a reliable protocol and it will do reliable delivery and the byte stream
7188,10-19,0:46,will be in order okay we only have one sender and one receiver
7189,10-19,0:52,okay um and we know we are we will use pipeline because we want to improve the
7190,10-19,0:59,performance okay the efficiency um but we also do the congression
7191,10-19,1:06,control and flow control congestion control and flow control are different i have been talking about this for
7192,10-19,1:12,multiple times so flow control is not to overwhelm the receiver congestion
7193,10-19,1:18,control is not to overwhelm the public network okay so please remember this
7194,10-19,1:23,sentence and i will ask you in the text what is the difference between fallow control and congestion control okay
7195,10-19,1:30,and the tcp is also full duplex the data is the four duplex okay that means um
7196,10-19,1:37,the data may travel bi-directionally okay from center to receiver to from receiver to the sender okay and there is
7197,10-19,1:45,also something called mss mss means maximum segment size
7198,10-19,1:52,okay that means the maximum size for each segment reversion segment is like
7199,10-19,1:59,the basic units for tcp okay or base unit in the transport layer okay and in
7200,10-19,2:07,one segment in one segment we may send out multiple bytes
7201,10-19,2:12,keep this in mind one segment may contain multiple bytes okay or a lot of
7202,10-19,2:18,bytes um and it's also connection oriented which means uh before we do the data
7203,10-19,2:25,exchange we will firstly need to do the handshaking which means we say hi hi okay to confirm we are establishing a
7204,10-19,2:32,connection between the sender and the receiver okay uh and it's also uh as i said it will
7205,10-19,2:39,also do the flow control okay i have already mentioned this so let's look at the second structure
7206,10-19,2:46,this is the tcp segment structure do you remember
7207,10-19,3:10,do you remember i have mentioned this again again okay we have five layers application layer transport layer etc
7208,10-19,3:17,etc and i'll add the application layer we know the thing we we send out is
7209,10-19,3:22,called message right and when message comes down to the transport layer usually we will break this into smaller
7210,10-19,3:30,pieces okay and then we add header onto that message okay
7211,10-19,3:36,foreign
7212,10-19,3:45,so this is the transporter layer header and then inside is the message okay it
7213,10-19,3:52,may be the entire message or just a piece of message okay and then you can
7214,10-19,3:57,see um what we are talking here
7215,10-19,4:04,is actually this entire thing this is called a segment
7216,10-19,4:11,this is a tcp segment okay so what is shown here
7217,10-19,4:16,is actually this one i'm i'm actually enlarging this entire
7218,10-19,4:22,segment and show you the structure for this element okay so this thing
7219,10-19,4:34,is the transporter layer header so what what i have shown here
7220,10-19,4:43,is the transporter layer header okay
7221,10-19,4:48,this part is actually the m part it's the message part okay and let's see what is included in a
7222,10-19,4:56,transport layer header in the transport layer header we have source port number definition phone
7223,10-19,5:03,number okay and then we also have the sequence
7224,10-19,5:09,number okay um after the sequence number the secret
7225,10-19,5:15,number is basically uh showing like it's like um
7226,10-19,5:20,because we know this packet this segment is going to is going to send some data
7227,10-19,5:26,right so the data are in a byte stream okay by to zero byte one by two by three
7228,10-19,5:31,by the four it's like that okay so then if this data if this piece of data
7229,10-19,5:37,contains for example byte 8 to byte 11 okay then the sequence number here we
7230,10-19,5:43,are basically showing you shows you the very first byte number so if this is byte 8 2 byte 11 the sixth number will
7231,10-19,5:50,be eight okay and then this is the acknowledgment number
7232,10-19,5:56,okay uh which means uh again if we are ack for example if we are ack uh 11 then
7233,10-19,6:04,this acknowledgment number will be 11. okay so then after that we will say uh a
7234,10-19,6:12,field called header length this is the length of the header okay and then there are also some bits u a p r s f okay
7235,10-19,6:20,these beads are used for establishing the connection finishing the connection
7236,10-19,6:27,uh for uh um some urgent data okay u is generally
7237,10-19,6:33,not used is for urgent data and a is for a c k a number of valid or not so what does
7238,10-19,6:41,this mean this means if a for example equal to 1 we can say oh this is a ac key packet
7239,10-19,6:48,okay and we are acknowledge the acknowledgment number in this field is
7240,10-19,6:55,valid okay if a c k equals to zero if this a equal to zero okay that means oh this is
7241,10-19,7:03,not for ack okay so the number we have in the ac key acknowledgment number
7242,10-19,7:09,maybe uh invalid okay you don't need to pay attention to that because this is
7243,10-19,7:14,not ack okay select that and then p is for pushing data now it's uh generally
7244,10-19,7:21,not used r is for this r's s and f are for
7245,10-19,7:26,uh set up a connection okay for synchronize uh or for finishing a
7246,10-19,7:33,connection and later we are going to use that okay then this receive window this receive
7247,10-19,7:40,window is for flow control and we are going to learn about this later okay
7248,10-19,7:46,then after that we have checked some check sum we know this is a four checking errors okay and then this is a
7249,10-19,7:55,disapp pointer okay urgently important so um after that we will have options okay the
7250,10-19,8:03,options is optional uh it has a variable lens
7251,10-19,8:08,okay most of the time it's not used but sometimes it's a
7252,10-19,8:14,maybe used okay after that then this part as i said is the application layer
7253,10-19,8:20,data which means it is the message part okay it can be an entire message or a
7254,10-19,8:27,piece of message if the message is big okay now let's look at the header itself for the header each row is 32 bits
7255,10-19,8:36,okay each row is 32-bit which means
7256,10-19,8:42,four bytes okay how many rows do we have for the header we have one two three four five
7257,10-19,8:52,five rows which means 20 bytes right four bytes each row four
7258,10-19,9:01,times five equal to 20 so 20 bytes together okay and there is also options
7259,10-19,9:07,options we may or may not have it so then based on this we know the tcp
7260,10-19,9:12,header is at least
7261,10-19,9:19,20 bytes okay tcp header it's at least 20 bytes
7262,10-19,9:25,so it's actually very long okay later when we learn about udp in the university udp header is much shorter than this
7263,10-19,9:32,okay and now if you if you think about what
7264,10-19,9:37,we have learned before again we said the transport layer is dealing with processes
7265,10-19,9:44,now you can think about this why do we say that because the transport layer has
7266,10-19,9:50,the source support number and the destination point number and we know those port numbers are for the processes
7267,10-19,9:57,right we associate one process with a port number okay so it's like that
7268,10-19,10:05,um so as i said the secret number so you may
7269,10-19,10:11,ask what is inside the second number i just explained right but let's look at this picture then you will have a better
7270,10-19,10:16,understanding okay so in this is like this is like a byte stream
7271,10-19,10:22,okay this is a byte stream and then um
7272,10-19,10:27,if if this segment contains as again it contains let's say
7273,10-19,10:33,byte 8 to 11 okay so then the second number will be eight
7274,10-19,10:39,okay if we are executing this entire segment okay and then we know this is a
7275,10-19,10:47,community basically so we may exactly 11 okay then
7276,10-19,10:52,the acknowledgment number will be the 11 okay so as you can see this will be the
7277,10-19,11:00,sequence number okay and uh this will be the ac key
7278,10-19,11:06,number okay so what we are sick and pay attention when we are using ack we are
7279,10-19,11:13,also uh setting this a bit into zero to indicate this is this ac key number is
7280,10-19,11:21,valid okay and now let's look at our example here
7281,10-19,11:27,so before we learned before go backhand for example it's using community
7282,10-19,11:33,basically and we know if for example we have one two three four five they are
7283,10-19,11:39,all received then we can need we can ack fine right so that's what we learned
7284,10-19,11:45,and tcp if tcp is also using cumulative ack
7285,10-19,11:51,okay but very interestingly tcp does not do act 5
7286,10-19,11:57,it will do a66 what does this mean this means
7287,10-19,12:03,everything up to six up to five is correct and i'm expecting six
7288,10-19,12:11,okay so instead of basically in the previous month i i just tell the sender what i'm expecting
7289,10-19,12:17,okay that's how we do ack in tcp it's similar to go back and but a little bit
7290,10-19,12:23,different just a little bit different okay so you can see
7291,10-19,12:29,see this okay this is what what explained here so when we do the ack
7292,10-19,12:35,with the ack the sequence number our next byte respected from the other side
7293,10-19,12:42,okay so let's look at this example and then you will understand that okay
7294,10-19,12:47,in this example host a and host b are sending data to each other okay and the
7295,10-19,12:54,host a the user is typing in a letter say okay and this letter c we know this is a
7296,10-19,13:02,in a byte stream okay byte history
7297,10-19,13:09,okay and then um at the sequence number 42
7298,10-19,13:18,okay it is actually sending a letter c okay and then you can see what what a is
7299,10-19,13:26,saying is uh i am sending say okay and the second number is 42.
7300,10-19,13:31,the data is say and the ack number is 79 you mean you may ask how do we get 79 i
7301,10-19,13:39,mean the at the very beginning a and b they are communicating they will actually negotiate the sequence number
7302,10-19,13:46,and a second number so this is sequence number and ac key number they are telling each other okay they'll tell
7303,10-19,13:52,each other what number would be so now host a will directly say i'm inspecting
7304,10-19,13:59,your um uh your by 79 okay i'm sending you my
7305,10-19,14:06,buy to 42 but i am expecting your bite 79 what does this mean because this is
7306,10-19,14:11,the data is is a it's bi-directional so b also has a byte stream
7307,10-19,14:23,okay and then
7308,10-19,14:30,okay this is b's side at b side and b is probably also it's just also echoing
7309,10-19,14:38,what is sent by the a okay so if a centimeter uh c let her say
7310,10-19,14:43,then and b will also send back a letter c so then this is also literacy
7311,10-19,14:49,okay of course you can do something else right if you send an essay i'm missing you uh e or f or whatever it doesn't
7312,10-19,14:56,really matter okay so let's assume b is just acting what is set by a then this c
7313,10-19,15:02,is actually at b side is actually at byte 79.
7314,10-19,15:07,okay so the a is telling b hey i'm sending you my c and i'm also expecting
7315,10-19,15:14,you to um send me your byte 79 okay so then b
7316,10-19,15:20,receives a c b will send back 79 bytes
7317,10-19,15:25,okay byte 79 so b will say okay you are
7318,10-19,15:30,expecting 79 so i'm sending you back 79.
7319,10-19,15:36,579 that's why the secret number is 79 and the data i'm sending back is
7320,10-19,15:42,actually c i'm echoing so that's why i say of course you can send it letter e or letter whatever okay
7321,10-19,15:49,and i'm telling you i'm expecting 40 through
7322,10-19,15:56,why because you have already sent me 42. so the next bite i know you are going to
7323,10-19,16:04,have 43 so i'm this this is the way i'm telling you i have received 42 correctly
7324,10-19,16:10,so i'm expecting 43. so b is expecting 43 and then when a receives
7325,10-19,16:19,this entire package a will say okay so you are expecting 43 then i'm sending
7326,10-19,16:26,you back 43. my secret number this time is 43 and i'm a 1680 that means i have
7327,10-19,16:33,received your last packet correctly i'm now expecting the next byte which is a
7328,10-19,16:40,580. okay so this is the entire process for
7329,10-19,16:47,um for the communication between them okay uh so of course the data distance
7330,10-19,16:53,between each other may be different so for example as the whole side i may send back computer
7331,10-19,16:59,foreign
7332,10-19,17:05,okay so this may be 44 45
7333,10-19,17:12,46 47 48 49 it's like that okay and so b may
7334,10-19,17:20,be sending back something different it may be sending back uh let's see what what what maybe a csc
7335,10-19,17:32,okay now 81 82 is like that so anyway you can see
7336,10-19,17:38,the data are bi-directional when you send some data out you are telling
7337,10-19,17:44,others this the white the the byte number
7338,10-19,17:49,for your data by setting the sql number so you can see the second number is equal to what okay so if i'm saying six
7339,10-19,17:57,number equal to 45 that means i'm sending out the p the letter p
7340,10-19,18:03,from inside okay and then the other side from b side uh i
7341,10-19,18:10,mean sorry at the same time at the same time a we are also 10 in b
7342,10-19,18:15,and in the other side what it is expecting i'm sending you data but i'm also telling you what i'm expecting so
7343,10-19,18:21,the expecting part is put into the ack okay so for example i use ack 1079 to
7344,10-19,18:29,tell the house b that i'm expecting your bike by 79 sorry
7345,10-19,18:36,okay so this is a very simple talent scenario and later we are going to uh learn more
7346,10-19,18:45,about community basically and i will give you more examples you will understand it's better okay but for now
7347,10-19,18:50,you should at least know um how the community basic kids work
7348,10-19,18:56,so the next thing i want to discuss very quickly is about the road trip time
7349,10-19,19:02,and last time we we actually we mentioned the round trip time it will be
7350,10-19,19:08,used to set a timer do you remember we said that when the timer times out we
7351,10-19,19:13,will do the resending but how long should we set the timer how long should we set that okay
7352,10-19,19:20,if it's such a cute shot it doesn't make much sense and we will have three more
7353,10-19,19:26,short timeout do you remember the gift part right i said if you send your friend a gift
7354,10-19,19:33,um you will wait for his or her feedback for thank you letter right
7355,10-19,19:38,you made me to four two weeks because two weeks is a reasonable round trip time you see the
7356,10-19,19:45,gift is traveling to your friend and the latter is traveling from your friend to you right this is called round trip time
7357,10-19,19:51,but if you say oh after one hour i will send reason it doesn't make sense
7358,10-19,19:57,because this is premature right and you cannot make this too long because if you if you wait for a year okay you are
7359,10-19,20:04,risking time right so then usually we need to set this as the
7360,10-19,20:10,round trip time but the problem is how do we estimate this round trip time we
7361,10-19,20:16,know the round trip time may be affected by many factors i think you still remember the delays and everything we
7362,10-19,20:21,learned from the very first chapter right um so then this may vary a lot
7363,10-19,20:29,the how do we determine the estimated rtt okay so then a way we can do that is
7364,10-19,20:35,we can use okay that means we measure
7365,10-19,20:41,um the time from the segment transmission and here of acq received okay and then we matter this time again
7366,10-19,20:49,again we get a lot of samples and use these samples we can calculate
7367,10-19,20:55,the estimated rtt how do we calculate that so we use something called uh
7368,10-19,21:02,exponential weighted moving average okay so this is the formula you can use to
7369,10-19,21:09,calculate uh the estimated rtt and it's very interesting as you can see the
7370,10-19,21:15,estimated equals to something times the erst estimated rtp again plus i for
7371,10-19,21:22,times some party t okay and if you replace this
7372,10-19,21:28,with this okay that means you are putting the
7373,10-19,21:34,formula into this ads main rtt again again and again and again okay you can
7374,10-19,21:39,do this offline and then you will and you will know oh okay eventually
7375,10-19,21:45,um eventually this sample rtt the the influence for the sample rtt
7376,10-19,21:52,will decrease exponentially fast because these alphons are all numbers smaller
7377,10-19,21:59,than one okay so what i'm um what i mean is if this is estimated rtt
7378,10-19,22:06,okay estimated rtt actually equal to 1 minus alpha estimated rtt plus sample
7379,10-19,22:15,are alpha times sample rtt okay this actually equals to if you
7380,10-19,22:22,replace this one rtt with this entire formula again
7381,10-19,22:28,okay because we know rtt equal to this entire volumetric so this is a 1 minus
7382,10-19,22:33,alpha times y minus r for e r t t
7383,10-19,22:44,right so this this becomes y minus r for square
7384,10-19,22:58,of course i forgot to do here i missed srtt
7385,10-19,23:10,do you see the point so you can continue you can replace this rtt again and again and again and this rtt is always the
7386,10-19,23:19,newest rtt and this rtt is the oh the older rtt and it will be older and older
7387,10-19,23:26,and older and older right so finally as you can say the rtt is the sample
7388,10-19,23:31,architis the influence of it will we the the influence of parts sample rtts will
7389,10-19,23:37,decrease exponentially fast because the rfas rfas are
7390,10-19,23:43,smaller than the one so that is how you estimate the rtts okay so you can see in
7391,10-19,23:50,the figure the blue uh the blue ones are the some priorities and the pink ones
7392,10-19,23:56,are the estimated rtts okay um so just give me one more minute but this
7393,10-19,24:03,is not enough because as you can see the some particles are actually still even either bigger or smaller than the
7394,10-19,24:09,estimated rtt right if we do not give it a range we know you will always have a
7395,10-19,24:16,premature timeout or a too late timeout right so then what we will do is
7396,10-19,24:23,actually instead of getting giving it just a one pink line we will give it
7397,10-19,24:28,like a band foreign we need to give it some variation to
7398,10-19,24:35,cover all the sample artities right or at least most of the sample entities now how do we cover that we add some that uh
7399,10-19,24:43,variations okay so how do we calculate the these derivations
7400,10-19,24:50,we use similar things we just um we just calculate the derivations okay
7401,10-19,24:57,by using the estimated rtt to minus the sum property or some rtt minus that
7402,10-19,25:04,immunity is the same thing okay and then based on that we we will also
7403,10-19,25:10,do moving outreach okay it's the same thing it's just similar to this formula but we replace
7404,10-19,25:17,the estimated rt with the derivation of rtt okay so then derivation of rtt
7405,10-19,25:23,equals to 1 minus beta times derivation rtt plus beta times this is also the
7406,10-19,25:29,region of rtt actually this is also deway okay but it's a sample
7407,10-19,25:37,sample of derivation quantity because you can see this is sample rtt minus the
7408,10-19,25:43,estimated rtt okay and similar similar ways we can calculate the derivation of
7409,10-19,25:49,rtt then the real-time interval is actually estimate estimated rtt plus 4
7410,10-19,25:56,times derivation of rtt then now we give it a safety margin so it all the data
7411,10-19,26:02,all the sample rarities are covered within this band okay not just one line okay so that is
7412,10-19,26:11,how we do the rtt and now you have a sense of how to send the timer so this
7413,10-19,26:17,part um for the calculation part you don't need to remember how we do the
7414,10-19,26:23,exponential weighted moving average that we are not up here on the test but you
7415,10-19,26:28,need to know like the the basic principle of how to set the timer so the
7416,10-19,26:34,next thing we are going to discuss is the reliability transfer in tcp um we discussed this relative transfer
7417,10-19,26:42,in 3.4 but that is just about the principles uh we want to do this from
7418,10-19,26:48,scratch so it's uh it's like the basis for tcp and then for tcp the real
7419,10-19,26:54,reliability transfer is based on those principles okay let's look at that
7420,10-19,27:00,um so basically tcp creates the reliability transfer service on top of the network
7421,10-19,27:07,layers and reliable service okay um and tcp will do pipeline segments do
7422,10-19,27:13,you still remember pipeline basically means um instead of sending just one packet at
7423,10-19,27:20,one time we send up a number of packets together and then we wait for
7424,10-19,27:25,the sdks right so tcp is also using the cumulative ac case
7425,10-19,27:31,um and it also has a timer for the oldest and executed package okay
7426,10-19,27:38,so the transmissions may be triggered by time out events when the timer times out
7427,10-19,27:45,we do real transmission for this part i think you are very familiar right um but the retransmissions may also be
7428,10-19,27:51,triggered by duplicated sdks do remember why we mentioned long time ago we
7429,10-19,27:57,mentioned the apple or an example right so we said instead i was saying
7430,10-19,28:03,um the current packet is not good we will keep seeing the last packet the
7431,10-19,28:09,last package received okay is good right so that means when we receive duplicate
7432,10-19,28:15,sdks we may have errors or uh errors in
7433,10-19,28:22,the current packet okay um so then in this case we have to do real transmission so pay attention to
7434,10-19,28:29,this the real transmission may be triggered by two things either timer expires or duplicate sdks
7435,10-19,28:36,okay um now let's consider a simplified tcp sender we ignore the duplicated case and
7436,10-19,28:43,we ignore the flow control and congestion control okay let's see what kind of events can happen
7437,10-19,28:50,at the center side okay so basically first the data will be
7438,10-19,28:56,received from the application layer we know application layer may have a message
7439,10-19,29:03,and this message is sent to the transport leader then we need to add some headers we learned this right
7440,10-19,29:12,okay um so basically this message is like a
7441,10-19,29:18,byte stream okay it contains by a number of bytes okay
7442,10-19,29:24,um so then what we do at the transporter layer is we need to create segments with sequence number okay we basically break
7443,10-19,29:31,this message into smaller segments okay and then we add hazards to that to those
7444,10-19,29:38,smaller pieces for this entire thing we call it a segment
7445,10-19,29:43,okay and each segment has a number okay has a sequence number
7446,10-19,29:50,uh so the how do we give the secret number do we do one zero one two three four no the sequence number is actually
7447,10-19,29:57,the byte stream number of the first data byte in segment
7448,10-19,30:02,so this is very important for example if we have a message like this
7449,10-19,30:25,so now we may have a message that has 101 bytes okay so we break it into three
7450,10-19,30:32,pieces the first piece the second piece the third piece okay in the first piece
7451,10-19,30:38,it's from five zero to by 24. the second piece is from by 25 to byte 27 and the
7452,10-19,30:45,third piece is from 28 to 100 okay so now the sequence number for the first
7453,10-19,30:52,piece for the first segment is actually zero the sixth number for the second one
7454,10-19,30:57,is 25 and the secret number for 31 is 28. that's how we give the sequence
7455,10-19,31:03,number okay um it's not from zero one two three is not like that okay
7456,10-19,31:10,um and at the center side the center will also start timer if not already running
7457,10-19,31:18,um the timer is usually for the oldest and exec kit segment and when the time
7458,10-19,31:24,expires um we need to do resending okay so when will these three timer expire the time
7459,10-19,31:32,of the interval is this number timeout interval this is what we learned before right so we we basically
7460,10-19,31:40,we learned how to set this timeout intro okay
7461,10-19,31:45,so um these are the like preparation
7462,10-19,31:51,um and uh when they
7463,10-19,31:56,when they um sender receive ac keys okay if this ack acknowledged previously and
7464,10-19,32:04,execute assignments okay uh then um the center will update what is known
7465,10-19,32:10,to be execated for example if we say we received ack for this first segment then
7466,10-19,32:17,the center will update this okay um and if there is there are still an
7467,10-19,32:23,executed segments then the sender will start the timer for the uh any secret
7468,10-19,32:28,segments okay so those are the events that may happen at the center side
7469,10-19,32:34,uh now let's look at an example of the re-transmission okay so firstly we have host a and host
7470,10-19,32:42,b okay and host a send out uh segment so the sixth number for this
7471,10-19,32:50,segment is 92. it contains eight bytes of data so that means it's a
7472,10-19,33:00,it contains basically
7473,10-19,33:13,okay it contains 92 to 99 this is a advice of data okay
7474,10-19,33:20,then when the host b my husband receives this packet receive this segment host b
7475,10-19,33:26,will ack do remember what we learned before about tcp ac kits
7476,10-19,33:34,do you remember this part in this part okay basically when we do ack we will we
7477,10-19,33:43,will see what we are expecting okay for example here ack 79 basically me
7478,10-19,33:49,basically means i'm inspecting your byte 79 so everything before 79 is correct
7479,10-19,33:57,now i'm expecting 79 okay similar here ack 43 means i have received everything
7480,10-19,34:04,before 43 and now i'm expecting 43. it's like that so
7481,10-19,34:11,um so basically when we do the acknowledgment we acknowledge the sequence number our next byte expected
7482,10-19,34:18,from the other side so then now let's come back to this example again
7483,10-19,34:24,apparently host b has received 92 to 99. and then hospital is now expecting
7484,10-19,34:32,the byte 100 that means ack equals to 100 that's why this number is 100 okay
7485,10-19,34:41,but unfortunately this uh ack is uh got lost if this is lost we know there is a
7486,10-19,34:50,timer for host a right type the timer is for
7487,10-19,34:55,this segment so when the timer expires then this host will resend
7488,10-19,35:04,this entire segment from 92 to 99 and this time uh has to be still ack 100
7489,10-19,35:11,okay of course at the the at host b it may have received the duplicate package
7490,10-19,35:17,duplicate segments right um but uh because it has a secret number
7491,10-19,35:23,of 92 so possibly can directly discard the second the second one okay so this
7492,10-19,35:29,is the scenario of a lost ack if we look at the scenario of premature timeout
7493,10-19,35:35,okay we help host a and hospital again
7494,10-19,35:40,um so host a sent out two packets okay firstly from 92 to 999 this is the
7495,10-19,35:49,first segment the second segment is from 100
7496,10-19,35:57,to 199 or 1 18 sorry okay so the first one
7497,10-19,36:03,has eight bytes of data the second segment has 20 bytes of data now we know
7498,10-19,36:10,host b when it receives the first piece it will ac key 100 that means i have
7499,10-19,36:15,received everything before 100 i'm expecting 100. so husband wait to
7500,10-19,36:21,receive the second piece okay it will ac key 120 because everything before 120
7501,10-19,36:28,has been received correctly so now we are expecting um the byte 120 okay
7502,10-19,36:37,so if the sender didn't set up the timer correctly
7503,10-19,36:45,okay then we may have premature time up that means before these ac keys arrive
7504,10-19,36:51,at the center side okay the sender will think oh this
7505,10-19,36:57,package got lost so the sender will directly do the resend once the time
7506,10-19,37:02,expires okay um so that's why you can see this one is
7507,10-19,37:10,recenter gap okay this one is recent again um of course in um and based on what we
7508,10-19,37:19,learned before here when we do the resending we've actually resent uh all
7509,10-19,37:24,the packets after that okay that means we also send out sequence
7510,10-19,37:30,number equals 100. okay but you must see something very interesting
7511,10-19,37:36,at this point okay at this point we know when we do ack
7512,10-19,37:42,originally we should do acq 100 right because it's this this segment is from 92 to 99
7513,10-19,37:50,so we are expecting 100 so we should ack 100. but you can see the receiver
7514,10-19,37:56,actually ack to 120. okay 120 why because we know this is
7515,10-19,38:06,cumulative basically okay the receiver will directly say oh i have received
7516,10-19,38:12,everything before 120 so you don't need to resend me the
7517,10-19,38:19,i wrote 20. okay so that's that's something very interesting and you need to pay
7518,10-19,38:25,attention to this this can be uh can become a trap sometimes okay and this
7519,10-19,38:31,may appear on the test i may give you some like um uh fails for you to fill in okay so
7520,10-19,38:39,you should know uh um how to ack each packet okay
7521,10-19,38:46,um and this the third third scenario is also talking about cumulative ack and as
7522,10-19,38:53,you can see we have six number 92 it buys data and a second number 125 data
7523,10-19,38:59,then for the first piece you can see it's ack 100 and this second piece is executing 120
7524,10-19,39:07,okay so although ac key 100 is lost it doesn't really matter at the center
7525,10-19,39:13,side okay the center will directly say oh okay um
7526,10-19,39:18,we received ack 120 that means the receiver is actually expecting 120 that
7527,10-19,39:25,means everything before 120 is correct so the sender doesn't need to resend
7528,10-19,39:30,this packet again okay no need to resend this one it will directly send
7529,10-19,39:37,um uh send uh the secret number 120 the new
7530,10-19,39:42,package okay the new segment uh so in this case as you as you can see although
7531,10-19,39:47,some ac keys get lost okay as long as the last ac key with the biggest number
7532,10-19,39:53,is uh received correctly then uh the sender will simply send the new segments
7533,10-19,40:00,okay so now let's look at the event at the receiver side
7534,10-19,40:05,okay at the receiver side um and the recent recite when the receiver
7535,10-19,40:12,re received in order segments with expected sequence number okay
7536,10-19,40:20,that means all the data up to the expected signal number um
7537,10-19,40:25,uh need to be execated right and um oh sorry they are already execute
7538,10-19,40:31,okay so for example now let's see if we have we just now is we set uh 92
7539,10-19,40:40,to 99
7540,10-19,40:49,okay so this is the example we just used in this slide right so the first segment
7541,10-19,40:55,is from 92 to 99 the second segment is from 100 to 120 okay so the sixth number
7542,10-19,41:04,equals to 92
7543,10-19,41:14,okay so now let's assume everything before 92
7544,10-19,41:19,is correct is received correctly and now we receive the sequence the the packet
7545,10-19,41:25,92. okay we receive 92 and what should we do should we directly ac key 100
7546,10-19,41:34,we if we educate 100 that means we are actually executing uh this uh first
7547,10-19,41:41,segment right but usually we do not do that okay usually the receiver side will
7548,10-19,41:47,not do that directly because we know in reality networking the data is sending
7549,10-19,41:53,in a super fast speed okay it is very likely that there may be a next segment
7550,10-19,42:00,coming in okay then in this case to improve the efficiency usually in the first when we
7551,10-19,42:08,received the 92 we will delay this ack we do not directly ack 100 we will wait
7552,10-19,42:15,for some time up to 500 ms for the next
7553,10-19,42:21,segment okay if there's no next segment coming in then
7554,10-19,42:28,with the ack 100. okay which means it's telling the other
7555,10-19,42:33,part oh everything before 100 is correct we are actually executing this one
7556,10-19,42:39,okay okay basically in this first segment uh but if there is another segment
7557,10-19,42:47,coming in if if this sequence number 100 is coming in this segment coming again then in this case
7558,10-19,42:55,um we will actually execute them together okay
7559,10-19,43:00,does this make sense so basically when we uh have
7560,10-19,43:06,see all the segment coming in okay uh if this is this is the only segment that
7561,10-19,43:13,need to be execute usually we will wait for some time and see if we have another segment coming in okay if no then
7562,10-19,43:20,reversion ack okay but if for example if this the second one comes in
7563,10-19,43:26,okay and the first one is also is already waiting for ack
7564,10-19,43:32,okay it needs to be execated then in this case we just combined it to and send one single community ack together
7565,10-19,43:40,so this is the second situation actually okay
7566,10-19,43:45,um the third situation is if we are we we receive out order segment higher than
7567,10-19,43:51,expected secret number for example if we we are actually expecting 92 but now we
7568,10-19,43:57,received 100. okay then in this case we will immediately send a duplicate ack
7569,10-19,44:05,indicating the sequence number of the next expected byte okay so in this case
7570,10-19,44:11,for example if we are expecting 92 but we receive 100 then we will ack 92 okay
7571,10-19,44:19,ack 92 instead of ac king 100 okay um
7572,10-19,44:25,so if in the last case if the arrival segments
7573,10-19,44:31,um partially or completely fills the gap then in this case we will immediately
7574,10-19,44:37,send the ack okay uh provided that the statement starts at the lower end of the
7575,10-19,44:43,gap it feels some gap okay then we will execute that so those are all the
7576,10-19,44:48,actions that will be taken at the receiver side so another mechanism we are going uh we
7577,10-19,44:55,are going to talk about is called uh tcp faster transmit this is very important
7578,10-19,45:00,okay we know real transmission can happen in two cases one is time out the
7579,10-19,45:07,second one is duplicate ac keys okay um timeout sometimes is not very
7580,10-19,45:14,efficient you think about this okay because we may receive ac keys super
7581,10-19,45:19,fast okay but you have to read for a very long time uh tweet for this timer
7582,10-19,45:26,expire okay in this case you are you simply wasting the time okay uh but
7583,10-19,45:33,sometimes we we can we can immediately tell there's something wrong with the package because you can receive some
7584,10-19,45:40,duplicate ac keys super fast right so then in this case if we can detect the
7585,10-19,45:48,loss segments why duplicate sdks okay in this case the
7586,10-19,45:53,sender does not need to wait for the timer to expire okay the sender can
7587,10-19,45:59,immediately do the resend okay do the real transmission okay
7588,10-19,46:05,as i said here the center often often sends many segments back to back okay if
7589,10-19,46:13,segment is lost there will likely be many duplicate sicks okay like like
7590,10-19,46:19,um let's see we do not have a good example here but
7591,10-19,46:26,um as we said if something is wrong with the current package we may keep uh ack
7592,10-19,46:32,in the last one right the last one received okay so if you receive many duplicates sdks that already indicates
7593,10-19,46:39,something is wrong with the current segment okay then in this case you don't
7594,10-19,46:45,need to wait for the timer to expire you can immediately do the resend okay this
7595,10-19,46:51,is called faster transmit okay so for fastenal transmit uh if the sender
7596,10-19,46:58,receives three ac keys for the same data then it will resend the nac kids segment
7597,10-19,47:06,with the smallest sequence number okay
7598,10-19,47:12,um so please keep this in mind in the test i may ask you what is the connection for
7599,10-19,47:19,tcp real transmission okay so you know the condition is is
7600,10-19,47:25,that the sender receives three acks for the same data or the sender received
7601,10-19,47:31,through duplicate sdks okay then in this case we will do the root transmission
7602,10-19,47:36,you don't need a with one timer okay so as you can see here this is a example
7603,10-19,47:43,uh in this example uh we are sending this many packets out okay
7604,10-19,47:50,and unfortunately the second one is lost secrets number 100 is lost
7605,10-19,47:56,and then we know husby went to receive the first piece it will ack 100.
7606,10-19,48:02,when it receives the third piece the second piece is not received so it has no reaction
7607,10-19,48:08,went to receive the third piece it will again ack 100 because there is a gap
7608,10-19,48:14,okay because the sequence number 100 is not received yet so no matter how many packets must be
7609,10-19,48:21,receives afterwards it will keep continue keep uh keep ac
7610,10-19,48:26,king 100. okay in this case at the center side you can see
7611,10-19,48:32,um it receives duplicate ac keys okay so uh then in this case the sender don't
7612,10-19,48:41,need to wait for the timer because it it did probably a long timer okay and this
7613,10-19,48:47,ac case can happen really fast okay and then it will directly do the resending
7614,10-19,48:53,of the second segment okay so this is the example
7615,10-19,48:59,so the next thing we are
7616,10-24,0:04,so the next thing we are going to discuss today is the flow control
7617,10-24,0:09,um i mentioned flow control and congestion control uh again and again uh
7618,10-24,0:15,and you need to know the difference between them flow control means we don't want to overwhelm the receiver you don't
7619,10-24,0:22,want to send data too fast okay too much data too fast then the
7620,10-24,0:28,receiver may be overwhelmed um tcp congestion control is different this means the network is probably
7621,10-24,0:36,already congested and then we need to slow down the center we need to control
7622,10-24,0:41,the speed i'll send you out packets so we don't overwhelm the public network so
7623,10-24,0:47,that's the difference of between these two okay so you may ask how do we do the can flow
7624,10-24,0:54,control uh in order to know how we do the flow control we need to firstly understand how can the receiver be
7625,10-24,1:01,overwhelmed okay so you can see this is a receiver
7626,10-24,1:07,okay and again this receiver has all these layers application layer transportedly network layer etc okay so
7627,10-24,1:15,basically what will happen is you can see from the center side uh so the center will send in packets to
7628,10-24,1:23,the receiver right so these are the data payloads okay and you can see uh it has some
7629,10-24,1:30,headers here okay the headers may be network layer header transport layer header etc okay and then you can see
7630,10-24,1:38,when it comes to the network layer network layer will remove this network layer header
7631,10-24,1:44,okay and keep only the transport layer header this is the transport layer header
7632,10-24,1:49,and then this network layer will push this to the up layer again okay so to
7633,10-24,1:56,remove remove the transport layer header and save the pillow here
7634,10-24,2:02,okay then uh here the socket will have a
7635,10-24,2:08,buffer do you remember when we write the code for socket programming we have some numbers like
7636,10-24,2:14,when you create the socket it has a 1024 or 4000 um
7637,10-24,2:21,something 2048 those kind of numbers i told you those are the buffer for the
7638,10-24,2:27,socket right so the socket has some buffer to store this uh incoming data
7639,10-24,2:33,this incoming packets okay or we call them segments and uh when this data uh are already
7640,10-24,2:44,okay so for example if you have those data those segments um that are in order okay from one to
7641,10-24,2:51,ten or whatever and then when they are in order then we will send those data up
7642,10-24,2:59,to the up layer to the application layer okay so basically the application layer
7643,10-24,3:04,process those processes will come to this buffer to get some data
7644,10-24,3:11,okay to get some data um but you should know you should know
7645,10-24,3:17,when the data is removed when the application is removing the data from
7646,10-24,3:23,the tcp socket buffers okay it may be slower than tcp
7647,10-24,3:30,receiver is uh delivering the data okay because the sender is keep sending data
7648,10-24,3:37,and if this the data are going out slowly slowly okay then this part for me
7649,10-24,3:44,become 4. okay it may become full then in this case thus receiver is
7650,10-24,3:50,overwhelmed we don't want that to happen okay then you can see the critical part
7651,10-24,3:57,here is actually the size of this buffer and the availability of the buffer space
7652,10-24,4:04,how much buffer do we still have to store the new incoming data that is the
7653,10-24,4:11,key okay so flow control is basically the receiver can choose the sender so
7654,10-24,4:17,the sender won't overwhelm the receiver's buffer by transmitting too much too fast that means the receiver
7655,10-24,4:25,will stack how much space is still available and tell the sender say hey i
7656,10-24,4:31,have only this much space available please do not send me more data than that than that size okay so it's like if i if
7657,10-24,4:41,i um tell um the students to say hey i have only
7658,10-24,4:48,10 space uh tell the other side whatever the the department say hey i i have only
7659,10-24,4:54,10 positions available please do not send me more than 10 students it's like that okay
7660,10-24,5:00,so that you can see uh this is the entire buffer for the receiver
7661,10-24,5:07,okay and these are the already buffered data so now we still have this much free
7662,10-24,5:15,buffer space okay then the receiver will
7663,10-24,5:20,tell the sender say hey this is uh the size of my
7664,10-24,5:27,available battery space okay please do not send me
7665,10-24,5:32,data bigger than that okay more than that so then how could
7666,10-24,5:39,this receiver tell the sender the receiver will tell the sender by setting
7667,10-24,5:44,this rwnd which is receiving window okay or
7668,10-24,5:50,receiver area receiving window okay so where is this rwnd
7669,10-24,5:58,okay where is this rwnd if you go to this tcp settlement
7670,10-24,6:05,structure okay this is the segment structure that is used by the both the center and
7671,10-24,6:11,receiver okay they will communicate in this way and here you can see something
7672,10-24,6:17,like foreign
7673,10-24,6:24,do you see this one receive window okay this one is actually the rwnd
7674,10-24,6:34,is the receive window okay that means the number of bytes
7675,10-24,6:39,receiver we need to accept then you can see actually when the receiver responds
7676,10-24,6:45,to the sender it will also set this rwnd then the sender will check this rwnd and
7677,10-24,6:53,the center will immediately know how much data it should send okay so this is how the rwnd is set
7678,10-24,7:06,okay so as you can see here the receiver advertises free perfect space by
7679,10-24,7:12,including rwnd value in the tcp header of the receiver to sender segments okay
7680,10-24,7:20,um it's in the response segments actually okay the receive buffer size is
7681,10-24,7:25,set while the socket options okay and actually many uh operating systems they
7682,10-24,7:32,will directly adjust the receive buffer so basically it's a receiver we know
7683,10-24,7:39,it's this entire thing okay the operating system may adjust this receive buffer okay and you can also set this
7684,10-24,7:48,receive buffer uh wires the socket options as what we have done before okay
7685,10-24,7:53,and then when the sender receives this rwnd the center will limit the amount of
7686,10-24,7:59,an ac kit in flight data to the receiver's rwne value
7687,10-24,8:06,okay that means if rw of nd equal to four thousand
7688,10-24,8:11,okay then the center will have at most 4 000 vital data in flight
7689,10-24,8:20,okay so this guarantees the receiver uh we are not be overwhelmed okay
7690,10-24,8:28,any questions so far
7691,10-24,8:34,all right okay so we will continue to discuss the connection management plan so today we are very efficient
7692,10-24,8:43,um so for connection management uh connection basically means establishing
7693,10-24,8:50,a connection between before the data exchange we mentioned this uh again again right so we said for udp we do not
7694,10-24,8:58,need to make any connection before date exchange but for tcp we all need that
7695,10-24,9:04,then how do we establish a connection okay we said we will do something called
7696,10-24,9:09,through v handshake so basically the client and the serversy high high to each other okay it's like that
7697,10-24,9:16,um so basically um before exchanging the data the sender
7698,10-24,9:23,and receiver will do some handshaking they agree to establish a connection and
7699,10-24,9:28,each each knowing the other willing to establish connection okay and they also
7700,10-24,9:34,agree on connection parameters okay do you remember i mentioned before
7701,10-24,9:40,um the first sequence number first ac key number etc so those those parameters
7702,10-24,9:45,are actually negotiated during the established connection part okay so
7703,10-24,9:51,basically the socket the uh one side will establish a client
7704,10-24,9:57,socket and the other side will agree to accept this connection okay do
7705,10-24,10:06,you remember this connection socket okay so the connection socket
7706,10-24,10:12,um we learned basically two type of sockets several sockets at the
7707,10-24,10:18,tcp socket programming right so we said there is a welcoming socket which is the
7708,10-24,10:24,server socket uh that welcoming socket we are basically um accept the connection and then later
7709,10-24,10:33,it will create a different type of socket which is actually doing the real
7710,10-24,10:40,business to help the clients to deal with the client's request so in the midterm exam we also have that question
7711,10-24,10:46,how many types of uh server socket will be established at the
7712,10-24,10:53,um uh in the tcp right at the server side and we said actually there are at
7713,10-24,10:59,least two types okay so let's first look at the established
7714,10-24,11:07,connection part how do we establish a connection so a very simple way is to do a three a tooling handshake actually
7715,10-24,11:14,okay so for example for human being uh you can just say uh say hey let's talk
7716,10-24,11:21,okay and then the receiver will say okay sure let's talk okay so then this
7717,10-24,11:26,connection is established um this will work perfectly in human
7718,10-24,11:33,society because humans can see each other okay they can see each other they can
7719,10-24,11:39,um they can they can sense each other okay but this will not work in
7720,10-24,11:47,um network okay because in networking um the two parties cannot really see
7721,10-24,11:55,each other okay and they do not know what is happening at the other side
7722,10-24,12:01,okay so then if we do two-way handshake we may run into problems so let's see
7723,10-24,12:08,why let's see some of the village scenarios for example let's say the this machine clients say choose our
7724,10-24,12:16,x and say hey can i is that my connection with you and then the server will say sure let's connect
7725,10-24,12:23,okay it seems good right but okay
7726,10-24,12:29,and also after some time okay after some time and these two these two machines uh
7727,10-24,12:36,after the connection is complete then then the client side will terminate and the server side will simply sketch this
7728,10-24,12:42,connection okay but what if what if for example
7729,10-24,12:49,um this kind of side may think this one
7730,10-24,12:54,this one is not sent correctly okay then the server the client side may
7731,10-24,13:00,do a real transmission okay so for example let's say maybe the ac
7732,10-24,13:06,case is lost or whatever okay so then this can i started with me maybe uh
7733,10-24,13:12,maybe uh doing a re-transmission but this real transmission unfortunately finally comes to the
7734,10-24,13:20,server side after this termination is done
7735,10-24,13:26,okay but at the server side the suicide doesn't know this is a re-transmission
7736,10-24,13:32,it will think oh there is a new request coming okay and then the server side let me say
7737,10-24,13:39,oh let's establish a connection okay but actually the client is already
7738,10-24,13:45,gone okay so that in this case you can see
7739,10-24,13:50,um it's actually a half open connection there's no client there is only the
7740,10-24,13:57,server there hoping the client is there but the client is actually already gone okay we didn't get any confirmation from
7741,10-24,14:04,the client so this is actually a failure scenario okay
7742,10-24,14:09,um another scenario is actually about the uh also similar okay so for example
7743,10-24,14:15,in this case um this client said can we can we connect
7744,10-24,14:20,okay so we'll see yes let's connect okay and then client began to send the data
7745,10-24,14:25,and then the server accepts data very happy right everybody's happy and i
7746,10-24,14:31,after everything's down determine this connection okay
7747,10-24,14:36,but in this entire process again we may have lost ac keys okay we may have
7748,10-24,14:43,timers timers times out okay then the client side will client sign doesn't
7749,10-24,14:50,know what has happened at the receiver side right so client designer will say oh let me do re-transmission because
7750,10-24,14:58,maybe the server didn't receive my request so it did a real transmission of this
7751,10-24,15:05,connection request and also did a real transmission of the data okay again those requests and the data
7752,10-24,15:13,may arrive at the server side only after the connection is completed okay after
7753,10-24,15:19,this is terminated then at the server side the server will feel like oh a
7754,10-24,15:25,client is uh um requesting to establish connection and also even better a client is sending
7755,10-24,15:34,data so the server feel like it's talking to a real live
7756,10-24,15:40,client but actually there's no client okay the server is actually only talking
7757,10-24,15:47,to itself okay so that is the problem of the
7758,10-24,15:52,two-way handshake that's why this fails okay so that's why in reality instead of
7759,10-24,15:59,doing two way we will do survey we will get the confirmation from a client again to make sure both parties are still
7760,10-24,16:05,there okay so basically what will happen is the client avails client side will
7761,10-24,16:12,send an initial request with a sequence number x this is negotiated and a same
7762,10-24,16:18,bit set to one sim bit set to one means i want to establish connection with you
7763,10-24,16:24,okay so where is the same bit if you look at
7764,10-24,16:30,this tcp segment structure again
7765,10-24,16:36,okay so this is the same bit s is the same bit okay there is actually
7766,10-24,16:44,also f beat for finish okay finish and we also have a bit right ack so these
7767,10-24,16:52,are all the bits that may be used to establish the connection okay and keep that in mind the same bit is something
7768,10-24,16:59,real it's not what we um made up okay
7769,10-24,17:06,okay so send a scene bit means i want to establish a request a connection with
7770,10-24,17:11,you this is request and then the server side will reply with a simple equal to
7771,10-24,17:18,one i see k bit equal to one so both the c and ack in set to 1 means the server
7772,10-24,17:23,agrees to establish the connection okay of course the sequence number is uh also
7773,10-24,17:29,set and chosen by the um the server side so the ac key number
7774,10-24,17:35,equals to x plus one because this means i have already received your apps and i'm expecting x plus one now okay but
7775,10-24,17:43,that's not important the most important thing is you should know that in the reply c equal to 1 is equal to one here
7776,10-24,17:50,is c equal to one and a c k equal to zero foreign
7777,10-24,18:01,number okay and then the client will reply with the
7778,10-24,18:07,ack bit equal to one and same bit equals
7779,10-24,18:13,to zero okay so these are the numbers that will be set in the three handshake so in this
7780,10-24,18:19,way uh basically the client answer already confirms with each other that they are willing to establish the
7781,10-24,18:25,connection okay so that is a theory handshake and tcp may also close a connection
7782,10-24,18:32,after everything is done okay so how do we close the connection basically the
7783,10-24,18:38,the client will say hey i want to break up with you think bt equal to one okay
7784,10-24,18:44,and then this the server will say okay i agree
7785,10-24,18:50,okay but the server will also see to confirm with you i also want to break
7786,10-24,18:55,out with you okay break up with you so then the client will also say okay i
7787,10-24,19:02,confirm okay with ac kb is equal to one uh
7788,10-24,19:07,usually these two these two can be sent in just one respond this two can be
7789,10-24,19:14,um combined with combined which means the server while it is ac key uh the uh
7790,10-24,19:22,connection finished request from the client it also tells the client that i
7791,10-24,19:28,also want to break up with you okay i also want to finish this connection and
7792,10-24,19:33,then the the client will ack and then finally they will just close this
7793,10-24,19:40,connection okay so this is the entire process um all right so we finished 3.5 today we
7794,10-24,19:47,will continue to discuss the congestion control of tcp okay
7795,10-24,19:52,um so let me firstly remind you again about the difference between flow
7796,10-24,19:58,control and congestion control last time away uh discussed the flow control flow
7797,10-24,20:04,control is not to overwhelm the receiver so how do we do the control basically
7798,10-24,20:09,the receiver is controlling the sender by setting the rwnd do you still
7799,10-24,20:16,remember setting the receiving window right so that basically the receiver is
7800,10-24,20:21,telling the sender hey i have only this many buffer space so please do not send
7801,10-24,20:29,more than that um right so for example if the rwmb is 4000 that means uh the sender can at
7802,10-24,20:36,most have four thousand um and ac kit buys in flight okay
7803,10-24,20:43,so that is the flow control and then uh congestion control as i said is actually
7804,10-24,20:50,uh not to overwhelm the network okay so informally congestion means too many
7805,10-24,20:56,sources sending too much data too fast for network to handle
7806,10-24,21:03,um and then basically the manifestations are lost packets or long delays okay so
7807,10-24,21:12,if you say a long delay um for the package then that means there is
7808,10-24,21:19,congestion or even worse you may experience lost packets okay that's
7809,10-24,21:24,because the buffer is overflowed at the router okay so congestion control is
7810,10-24,21:30,still a top 10 problem for networking okay and
7811,10-24,21:36,um researchers and the industry are working hard on this
7812,10-24,21:41,um so before we um think about how to do congestion control we need to firstly understand
7813,10-24,21:48,why we need to congest control so what is the reason behind okay
7814,10-24,21:55,um so now let's look at a very simple example here we have host a
7815,10-24,22:02,and we have probably a server here okay and we also have a host b and another
7816,10-24,22:08,server here we'll assume there are two senders and two receivers in this scenario okay and then the host a and
7817,10-24,22:16,host b the share um
7818,10-24,22:21,router okay but all their pack is how to go through this router okay and we at
7819,10-24,22:27,the very beginning you assume this router has unlimited buffer space unlimited buffer space basically means
7820,10-24,22:34,there will never be buffer overflow that means there will never be dropped packets all the packets will finally be
7821,10-24,22:42,delivered right so then if we have no dropped package then that means we do not need to have
7822,10-24,22:49,any re-transmission because no pack is allowed i lost all the packages will be
7823,10-24,22:54,delivered so why do we need to do recognition right um
7824,10-24,22:59,then that is a scenario one and then in this scenario we uh assume we have we
7825,10-24,23:07,have lambda in and the lambda out so what is this um so this is basically the uh
7826,10-24,23:15,throughput okay uh or we you can think it has a the
7827,10-24,23:21,data sending rate or transmitting rate uh then none out is like the data
7828,10-24,23:27,receiving rate okay um so now let's look at the relationship
7829,10-24,23:32,between lambda e and lamb out okay so here is the one
7830,10-24,23:39,um the figure you can see as usually as lambda e increases
7831,10-24,23:45,okay lambda out will also increase this is not this is actually very straightforward very easy to understand
7832,10-24,23:52,um basically if host a is sending more data at a faster speed then of course at this
7833,10-24,24:02,side at the output we will receive more data as a faster speed right so it's
7834,10-24,24:07,like that but you need to pay attention uh because
7835,10-24,24:12,although this this router has unlimited buffer but the out the
7836,10-24,24:18,um the output link okay from a and b the total capacity is r okay the total
7837,10-24,24:25,capacity is r that means for each one of them they can at most have a half hour
7838,10-24,24:32,okay they can at mostly use half a wall for the um for the link capacity okay or for the
7839,10-24,24:39,bandwidth okay so it's like in total the bandwidth is r then each route can have at only at
7840,10-24,24:49,most half of the bandwidth okay so that's why as you can see when the
7841,10-24,24:54,lambda e increased to the point of half of our the lambda out will not increase
7842,10-24,25:00,anymore it becomes constant okay it can at most be half hour
7843,10-24,25:08,okay that is the reason and if you look at at look at the delays
7844,10-24,25:16,then the delay will also increase but when it approaches half overall which
7845,10-24,25:21,means this round is very very busy now then the delay will increase
7846,10-24,25:27,significantly okay so that is the relationship between lambda e and lambda out and again in
7847,10-24,25:35,this scenario we assume there uh the buffer at the router is unlimited okay
7848,10-24,25:42,so the lambda out will increase as lambda e increase but reach a maximum of
7849,10-24,25:49,half hour sorry uh half hour okay
7850,10-24,25:56,so that is scenario one for scenario two we assume we have uh
7851,10-24,26:02,affinity buffer okay so finish the buffer basically
7852,10-24,26:07,means uh now the the router the router have
7853,10-24,26:14,a limited buffer then if we have too many packets coming in okay the buffer
7854,10-24,26:22,can cannot hold that many packets when the buffer is a full then we will have
7855,10-24,26:27,the router will have to drop some packets okay in this case if the packets
7856,10-24,26:33,are dropped okay in order to ensure the same lambda
7857,10-24,26:38,out say the same effective output we have to do some reasoning at the transport layer
7858,10-24,26:46,do remember uh the reliable data transfer we have learned just now not
7859,10-24,26:52,just now actually in the previous classes we have learned uh the reliability transfer protocol and we
7860,10-24,26:59,set usually when the data packets are lost what will happen is the sender side
7861,10-24,27:06,will keep a timer right so the timer expires and then we do the resending
7862,10-24,27:14,okay so this happens at the transporter layer so that's why you can see here we
7863,10-24,27:22,have lambda in this is application layer and the lambda m prime this is at the
7864,10-24,27:29,transport layer which means they are different okay they are different
7865,10-24,27:34,um if this network is very busy to reach the same lambda out usually
7866,10-24,27:42,lambda in prime has to be bigger than lambda e why because for example let me
7867,10-24,27:51,say okay we want to send application layer data for example if this this data
7868,10-24,27:56,is abcd we send four bytes okay and then let's assume now we are sending
7869,10-24,28:04,abcd okay as application layer we are sending
7870,10-24,28:10,these four levels then as a transporter layer okay one abcd are sent out if this
7871,10-24,28:17,network is very busy and if this buffer is full then some of the letters may be
7872,10-24,28:23,dropped okay so maybe b is dropped the c dropped okay then in order to to deliver
7873,10-24,28:31,this data rely in a reliable way we have to resend the b again at transport layer
7874,10-24,28:39,okay the first b and recent b and at and for c the same thing recent c again okay
7875,10-24,28:46,sometimes we may do even resend the d if if we are using some protocols let's go
7876,10-24,28:53,back in okay of course if we are using select to repeat that we
7877,10-24,28:58,may do um we may only resend b and c okay but
7878,10-24,29:04,anyway here let's assume we only use that b and c but now you can say in order to receive
7879,10-24,29:12,a b c d correctly here at the lemon out okay and output we have to do summary
7880,10-24,29:19,sending at the transport layer okay and these resoundings are not necessary okay i'm
7881,10-24,29:29,not actually ideally we don't we don't want to have this right
7882,10-24,29:36,um but then based on this you can see okay lambda in prime is usually bigger than the lambda e okay so that means so
7883,10-24,29:46,i have already mentioned this but i want you to see this animation we have free powerful space then it is
7884,10-24,29:54,fine okay
7885,10-24,29:59,so that in this case in this case it's not busy and it's not busy yet okay so
7886,10-24,30:08,so then you can see laminating increases and then lambda out also
7887,10-24,30:14,increase this is uh the idea um situation where we have perfect
7888,10-24,30:19,knowledge we know okay sometimes uh we know when the buffer is available
7889,10-24,30:25,then we do the sending okay but in reality is oh another situation is we know the loss
7890,10-24,30:32,okay we know when the loss happens no buffering space okay it's dropped
7891,10-24,30:39,and then we have to send it again
7892,10-24,30:48,okay so in this case you can see the lamina in prime is uh
7893,10-24,30:54,near is almost the same as lambda out because
7894,10-24,30:59,we know when the loss will happen okay and we will do the re redelivery or re
7895,10-24,31:06,sorry resending only when loss happens okay this actually this is still ideal
7896,10-24,31:13,situation but in real life reality okay in reality we don't know if the packets are lost or
7897,10-24,31:20,not maybe the abcd has already been received but we just don't know okay
7898,10-24,31:27,maybe the ac keys are lost right so we don't know and sometimes
7899,10-24,31:33,select this
7900,10-24,31:39,okay so let me repeat
7901,10-24,31:55,okay so this is a you can see in this case we do not have any loss of data
7902,10-24,32:02,okay but still the center did the resending okay uh maybe abcd has already
7903,10-24,32:08,been have already been received but still the sender may resend some uh data
7904,10-24,32:14,okay so in this case in this case the relationship between land in prime and
7905,10-24,32:21,lambda out is like this okay even in order to reach
7906,10-24,32:27,this effective land out we have to work a lot we have to make laminating prime
7907,10-24,32:35,this big okay so this is the the third case uh in
7908,10-24,32:41,this case when we have no loss okay when we have no loss basically if we have for
7909,10-24,32:47,example a c d is received we know b is uh lost so we only resend b okay
7910,10-24,32:55,then um in this case i mean it's although it's not ideal but still it's near
7911,10-24,33:02,perfect okay in reality is not that perfect that's why as you can see we see
7912,10-24,33:08,a figure like this okay that means okay for scenario two let me summarize
7913,10-24,33:15,although we talked about a lot but the takeaway message is
7914,10-24,33:21,more work is needed for giving good food
7915,10-24,33:30,okay and we have a lot of unneeded re-transmissions okay the link may
7916,10-24,33:39,carries may carry multiple copies over the packet okay so that is actually the number one
7917,10-24,33:47,reason for congestion why do we have congestion because for a
7918,10-24,33:55,given good put there are a lot of re-transmissions
7919,10-24,34:01,these retransmissions may or may not be and needed
7920,10-24,34:07,okay so that this re-transmission retransmitted package will consume the
7921,10-24,34:14,resources on the network okay those link the links network links has to carry
7922,10-24,34:20,this uh multiple copies of targets that's why we have a congestion number
7923,10-24,34:26,one reason for congestion
7924,10-24,34:38,okay this is scenario two and now let's look at scenario three we
7925,10-24,34:44,just found out one reason for congestion actually there are still more reasons okay so let's look at congest scenario
7926,10-24,34:51,third in this scenario we have host a house b host d and host c here okay and
7927,10-24,35:00,interestingly pay attention host a is actually communicating with host c not
7928,10-24,35:06,host b if you if you follow this red route here okay the red route here
7929,10-24,35:13,actually the host a is communicating with host c and if you follow this round
7930,10-24,35:19,here for host d okay then you can see host d is actually communicating with
7931,10-24,35:25,host b okay and again they share this uh
7932,10-24,35:32,router okay um and now what we want to look at is this
7933,10-24,35:40,lambda in and this lambda out okay so pay attention we are looking at
7934,10-24,35:45,this lambda in and this lambda out they belong to different rows
7935,10-24,35:52,not this lambda out no okay why do we study the alumni and lamb
7936,10-24,36:00,out from different routes because we want to learn the interactions between these two
7937,10-24,36:06,rows okay so let's make me make this easier
7938,10-24,36:12,okay so what will happen as lambda in increase
7939,10-24,36:18,as we can imagine as laminating increase the limited employment will also increase
7940,10-24,36:24,okay and at the same time the input at the hospitality will also increase
7941,10-24,36:30,so then what you will see is is like lambda increases so lemon out also
7942,10-24,36:36,increases because they are all increasing okay okay but
7943,10-24,36:43,at one point because these two rounds share this buffer okay share this buffer at one
7944,10-24,36:50,point this buffer may get four okay negative four then we have a
7945,10-24,36:56,problem now okay we have problem because this buffer is a four so the battery will begin to drop packets
7946,10-24,37:03,okay but the question the problem is host a you can see if host a and host d
7947,10-24,37:11,if they all send the same the package at the same time okay if we are seeing x
7948,10-24,37:18,and y okay so x and y which packet will arrive at this
7949,10-24,37:25,router faster apparently x will arrive at this buffer
7950,10-24,37:32,faster why because you can see y has to go through
7951,10-24,37:38,also this router so why is falling away from this
7952,10-24,37:45,router okay so x is closer so that's why x can
7953,10-24,37:50,arrive faster okay the the problem is if we have only limited space at this
7954,10-24,37:57,router r let's see okay this is r1 r2 okay at around r1 if we have a limited
7955,10-24,38:06,space then x will arrive faster so we can still accommodate x okay but y will
7956,10-24,38:14,arrive late so we have to drop y because we do not have space for y anymore
7957,10-24,38:21,okay then this is actually a very sad story why because you can see this package y
7958,10-24,38:28,actually travels a long way from host d two
7959,10-24,38:34,finally r1 but y is killed here
7960,10-24,38:40,okay y is killed here then in this case y cannot reach the destination b okay it already it already
7961,10-24,38:50,used a lot of resources before r1 for example it already consumes the resource
7962,10-24,38:55,at r2 okay but finally it doesn't arrive at
7963,10-24,39:01,the destination we can see this is a visa resource okay this is a with resource for packing
7964,10-24,39:08,y okay so that's actually the number two reason
7965,10-24,39:13,for the congestion
7966,10-24,39:26,the number two reason is when a package is dropped
7967,10-24,39:32,any upstream transmission capacity used for that packet was wasted
7968,10-24,39:40,okay when y is dropped all the capacities we have used before
7969,10-24,39:47,reaching r1 okay is wasted okay so that is the number two reason
7970,10-24,39:55,for congestion and some of you may want to know why do we have this figure actually as you can see as lambda in
7971,10-24,40:02,prime increases lambda out is increasing at the very beginning okay so as uh this
7972,10-24,40:09,one is this one is increasing and the hosty is also in sending data faster so
7973,10-24,40:15,so that's why lambda out is increasing but at some point okay when they all
7974,10-24,40:21,reach a big number then the the pack is from host a we all have more privilege
7975,10-24,40:30,because it's closer to r1 so that's why when lambda is increasing again then
7976,10-24,40:37,lambda out will be will be decreased because
7977,10-24,40:42,all the packets from host d are throttled at this point okay and r1
7978,10-24,40:48,so that's why you can see as laminate is increasing actually it it begins to
7979,10-24,40:55,like it is competing with the the the the blue route here right so that's why
7980,10-24,41:03,you can see the lambda actually decrease significantly okay we talked about a lot okay i don't
7981,10-24,41:11,expect you to remember the relationship between london england prime lambda out
7982,10-24,41:16,etc okay i only need you to remember the reasons for congestion i will test the
7983,10-24,41:24,reasons okay for the congestion number one
7984,10-24,41:30,reason is because for a given good put we have
7985,10-24,41:35,to do a lot of re-transmissions those retransmissions will consume the network
7986,10-24,41:42,bandwidth that is number one reason number two reason is when a packet is
7987,10-24,41:48,dropped all the upstream transmission capacity used for that package was
7988,10-24,41:53,already listed okay that is the number two reason so those are the two reasons
7989,10-24,41:59,for congestions and i may ask you this question in the test what are the two reasons for congestion
7990,10-24,42:05,okay so you need to know that um
7991,10-24,42:10,and
7992,10-26,0:03,um and there there were some approaches towards uh there are some approaches for
7993,10-26,0:09,congestion control okay so these two here releases are the two commonly used
7994,10-26,0:16,approaches one is called end-to-end congestion control this means we do not get any
7995,10-26,0:23,explicit feedback from the network no feedback from the network okay now how
7996,10-26,0:30,do we know the congestion how do we know the status of the network what we can do is we infer the
7997,10-26,0:37,congestion from the end system by observing the loss and delays okay
7998,10-26,0:44,it's like if your mom observes that you arrived at home late then your mom may
7999,10-26,0:51,say oh there is congestion on the road okay it's like that so this is actually the approach taken by tcp
8000,10-26,0:58,okay another type of congestion control is called network assess assisted
8001,10-26,1:04,congestion control uh in this method the routers will provide feedback to the end
8002,10-26,1:11,systems so basically there there are some bits indicating the congestion
8003,10-26,1:17,okay um and also uh
8004,10-26,1:23,um yeah this piece basically will be sent for example beside to one to tell uh the
8005,10-26,1:31,sender say hey uh there's a congestion okay so it's like that
8006,10-26,1:36,um let's say maybe this is actually this is a this one is used in tcp and this
8007,10-26,1:44,one is actually not um use the very commonly at the current
8008,10-26,1:50,network okay the current network um but i i want to maybe quickly discuss
8009,10-26,1:56,this this will not appear on the test but i want i want to want you to understand how this congestion control
8010,10-26,2:03,was done before okay so firstly we have something called abr
8011,10-26,2:08,which is available bitreach okay um
8012,10-26,2:14,so let's see so if the central path is under loaded
8013,10-26,2:20,the sender should use the available bandwidth if the center part is congested then the center will be
8014,10-26,2:26,throttle to a minimum guaranteed rate okay and then there
8015,10-26,2:32,in the communication between two parties in addition to the data cells the data
8016,10-26,2:39,cells will carry the data we will also have those cells called resource management cells okay those resource
8017,10-26,2:46,management cells are sent by the sender interspersed with the dead cells okay
8018,10-26,2:54,um and then there are some bits in the rm cell resource matter myself
8019,10-26,3:00,um so for example no increase speeds a night beat or a ci beat which means
8020,10-26,3:07,congestion indication okay so uh these rm cells will travel together with the
8021,10-26,3:15,data and then um what will happen let's look at this
8022,10-26,3:21,okay so you can see the white ones i did the cells the red ones are resource management cells so those cells will
8023,10-26,3:28,travel together okay um
8024,10-26,3:33,so there is a two byte er rate field
8025,10-26,3:39,so er is a explicit to read okay then
8026,10-26,3:44,this number will if for example if if this uh um
8027,10-26,3:50,cell comes to a router and this router is very busy okay it's very busy then
8028,10-26,3:58,um this router may deduct some number
8029,10-26,4:03,okay deduct some number to make this er a smaller value
8030,10-26,4:10,okay um and then find when when it comes to
8031,10-26,4:16,another router if it's not busy then we do not change the er but if the second
8032,10-26,4:21,round trip is also busy then again this error will be deducted okay your value will be deducted so finally we're going
8033,10-26,4:28,to reach reaches the uh the receiver okay then we get a
8034,10-26,4:35,we get this then we will get to know um what how congested this network is
8035,10-26,4:43,okay and then there is also the efci bit in the data cells okay in the data cells
8036,10-26,4:51,we have the efci bits okay so this speed is set to 1 in the congestive switch
8037,10-26,4:59,okay so you can see um we have rm cells we also have bits in
8038,10-26,5:05,the data cells so all those data combined together will tell the we'll
8039,10-26,5:11,we'll um finally reach the receiver and then the receiver will send this feedback to
8040,10-26,5:18,the sender to tell the sender say hey you need to slow down okay so it's like that this was how congestion control was
8041,10-26,5:25,done before okay it's not very common but i want to show you how congestion
8042,10-26,5:32,control is done in tcp okay as i said this part
8043,10-26,5:41,okay i will not test this on the on the test
8044,10-26,5:48,okay
8045,10-26,6:02,okay but for tcp congestion control i will definitely have a test
8046,10-26,6:08,okay yes by uh we have a question by cells are you referring to packets yes yes
8047,10-26,6:16,here this uh there are packets but we have different kind of packets some packets are for data some packets are
8048,10-26,6:22,for resource management okay so how do we do uh congestion control in
8049,10-26,6:30,tcp okay uh it's actually very interesting the approach taken by tcp is
8050,10-26,6:38,called addictive increase and multiplicative decrease okay so basically the center of your
8051,10-26,6:46,increase to the transmission rate gradually the transmission rate here means the window size okay the sender's
8052,10-26,6:54,window size so if the window size is 2000 that that means we can have two
8053,10-26,6:59,thousand in-flight bytes if it's 4 000 that means we can have 4 000 in-flight
8054,10-26,7:05,bytes okay so basically the center will increase this transmission rate gradually
8055,10-26,7:11,probing for usable bandwidth until loss occurs okay when loss occurs
8056,10-26,7:19,then um we can do multiplicative decrease we want to decrease as fast as possible
8057,10-26,7:26,okay to decrease to a very low number so to improve the condition uh quickly okay
8058,10-26,7:32,so that's what we do for example we can say this is a cwnd cw indeed is the
8059,10-26,7:39,congestion window size okay so then it is increasing gradually and if we see a
8060,10-26,7:47,loss here then we will do multiplicative decrease so it decreases to half of that
8061,10-26,7:54,number so then it will increase again and may have lost we cut to half again
8062,10-26,8:01,okay and increase gradually again so finally you can see some kind of a
8063,10-26,8:07,sawtooth behavior okay so this is this is like the basic
8064,10-26,8:14,principle approach okay um so then some of you may ask what is cwnd
8065,10-26,8:22,as we said the cwnd is the congestion window okay so it's just the window size
8066,10-26,8:29,we learned before for go back and select repeat and for tcp okay so basically we
8067,10-26,8:36,want to make sure the last bite is sent this is the last bison minus the last
8068,10-26,8:43,byte ac kit okay this number is smaller or equal to cw and d that is basically
8069,10-26,8:51,means uh we have we can have at most this many cw and d bytes our data and a
8070,10-26,8:58,secret okay so cwd is dynamic um
8071,10-26,9:05,um is a dynamic function of perceived network congestion okay so basically
8072,10-26,9:11,then the tcp sending rate can be roughly like cw and d over rtt bytes per second
8073,10-26,9:18,why because as we said so we we uh we have to we can have at
8074,10-26,9:26,most cwnd by sol data in flight so that then how much time do we need to
8075,10-26,9:33,finish this entire from this uh for the for these bytes we have to use rtt time
8076,10-26,9:39,right so the data arrive at the the receiver or the receiver send feedback and then we can send another
8077,10-26,9:46,cwnd by sub data okay so that's why the transmission rate is like cwnd over rtt
8078,10-26,9:54,okay um
8079,10-26,10:00,so then for the tcp you can see how originally we said it is a increasing
8080,10-26,10:08,gradually right the cwd is increasing by one uh
8081,10-26,10:14,mss every rtt so it means at the beginning we have one then we have two
8082,10-26,10:20,then we have three we send a one package two packets three packages like that so here yms means maximum
8083,10-26,10:30,segment size okay
8084,10-26,10:37,so it means every time we just increase one package but in reality in reality in tcp we we
8085,10-26,10:45,do not do that we actually what we do is we do this exponentially so and the
8086,10-26,10:52,first time we will send one segment second time mission two and third time
8087,10-26,10:58,representative four the next time you can send eight okay we do
8088,10-26,11:03,um we increase this read exponentially and here the loss happens
8089,10-26,11:09,okay so this phase is called slow start okay slow start
8090,10-26,11:17,and then if we have lots of packets okay
8091,10-26,11:22,the loss of package may be indicated by timeout if the timer times out
8092,10-26,11:30,so uh this indicates loss right so uh it
8093,10-26,11:36,may also be indicated by third duplicate ac keys do you remember the fast rear
8094,10-26,11:42,transmission so if we keep receiving duplicates duplicate sdks that means something is
8095,10-26,11:49,wrong with the current package do you still remember that the apple or an example right
8096,10-26,11:55,so then for these two cases the loss can be indicated by either time out or
8097,10-26,12:02,duplicate executes so i would say duplicate it is the case may actually
8098,10-26,12:08,indicates the congestion is not very serious
8099,10-26,12:13,why because the ac keys can still come through right it can still arrive at the
8100,10-26,12:18,center side but if you have time out usually the congestion is already very serious
8101,10-26,12:26,because there is even no feedback coming back okay so that's why if we have a loss
8102,10-26,12:33,indicated by timeout the cwme will be directly set to one no
8103,10-26,12:41,matter what is the current number if the current number is doubling is equal to 100
8104,10-26,12:46,i don't care i just directly send it to one if there is a loss happening if if
8105,10-26,12:51,we if we find some time out okay then the window growth exponentially to the
8106,10-26,12:58,threshold and then grow linearly so how do we set this threshold
8107,10-26,13:04,i'll explain this later your threshold is half of the window uh when congestion happens okay
8108,10-26,13:13,um so let's look at one example
8109,10-26,13:19,let's look at one example so
8110,10-26,13:26,maybe let's finish this first let's finish this line and i'll explain example okay so if the loss is indicated
8111,10-26,13:33,by three duplicate sdks then what we will do is um we cut the cwnd to half and then grow
8112,10-26,13:42,linearly okay so this is called tcp renault but tcp tahoe is uh
8113,10-26,13:49,means we always set cw and d to one no matter if the loss is indicated by time
8114,10-26,13:55,out or through duplicate uh packets okay through duplicate ac keys
8115,10-26,14:02,um so this tcp random and tcp tahoe are the two modes that we may use okay so
8116,10-26,14:10,then let's look at an example i know probably you feel like overwhelmed what does this mean okay so this basically
8117,10-26,14:17,means at the very beginning
8118,10-26,14:22,the cwnd is set to 1. okay which means each time we send out
8119,10-26,14:28,only one packet and then we increase it to two then we double it to four we
8120,10-26,14:35,double it to eight okay and here we reach a point this is
8121,10-26,14:41,called a threshold so what is threshold threshold is usually half of the
8122,10-26,14:49,previous uh um window size when congestion happens so
8123,10-26,14:56,for example originally maybe this is 16 okay the middle size is 16. and then we
8124,10-26,15:04,found loss okay the loss may be indicated by
8125,10-26,15:10,timeout or through duplicate sdks so we find the laws okay then we decrease this
8126,10-26,15:16,to one okay and now this is uh actually when it
8127,10-26,15:22,increases to half of half of this window size okay then 16 divided by 2 equal to
8128,10-26,15:29,8. then because last time we know at 16 we have
8129,10-26,15:36,congestion so that's why now when we increase to eight we begin to be very carefully we
8130,10-26,15:43,don't want to double again because if you double again the eight doubles becomes 16 is
8131,10-26,15:50,congestion again right so we want to avoid the congestion that's why we will
8132,10-26,15:56,increase linearly instead of exponentially so that's why we will have nine
8133,10-26,16:03,ten eleven twelve now let's see if we have lost again
8134,10-26,16:10,at this point okay and then next what you can choose is you can choose either the tcp tahoe or tcp
8135,10-26,16:19,renault so if you choose tcp uh tahoe then you will need to decrease this
8136,10-26,16:27,directly to one again okay and they will double so one two
8137,10-26,16:35,four the next one cannot be eight because what because now you can see
8138,10-26,16:40,this is a cw and d equals to 12. so half of 12 is
8139,10-26,16:47,six so we cannot make it eight we have to stop here at six that's why this
8140,10-26,16:53,threshold is equal to six now is a half of 12 okay so then after that again you
8141,10-26,17:00,will increase linearly okay so this is tcp tahoe
8142,10-26,17:07,if you are using tcp renault then instead of going to one directly you
8143,10-26,17:13,will go into six you will go to six drop it to six and then directly increase
8144,10-26,17:19,linearly okay
8145,10-26,17:30,okay so this will appear on the test this will appear on the test
8146,10-26,17:37,um i will basically for example i i will give you uh a cwnd when congestion
8147,10-26,17:45,happens camera loss happens and i will ask you what will you do if you are
8148,10-26,17:51,using tcp to how what will you do if you are using tcp rhino
8149,10-26,17:57,okay this is how we control the congestion um so if we summarize basically for t250
8150,10-26,18:05,can just control we have three phases slow start congestion avoidance
8151,10-26,18:13,and then if we have a congestion then we will do first recovery okay so
8152,10-26,18:21,those are the three uh states for congestion control the slow start is
8153,10-26,18:26,basically the exponential increase part so this is the
8154,10-26,18:33,slow start this is the
8155,10-26,18:40,congestion avoidance
8156,10-26,18:46,so this is a the first
8157,10-26,18:53,recovery
8158,10-26,18:58,so these are the three phases so if we look at the tcp throughoutput
8159,10-26,19:04,okay you look at the throughput um the tcp throughoutput is a function
8160,10-26,19:10,of the window size and also the rtt right because during this rtt time we
8161,10-26,19:19,are sending the window size by so data okay so then basically the tcp
8162,10-26,19:27,throughput is a calc calculated by using uh something about window side divided
8163,10-26,19:34,by the rtt right but because of this congestion control let's see okay let's
8164,10-26,19:39,assume we firstly have a half a window size w okay half of a w okay
8165,10-26,19:45,uh w is the window size mattered in bytes one loss occurs okay
8166,10-26,19:52,we know we we will increase this until to w and then if we have loss we drop to
8167,10-26,19:58,half of w then we increase again to w then we drop to half of w it's like that
8168,10-26,20:04,okay of course this is just a very rough mirror okay it's not accurate
8169,10-26,20:11,then if we look at this figure we know okay so the average of a window size is
8170,10-26,20:18,back is actually this right the hourly average uh window size is
8171,10-26,20:25,about um three quarters of w okay that means the throughput the
8172,10-26,20:33,throughput for tcp is three quarter of w
8173,10-26,20:40,divided by rtt okay so that's why you can say it's actually three quarters or
8174,10-26,20:45,w over rtt okay that is how we calculate the throughput roughly or we estimate
8175,10-26,20:51,the throughput okay and if you want to do a more
8176,10-26,20:58,um accurate calculation there are actually some more
8177,10-26,21:03,um accurate formula for to use okay so for example if we have 105 1500 bytes
8178,10-26,21:11,segments um and rtt is 100 ms then if we want to
8179,10-26,21:17,reach a 10 giga bps throughput this requires 83
8180,10-26,21:24,333 in flat segments okay and we can also calculate the throughput
8181,10-26,21:32,in terms of a segment loss probability okay which means how many segments we
8182,10-26,21:37,can we can afford losing okay then if you use this formula to do the
8183,10-26,21:42,calculation then to achieve a 10 giga bps throughput we need a loss rate of l
8184,10-26,21:49,equal to 2 to 10 2 times 10 minus sorry 2 times 10 to uh
8185,10-26,21:57,negative 10. okay this is actually a very small loss rate okay a very very
8186,10-26,22:03,small loss rate that means if we want to reach a big a very good throughput we
8187,10-26,22:08,really need velocity to be very small okay
8188,10-26,22:14,um and because of this congestion control tcp has a very interesting feature called fairness tcp fairness so
8189,10-26,22:21,what does this mean this means if we have t k uh k tcp sessions
8190,10-26,22:30,sharing the simple connect link okay and the most important link has a
8191,10-26,22:37,bandwidth of r then each session should have the average rate of r divided by k
8192,10-26,22:45,okay so that means if we have two connections sharing a link then each connection will finally get uh
8193,10-26,22:54,half over if we have 3 then each connection will finally got a third of
8194,10-26,22:59,our of the bandwidth okay so you may think oh how can we achieve that how why do
8195,10-26,23:06,how do we know right so why we have tcp fair okay so now let's look at two
8196,10-26,23:14,competing sessions okay um the horizontal one is connection one
8197,10-26,23:19,throughput the the vertical one is the connection to throughput we have these
8198,10-26,23:25,two connections sharing a link which has the bandwidth of r
8199,10-26,23:32,okay we know we will do addictive increase and multiplicative decrease right so
8200,10-26,23:39,let's see how it how how does this work so at the very beginning you can see
8201,10-26,23:44,at this point
8202,10-26,23:51,at this point as you can see the value for connection one
8203,10-26,23:58,okay is much bigger than the value of connection two that means the throughput
8204,10-26,24:04,for connection one is much bigger than the throughput of connection two okay
8205,10-26,24:09,connection one is taking more of the bandwidth and gradually they will they
8206,10-26,24:14,will have similar bandwidth how why let's see let's see why okay so this is
8207,10-26,24:20,a at the very beginning and then they all increase so finally the increase to
8208,10-26,24:26,this point okay at this point connection one now
8209,10-26,24:31,has a throughput of this this bit okay
8210,10-26,24:39,and then connection to throughput is become this
8211,10-26,24:45,big okay you can see connection one is still bigger and then connection two right the
8212,10-26,24:51,throughput for connection one is still bigger than connection two but now let's see if the if at this
8213,10-26,24:59,point we have congestion okay then we will do much multiplicative
8214,10-26,25:04,decrease that means both of them need to be cut to half okay so if we cut half
8215,10-26,25:11,our connection why it's about this okay it's about this
8216,10-26,25:18,if we cut to half our connection two okay half of connection two is about about this this value
8217,10-26,25:29,okay or maybe below below this so it's
8218,10-26,25:35,roughly it's at this point so then that means now okay now the note
8219,10-26,25:41,the the and now the throughput they all come to here okay this point after that
8220,10-26,25:48,we will do increase again a digital increase again right so increase again
8221,10-26,25:53,okay so now they are increasing at the same time and 0.1 becomes becomes this
8222,10-26,26:01,this big okay and then throughput two
8223,10-26,26:09,thank you become this big
8224,10-26,26:15,okay at this point throughput one to become this big so let's see if we come
8225,10-26,26:22,to congestion again now we need to cut both to half again so then for
8226,10-26,26:29,connection one half is like this about
8227,10-26,26:35,i know it's getting messy but hopefully you are following me okay about this and
8228,10-26,26:41,then half of connection two is about this
8229,10-26,26:48,okay so now you can see then the node is come to is coming to uh
8230,10-26,26:54,this point okay so if you continue if you continue then this node is getting
8231,10-26,27:02,to um this dotted line closer and closer okay the starting line means the equal
8232,10-26,27:09,bandwidth share right the if the the node is on this line then
8233,10-26,27:15,that means the throughput for connection one two are basically the same okay basically
8234,10-26,27:22,the same so you can say it is getting closer and closer
8235,10-26,27:27,to sorry finally it will it will get very close to this uh uh to this line
8236,10-26,27:36,okay so that's why we say uh finally these
8237,10-26,27:41,two connections connection one two they will share the bandwidth okay they will
8238,10-26,27:49,share the menu with this is called the tcp fairness okay
8239,10-26,27:55,um so usually usually the multimedia apps
8240,10-26,28:02,do not use tcp okay why because we know the multimedia
8241,10-26,28:09,um apps um they want to use the reads or the
8242,10-26,28:15,bandwidth as much as possible they don't want to be controlled okay so but tcp
8243,10-26,28:20,has the congestion control that's something not good for them okay so they don't want the read throughout to buy
8244,10-26,28:26,the congestion control um so
8245,10-26,28:33,um for udp we know udp may know they can tolerate the packet loss those apps like radio
8246,10-26,28:40,audience they can tolerate the packet loss they uh they want the data to be
8247,10-26,28:46,sent out as fast as possible okay um and also the fairness actually can be
8248,10-26,28:52,leverage by some applications if some applications they want to occupy
8249,10-26,28:57,or they want to have more uh bandwidth okay what they can do is they can open
8250,10-26,29:04,multiple parallel connections between two hosts okay then in this case uh
8251,10-26,29:11,because of the tcp fairness that each session or each connection will get a
8252,10-26,29:18,share of the bandwidth okay if this application owns a number of connections
8253,10-26,29:24,then this application can get more bandwidth okay so basically the web
8254,10-26,29:29,browser do this the web browser for example it may open multiple tabs okay
8255,10-26,29:36,to establish connections between two hosts okay let's say if we have a link
8256,10-26,29:42,root of r with nine existing connections okay then if a new app asks for only one
8257,10-26,29:51,tcp connection then now we have 10 connections right so each application
8258,10-26,29:57,can get each connection can get uh one tenth of r okay but if this new
8259,10-26,30:04,application is very greedy this may ask for 11 tcps
8260,10-26,30:09,okay for 11 tcps then basically this new application we all got so each
8261,10-26,30:16,connection firstly we know we'll get r divided by 9 plus 11. this is a
8262,10-26,30:22,uh the number of connections is 20 right so then for this for each share this new
8263,10-26,30:30,application will get 11 of them so this is about half hour
8264,10-26,30:35,you can see the difference right if the new application asks for only one tcp it can get only one tenth of r but if it
8265,10-26,30:43,asks for 11 tcps then it will get half hour okay so that's how the tcp fairness
8266,10-26,30:49,can be leveraged by applications to get more bandwidth okay then that's all for
8267,10-26,30:56,this chapter third
8268,10-28,0:01,all right so in this chapter we will this chapter is very important okay of
8269,10-28,0:09,the students who finish this class after some semester they came back to me
8270,10-28,0:14,again asking say hey professor uh i'm interviewing for a networking job do you
8271,10-28,0:23,have any idea what kind of questions they will ask or what is the most important part for
8272,10-28,0:30,networking okay um usually i i would just say okay
8273,10-28,0:35,networking is very important okay so tcpi tcpip transport layer
8274,10-28,0:42,um and network layer obviously are the most important two layers in networking
8275,10-28,0:48,so be prepared for those kind of uh questions if you want to get such a
8276,10-28,0:54,position so in this chapter let me firstly give you an overview we will
8277,10-28,1:00,introduce the network layer in 4.01 and we will discuss the workshop circuit and
8278,10-28,1:07,the datagram network now you don't know what they are but uh let me see datagram
8279,10-28,1:12,networks means what we are using right now that the internet okay virtual
8280,10-28,1:17,circuit was an old design okay but i will show you the difference between them and then we will look at the router
8281,10-28,1:24,and see what is inside the router what is the structure for the router or the architecture for the router okay
8282,10-28,1:30,uh after that we will talk about the internet protocol ip protocol is very
8283,10-28,1:37,important you really want to know uh the format for the datagram the how the ipv4
8284,10-28,1:43,addressing is used um and why we use ipv6 right now
8285,10-28,1:49,um so all those kind of things and then um 4.5 is also very important the
8286,10-28,1:57,routing algorithm very very important okay so we will mainly focus on a link
8287,10-28,2:04,state algorithm we've also discussed the distance vector but uh the decimal
8288,10-28,2:10,factor i will only give you high level uh test questions i will not ask for you
8289,10-28,2:15,to like um run the exam or do calculations on the test paper okay no
8290,10-28,2:22,um but next date i may give you task questions okay in deep uh hierarchical ranking we will discuss
8291,10-28,2:29,that also and then after that we will discuss the gravity in real internet
8292,10-28,2:35,what kind of routing protocol do we use in internet okay
8293,10-28,2:40,um so for uh broadcast routing we may
8294,10-28,2:48,yeah we will discuss a little bit about the spanning tree etc okay so that is uh
8295,10-28,2:55,all what we will have in this chapter all right so let's look at firstly the
8296,10-28,3:00,network layer okay when i talk about this layer i need
8297,10-28,3:05,to help you review what has happened in the previous layer okay so
8298,10-28,3:13,i have draw this figure again again they have application layer
8299,10-28,3:19,transport layer
8300,10-28,3:25,network layer link layer and physically okay so for
8301,10-28,3:32,application layer we know we will have a big message foreign
8302,10-28,3:42,for this message we know when it comes down to the transporter layer usually we need to break it up to smaller segments
8303,10-28,3:50,okay smaller pieces
8304,10-28,3:56,okay and then we add header to that
8305,10-28,4:03,for those headers we know they are transported layer headers if you cannot remember you can review the slides
8306,10-28,4:11,so basically in transport layer headers we have the source port number and
8307,10-28,4:17,destination port number do we have it address in transport layer header
8308,10-28,4:22,we do not okay we do not have ip address in transportally header it's only about
8309,10-28,4:29,um if you remember udp it's actually a very very short
8310,10-28,4:35,header okay version header it has only like the support that's new port the
8311,10-28,4:40,checksum etc okay then when this segment comes down to a
8312,10-28,4:46,lower layer okay this is called segment
8313,10-28,4:53,okay when it comes down to lower layer you know we already have the transport
8314,10-28,4:59,layer header now we need to add another header which is network layer header okay the network clear header will
8315,10-28,5:06,contain the source id address and destination ip address okay so this is
8316,10-28,5:11,the process basically the transport segment
8317,10-28,5:18,uh the network layer will transport will transport the segment from the sending
8318,10-28,5:24,to the receiving host okay so then on the sending side at the center side what
8319,10-28,5:30,we will do is we will need to encapsulate the segments into something called datagrams
8320,10-28,5:43,you can see at the application layer record a message transport layer recorded segment then at the network
8321,10-28,5:51,layer we call it a datagram okay then on the receiving side when the
8322,10-28,5:56,receiver receives this datagram it will remove the network layer header and
8323,10-28,6:03,deliver the segment to the upper layer which is the transport layer okay the
8324,10-28,6:08,network layer protocol is in every host and every router okay the router
8325,10-28,6:15,examines the header fields in all ip datagrams passing through it okay so
8326,10-28,6:20,let's see you can see the application layer in transport layer only exists in the end
8327,10-28,6:28,hose okay but the network layer exists in all
8328,10-28,6:33,the hosts and all the routers okay all the routers so this is what will happen
8329,10-28,6:39,comes in comes down up down up down down until
8330,10-28,6:46,finally it reaches at the destination okay then this is a uh sent to the upper
8331,10-28,6:53,layer okay delivered to the transport layer and then the application here at the receiver side and we mentioned the
8332,10-28,7:01,two functionalities 2k functionalities are actually forwarding and routing okay so for
8333,10-28,7:09,wording means we move the package from the router's input to the appropriate router's output and then the routing
8334,10-28,7:17,basically means determining the route taken by the package from source to destination okay so there is analogy on
8335,10-28,7:24,the right the routine is like the process of planning the trip from source
8336,10-28,7:30,to definition okay so for example i would say oh one day i want to travel to
8337,10-28,7:35,new york i'm thinking uh should i trans
8338,10-28,7:41,should i go through chicago or should i go through uh la okay so those are those
8339,10-28,7:49,are different rounds okay when i do the planning i may choose a different route
8340,10-28,7:55,so that is the wrong team part the forewarning is like the process of getting through single interchange okay
8341,10-28,8:03,so for example if i finally decided to go through chicago then at the chicago
8342,10-28,8:08,airport as i said okay uh i need to
8343,10-28,8:14,um come down from the airplane and then go to the correct gate
8344,10-28,8:21,to step onto the plane to new york again okay so basically i was forwarding from
8345,10-28,8:30,one gate to another gate okay so that is the forwarding part it's different okay
8346,10-28,8:38,um i think we also explained this figure before but i would like to give you a quick review
8347,10-28,8:45,so here you can see there there is a network okay in this network we have a number of
8348,10-28,8:52,routers and in each router in each router it has
8349,10-28,8:57,two things it will need to firstly run a routing algorithm okay and then generate
8350,10-28,9:05,something called the local forwarding table this local forwarding table will help
8351,10-28,9:10,decide how to forward a packet okay you
8352,10-28,9:15,can see each router every router they all need to run their own
8353,10-28,9:21,routing algorithm and then generate their own local phone table okay so for
8354,10-28,9:27,example for this router for this router if we have a local phone table like this
8355,10-28,9:33,and we have the header value of these ones okay then now if we have a
8356,10-28,9:41,packet coming which has a higher value of zero one one then we immediately know okay we want to forward these two
8357,10-28,9:48,outputs link two okay so this is how the local foreign table works okay later we
8358,10-28,9:55,will learn more about that but for now you only need to know um the basics
8359,10-28,10:02,so the routing algorithm determines the end-to-end path through the network and the forwarding table determine the local
8360,10-28,10:08,forwarding and this router and later when we talk about the routine algorithm
8361,10-28,10:14,i will show you step by step how to generate the local
8362,10-28,10:19,phone table by running the routing algorithm okay
8363,10-28,10:25,so before we continue to talk about the um
8364,10-28,10:31,the routine etc last firstly step back and talk about
8365,10-28,10:38,um the different types of networks okay so one way to do the network layer you
8366,10-28,10:45,if you think about the transport layer we have two main functions or two mean protocols tcp and udp so we know tcp
8367,10-28,10:54,requires connection setup eodp doesn't require the connection setup so and also
8368,10-28,11:01,tcp is reliable udp is not reliable right um
8369,10-28,11:06,so then for network there are actually also two types of network one type need
8370,10-28,11:12,the connection setup okay like the uh um like some network architecture like
8371,10-28,11:19,atm okay um for those type of network before the
8372,10-28,11:24,datagram flow the two and halls need to firstly establish a virtual connection
8373,10-28,11:31,okay the routers will also get involved in this virtual connection okay so this
8374,10-28,11:37,is connection oriented another type is connectionless okay it's connection is
8375,10-28,11:44,um actually our internet interesting our internet is actually connectionless
8376,10-28,11:50,okay we do not really establish any connection between two hearts before the
8377,10-28,11:56,datagrams floats okay but this kind of connection setup indeed exists in some
8378,10-28,12:01,of the network architectures okay it's not very common though
8379,10-28,12:09,um and then let's look at the network service model uh if you use recall what
8380,10-28,12:15,we have learned in the transport layer uh we know there are some services we
8381,10-28,12:21,expect from the transport leader like uh reliability okay time
8382,10-28,12:28,uh minimal bandwidth guarantee right so those kind of things security so those
8383,10-28,12:33,are the service we expect from the transport layer but we may not have it
8384,10-28,12:39,okay similarly there are some services we expect from the network layer
8385,10-28,12:45,okay for example if we are delivering only one individual datagram
8386,10-28,12:51,then some of the example uh services are guaranteed delivery okay that is the
8387,10-28,12:58,service we expect from the network layer or guarantee delivery with less than 40
8388,10-28,13:04,m second delay okay that is the expectation of some example services we may not have it we
8389,10-28,13:13,may not have it in the real network but those are services we expect okay if we are
8390,10-28,13:20,delivering a flow of datagrams okay then some of the example services are in
8391,10-28,13:28,order delivery okay if you are sending out abcd you don't want to get a busy
8392,10-28,13:33,ada okay um and also we may want to guarantee the
8393,10-28,13:39,minimum bandwidth to flow okay we may also want to restrict the
8394,10-28,13:45,changes in inter-packet spacing okay so again those are the services that we we
8395,10-28,13:51,may want from the network layer but we may not be able to have it them in the
8396,10-28,13:56,network layer okay so now let's look at um
8397,10-28,14:01,the service models that we we may have in the uh network architectures okay so for
8398,10-28,14:11,internet for internet the service model is best effort service okay
8399,10-28,14:19,do we have guarantees on bandwidth no guarantees and loss no guarantee that
8400,10-28,14:24,order no no guarantees on timing no okay uh and we also we do not have congestion
8401,10-28,14:31,feedback okay the feedback is actually inferred why are the loss the timeout
8402,10-28,14:38,delay etc okay uh so this is for internal for other
8403,10-28,14:44,network architectures like atm cvr or vbr okay
8404,10-28,14:50,um constant bit rate or variable bit rate those are the um not very commonly used architecture
8405,10-28,14:57,or these are the previously used architecture okay for
8406,10-28,15:02,those ones some of them guarantee the bandwidth some of them guarantee the loss or the no loss okay or order or
8407,10-28,15:10,timing um some of that them do not guarantee okay but any any of those ones are not
8408,10-28,15:18,our focus our focus is the internet although internet provides no guarantee
8409,10-28,15:24,but it works very well okay then let's let's look at the virtual circuit so
8410,10-28,15:29,virtual circuit is basically a connection oriented network service okay
8411,10-28,15:35,so it's different from the datagram network datagram network is basically a
8412,10-28,15:41,connection okay i think i mentioned this before uh similar to tcp and udp the tcp we know
8413,10-28,15:48,we have to establish a connection before um data exchange but for udp we do not
8414,10-28,15:54,need a connection established right um and interestingly that in networking
8415,10-28,15:59,workshop circuit is actually corresponding to um tcp similar to tcp because it
8416,10-28,16:05,requires the connection service okay and the datagram network is similar to udp
8417,10-28,16:12,because it doesn't require any connection to be established okay
8418,10-28,16:17,um again as i said in the current internet what we are using actually is
8419,10-28,16:22,the datagram network okay so firstly let's see what is a virtual
8420,10-28,16:28,circuit um so water circuit behaves like a telephony network okay so we have a
8421,10-28,16:36,source two definition path reserved for uh for the connection okay uh we need to
8422,10-28,16:43,do a setup for each core before the data can flow okay and then each packet
8423,10-28,16:49,carries some identifier because we call it vc identifier virtual circuit
8424,10-28,16:54,identifier okay the packet does not carry any destination host address no
8425,10-28,17:01,host address just visit identifying okay then on every router on the source to
8426,10-28,17:07,destination path maintains a state for each passing connection okay and then
8427,10-28,17:13,based on um the vc identifier and also uh the
8428,10-28,17:19,link that this packet comes in then the router needs to make a decision on how
8429,10-28,17:24,to forward this packet okay so basically vc consists of a third
8430,10-28,17:31,person a path from source to destination we see numbers okay uh this is the
8431,10-28,17:38,number for each link along the path okay and also the entries in the forwarding
8432,10-28,17:45,tables in the router along the path okay so let's look at example and then you will understand uh what did this mean
8433,10-28,17:51,okay um firstly you can see we have a source so we have destination and we have a
8434,10-28,17:58,router the router has three interfaces one two three okay and now if we
8435,10-28,18:05,um uh also you need to know for each round here the router maintains uh
8436,10-28,18:11,forwarding table okay this is a forwarding table is not the same as the forwarding table uh in
8437,10-28,18:18,this program network actually before we learned for datagram network we only need to look at the ip address the
8438,10-28,18:25,destination ip address for the packet and then we know how to do the forwarding right but in in this case in
8439,10-28,18:32,this vc virtual circuit network the router the router's phone table is
8440,10-28,18:39,more complex than the datagram network so you
8441,10-28,18:44,can see um it contains the incoming interface in coming vc number and then we will have
8442,10-28,18:51,outgoing interface and outgoing vc number okay so then for example when you have a
8443,10-28,18:57,packet comes in packet comes in with from interface one okay and the incoming basic number is
8444,10-28,19:06,12. then the router need to determine the outgoing interface it is through and the
8445,10-28,19:12,outgoing basic number is 22 so it's like that um sometimes the packets may come from
8446,10-28,19:19,the same interface but they have different basic numbers and then they may be forwarded to different interfaces
8447,10-28,19:26,with different wasting numbers okay so it's like this so this will not appear on the test so
8448,10-28,19:33,you don't need to remember this table how this work the reason i want to introduce washer circuit is is i just
8449,10-28,19:40,want to tell you there are actually different types of network layers okay
8450,10-28,19:46,um different protocols but the one type we are using is the datagram network
8451,10-28,19:52,okay um as you can see before we see circuits
8452,10-28,19:58,if we want to do data um the transmission etc we need to firstly
8453,10-28,20:04,establish a call okay initially initial call and then this one accepts the core
8454,10-28,20:11,and then uh the this flow begins okay this is the process but if this is a
8455,10-28,20:16,datagram network we do not need to do any call setup okay uh the routers
8456,10-28,20:23,maintain no state about the end-to-end connections okay the routers simply need
8457,10-28,20:29,to forward uh the package so you can see what has happened is uh the sender will
8458,10-28,20:36,send the diagrams and the receiver will receive the datagrams so if we compare the virtual circuits
8459,10-28,20:43,networks and datagram networks datagram networks um is more preferred
8460,10-28,20:49,um one major reason is because this actually makes the router very simple
8461,10-28,20:58,okay the router only need to do the forwarding we do not have a lot of our workload put on to the router but for
8462,10-28,21:05,the vc network the router has to maintain in some states okay so it is it
8463,10-28,21:12,has more workload okay so now let's look at the diagram
8464,10-28,21:17,forwarding table for this forwarding table um it is very simple as we mentioned before
8465,10-28,21:24,each router needs to run the routing algorithm to generate such a local
8466,10-28,21:30,forward table and in the local format table on the left side we have the destination address on the right side we
8467,10-28,21:37,have the output link so basically we only need to check the destination address and then determine the output
8468,10-28,21:43,link okay so it's like uh if you if we if for example for post office
8469,10-28,21:50,post office will need to look to look at the address of the ledger and then determine where to forward
8470,10-28,21:57,okay so for example if we have a sacramental post office chicago post office uh new york post office la post
8471,10-28,22:05,office okay then we basically uh look at the latter if this letter is is going to
8472,10-28,22:12,new york okay then we know the destination address is uh is new york
8473,10-28,22:18,some city okay and then we can determine oh the up link
8474,10-28,22:23,should be should be uh this one okay should be for the link from uh
8475,10-28,22:29,sacramento to chicago okay so it's it's like that
8476,10-28,22:34,um so you may ask why is a address range
8477,10-28,22:41,it's not an individual address so here it listed the reason we have about 4
8478,10-28,22:48,billion ip addresses because we know ip address is 32-bit right so basically we
8479,10-28,22:55,have if this is ipv4 then we have 2 to 32
8480,10-28,23:01,um ip addresses okay for this many ip addresses it would be really hard to
8481,10-28,23:07,list all individual destination addresses okay it also requires the
8482,10-28,23:13,router to have a very large memory okay so it's not visible that's why instead
8483,10-28,23:20,of doing um the individual addresses we actually use our address range okay it's like uh
8484,10-28,23:29,in again in post office in post service what we will see is not for this specific address is actually for uh for
8485,10-28,23:37,example the entire new york state we have we need to for all the letters going to the new york state we need to
8486,10-28,23:43,forward it to uh this link okay so it's like that
8487,10-28,23:50,um so in reality what you will see the forward table is looks like this okay so
8488,10-28,23:57,firstly you can say uh this is a 32-bit okay each
8489,10-28,24:03,part is eight bits okay so we have four eight bits so in total
8490,10-28,24:10,is 32 bits this is the ip address okay we can say oh if the address falls into
8491,10-28,24:16,this range okay between this ip and this ip then we can forward it to link one link
8492,10-28,24:24,zero okay so you if you look at this ip address you can say the first 20 bits
8493,10-28,24:30,are all the same and then the remaining ones are different
8494,10-28,24:36,okay so the mini ones are different um and then we only need to check uh
8495,10-28,24:42,each individual address and see which category or which range does this uh address four into them to determine uh
8496,10-28,24:50,the link interface okay opening um but there is a question the question is
8497,10-28,24:57,what happens if the range or the ranges do not divide up so nicely so here in
8498,10-28,25:04,this example we know the first 20 b's are exactly the same
8499,10-28,25:10,and the remaining ones are not the same okay so then we only need to focus on
8500,10-28,25:16,the remaining uh travel bits but what if sometimes we have the first 20 bits the
8501,10-28,25:23,same sometimes we have the first 16 bits the same okay it's like in post service sometimes we say oh all the
8502,10-28,25:31,um all the letters go to new york state has to be forwarded to zero
8503,10-28,25:38,okay then we in this case we are using states to define the range but sometimes we say
8504,10-28,25:45,all the letters going to um san francisco
8505,10-28,25:50,needs to be forwarded to one and in this case we know san francisco is not a state it's actually a city
8506,10-28,25:57,okay um so we may say similar things in our working okay then in this case how what
8507,10-28,26:04,can we do okay uh in this case what we will do is we
8508,10-28,26:09,follow a principle of longest prefix matching okay lucky prefix matching
8509,10-28,26:16,means when looking for forwarding table entry for given destination address we
8510,10-28,26:22,use the longest address prefix that matches the destination address
8511,10-28,26:27,okay so it's like again in postal service if we say
8512,10-28,26:34,um if we see all the letters going to california should be forwarded to zero all the
8513,10-28,26:42,letters go into sacramental should be 40 to 1. okay if we have a letter going to
8514,10-28,26:49,for example 16000 j street
8515,10-28,26:55,sacramento which link should we forward to should
8516,10-28,27:00,we fold this to 0 or 1 so actually this will be forwarded to
8517,10-28,27:06,one why because
8518,10-28,27:12,um sacramento come you if you compare california and sacramento apparently
8519,10-28,27:18,sacramento is a more accurate um address right more accurate so we can
8520,10-28,27:24,here we can see california sacramento so this one is more accurate
8521,10-28,27:31,okay so that's why if we have a letter going to if you have a letter going to
8522,10-28,27:38,um 6000 j street sacramento we will forward this letter to one instead of
8523,10-28,27:45,zero okay uh so this is called the longest prefix matching we will match california
8524,10-28,27:52,first okay if we match california it can be 40 to zero or one but then we continue to
8525,10-28,27:58,match and then now we we can match sacramental then it will be forwarded to one
8526,10-28,28:04,okay so this is something you need to keep in your mind uh if we look at an example
8527,10-28,28:09,here in the table so for example it says okay
8528,10-28,28:15,uh for the ad for the address range of this okay you can see the first
8529,10-28,28:22,um 16 21 first 21 bits are the same and
8530,10-28,28:27,for the remaining these are wild cards okay so you can for this piece it can be
8531,10-28,28:33,zeros or ones it doesn't really matter as long as it matched this one the move forward is to zero
8532,10-28,28:40,but if it matches this one okay the first this this many
8533,10-28,28:46,beasts are all match and then this piece can be arbitrary it can be zero or ones
8534,10-28,28:53,we don't care uh then it will be set to one okay similar things for the
8535,10-28,28:58,remaining uh ones okay uh now let's look at an example this example
8536,10-28,29:05,for this one can you take a look at the base and determine which interface
8537,10-28,29:13,should move forward to these beads are all the same okay these beads are all the same and these beads
8538,10-28,29:20,are also the same so you only need to compare these remaining ones
8539,10-28,29:27,okay so zero zero zero one zero zero
8540,10-28,29:33,zero one zero one one zero zero it's definitely
8541,10-28,29:38,match this one it doesn't match this one
8542,10-28,29:44,okay it doesn't match this one
8543,10-28,29:50,so which interface do we forward the first packet
8544,10-28,29:57,first one is zero okay so we need to forward this to zero
8545,10-28,30:02,because it matches zero right uh how about the second one the second one can
8546,10-28,30:08,you check again for the second one we have zero zero zero one
8547,10-28,30:13,okay it matches zero zero zero one and then one zero zero zero
8548,10-28,30:20,it doesn't match this part doesn't match zero but it matches this
8549,10-28,30:26,one zero zero zero and it also matches number two actually one zero zero zero
8550,10-28,30:35,okay it matches both link interface one and two
8551,10-28,30:41,so which interface should be for the second
8552,10-28,30:46,packet it matches both this one and this one
8553,10-28,30:54,which one will you choose so the interface we need to choose is actually one okay
8554,10-28,31:01,um the reason is because the longest prefix matching okay if we if and one
8555,10-28,31:08,address matches two ranges both two ranges okay then we
8556,10-28,31:13,will choose the one um matches better match is longer okay and keep this in mind we will use this
8557,10-28,31:21,later uh when we discuss the sub networks okay so very important
8558,10-28,31:28,so if we compare the datagram network and the virtual circuit network
8559,10-28,31:35,so uh the internet for internet data exchange among computers okay it is
8560,10-28,31:40,providing the elastic service we do not have any requirements on timing okay
8561,10-28,31:47,there are many different link types like different characteristics um
8562,10-28,31:52,it's a very uh it's very hard to have a uniform service okay and also uh for the
8563,10-28,32:00,most important thing for datagram network and vc network is for different network we have smart and systems okay
8564,10-28,32:07,but the internal the the routers are dumb okay
8565,10-28,32:13,they do not need to be very complicated or very complex okay so simple inside
8566,10-28,32:19,but complex at the edge uh vc circuit is uh different okay for basic circuits uh
8567,10-28,32:28,it's like a human conversation we know we may have strict timing for example
8568,10-28,32:33,one two-party talk both of the two parties need to be online okay this is
8569,10-28,32:41,of course this can guarantee the service okay
8570,10-28,32:46,uh but again the most important thing is um for water circuit network okay the
8571,10-28,32:54,end systems are done they don't need to be very smart they can just be like telephones okay but the
8572,10-28,33:02,routers are very complex the inside of the network is very complex
8573,10-28,33:09,the next thing we want to discuss is what is inside a router okay for the router we want to look at
8574,10-28,33:17,the architecture uh basically we use the launcher every day basically the router has two main
8575,10-28,33:24,functions we have to ask you this question again again the two functions one is routing another one is forwarding
8576,10-28,33:31,okay so these two functions actually are implemented by different
8577,10-28,33:38,um components in the router for example we need to have a routine processor to
8578,10-28,33:44,run the login and then we need to have a switching fabric to do the forwarding
8579,10-28,33:50,okay so the switching fabric is for forwarding the package from the input
8580,10-28,33:56,pause to the outputs okay if we look at the input parts so here we
8581,10-28,34:04,we basically take one of this and we zoom in to look at uh the inside of the
8582,10-28,34:11,input parts okay and this is the this is the launcher we have the switching fabric and now uh you can look at the
8583,10-28,34:19,import for the input
8584,10-31,0:00,next thing we want to discuss is what is inside a router okay for the router we want to look at
8585,10-31,0:08,the architecture basically we use the launcher every day basically the router has two main
8586,10-31,0:14,functions we have to ask you this question again so these two functions actually are implemented by different
8587,10-31,0:23,components in the router for example we need to have a routine processor to run
8588,10-31,0:29,the login and then we need to have a switching fabric to do the forwarding
8589,10-31,0:35,okay so the switching fabric is for forwarding the package from the input
8590,10-31,0:42,post to the outputs okay if we look at the input parts so here we
8591,10-31,0:49,we basically take one of this and we zoom in to look at uh the inside of the
8592,10-31,0:56,input parts okay and this is the this is the launcher we have the switching fabric and now uh you can look at the
8593,10-31,1:04,import for the input port firstly this one is the line termination this is the
8594,10-31,1:11,physical layer okay in this layer um we will receive the beat level we
8595,10-31,1:18,will receive the basically the binary the base okay and then uh we will come
8596,10-31,1:25,to the link layer protocol so basically for example we have ethernet implemented
8597,10-31,1:31,in this layer and then um we will come to
8598,10-31,1:37,um the network layer okay in this layer we will do uh the forward table lookup
8599,10-31,1:43,for example we will say oh for this destination address it should be forwarded to a certain output link okay
8600,10-31,1:51,and we will also do queuing here do you remember the qe we said in the router the input port the
8601,10-31,1:58,router may have some buffers to carry the packets right so if the buffer is
8602,10-31,2:03,full we may have a package drop right so this this is the one of the buffers okay
8603,10-31,2:11,so basically um those packets will be cured here
8604,10-31,2:17,um and then this package will be sent to the switching fabric for forwarding okay
8605,10-31,2:24,so there are many different types of switching fabric for example memory type
8606,10-31,2:32,bus type and crossbar type okay so the first switching fabric basically will
8607,10-31,2:38,transfer the package from input buffer to appropriate output buffer
8608,10-31,2:44,um and there is a read to measure the speed of the switching fabric it's
8609,10-31,2:49,called switching ridge so this is the rich at which packets can be transferred from the inputs to the
8610,10-31,2:56,output okay so this is often mirrored as multiple of
8611,10-31,3:03,input output line rate so for example each one has a line rate and then if we
8612,10-31,3:09,have three that's three times this okay so it's measured in that way um
8613,10-31,3:15,ideally ideally we hope the switching rich is the number of inputs times the
8614,10-31,3:23,line rate okay so for the three types of switching fabric let's look at each one the first
8615,10-31,3:29,type is called memory type okay and memory type you can see it goes through
8616,10-31,3:35,a memory okay so generally this is the input port
8617,10-31,3:41,okay the input port then a packet needs to be forwarded to
8618,10-31,3:46,the memory first okay and then the memory will deal with
8619,10-31,3:53,that we'll do some calculations or forward uh lookup and then forward it to
8620,10-31,3:58,the output port okay um this is actually
8621,10-31,4:04,um this is a this type of router is very limited in terms of speed
8622,10-31,4:10,okay the reason is because the speed is limited by the memory bandwidth because
8623,10-31,4:16,as you can see it has to go into the memory and then come out the memory okay
8624,10-31,4:21,so that's why the memory is bandwidth is very important to this type of roger uh
8625,10-31,4:28,this kind is called first generation routers it's usually very slow okay
8626,10-31,4:35,so the second type of routers uh using a bus as the switching fabric
8627,10-31,4:42,um bus basically means um the data will come out from one port and
8628,10-31,4:52,go through the bus to the output directly okay but there is a problem because if
8629,10-31,5:01,in memory we can still for example hold multiple packets in the memory and then
8630,10-31,5:06,send it out okay but in bus you can see there is no memory kind of thing to or
8631,10-31,5:13,buffer kind of thing to hold those packets okay so then plus is uh is used
8632,10-31,5:19,to directly connect the input port to the output then the problem is we may have best
8633,10-31,5:26,contention okay bus contention basically means um for example if two even input parts
8634,10-31,5:34,they both among two forward package to some outpost okay then they have to
8635,10-31,5:40,compete for this band for this bus okay um so then in this case the switching fab
8636,10-31,5:48,switching speed is actually limited by the bus benefits okay
8637,10-31,5:54,uh this is my second type um then gradually people began to design
8638,10-31,6:00,people began to think oh if one bus is a me generate the bus contention problem
8639,10-31,6:07,how about we create a uh interconnected bus okay or we could create something
8640,10-31,6:14,called a crossbar okay as you can see in the figure here this is also called banging at work or
8641,10-31,6:21,crossbar or some or sometimes we call them international interconnection nets
8642,10-31,6:28,okay so then basically in this case okay in this case we have input pause output
8643,10-31,6:35,pause okay but they are connected in this uh interconnected way okay then if
8644,10-31,6:42,we have a datagram okay so that if we have for
8645,10-31,6:47,datagram from multiple parts from multiple parts okay so then they
8646,10-31,6:53,can or they can be forwarded to the output without interving each other
8647,10-31,6:58,okay because there are multiple routes to choose from okay and even more
8648,10-31,7:04,interesting or more advanced design is that if we have one big datagram okay in
8649,10-31,7:11,order to make the speed faster we can actually break this uh uh big datagram
8650,10-31,7:18,into smaller pieces we call this as fragmentation or fragmenting okay and
8651,10-31,7:24,then um send those smaller pieces in parallel to
8652,10-31,7:29,the outputs okay and this can make the speed even faster that is the most advanced version okay
8653,10-31,7:38,uh and then now let's look let's look at the um outpost
8654,10-31,7:44,so for option parts um you can see it is actually the
8655,10-31,7:49,opposite uh this this is the three boxes are ordered in opposite uh order as the
8656,10-31,7:56,input policy input port we know we have the green box which is physical here and
8657,10-31,8:02,then we have the link layer then we have the uh network layer okay this is the input
8658,10-31,8:10,parts then we go to switching fabric then for the outer parts you can see its firstly
8659,10-31,8:16,firstly data comes from the network layer and here we also have a buffer
8660,10-31,8:22,okay and then we have a link layer okay
8661,10-31,8:27,then it becomes zeros and ones to be sent out so this is the output okay
8662,10-31,8:35,um the buffering is also required within datagrams arrived from the fabric faster
8663,10-31,8:41,than the transmission rate we know it takes time to push the data out
8664,10-31,8:46,okay um then if the incoming speed is very fast then we have to buffer the data
8665,10-31,8:52,here in the output port buffer okay
8666,10-31,8:57,so and very interestingly here we need to have some kind of scheduling
8667,10-31,9:04,um to choose among the cute diagrams for transmission okay because there are so
8668,10-31,9:10,many um this grants killed here which one should we send out first
8669,10-31,9:18,okay so there are different ways for the scheduling we will look at that uh later
8670,10-31,9:24,okay so first let's look at the output port queuing okay so you can say uh this
8671,10-31,9:32,is the structure of the entire round term and this is the switching fabric the left part are the um the input post
8672,10-31,9:40,right right part of the output because okay
8673,10-31,9:45,um so you can see when these two arrives they all want to be forwarded to the to
8674,10-31,9:52,this one and as you can see um as you can see this one can be forwarded
8675,10-31,10:00,to here okay and this blue one can be forwarded
8676,10-31,10:05,to here okay then we this one
8677,10-31,10:11,will need to be forwarded to here okay then these ones are all cute here
8678,10-31,10:18,so that later we can see this one and the red one will also be put into the
8679,10-31,10:25,input parts waiting to be forwarded to the output box okay so this is a
8680,10-31,10:32,um you can see the queuing okay those are cute here
8681,10-31,10:38,um so you may ask how much buffer do we need for the output
8682,10-31,10:43,okay so the rule rule of thumb is that the average buffer is equal to the
8683,10-31,10:51,typical rtt times the link capacity okay this is uh roughly how you can
8684,10-31,10:58,calculate the size of the buffer for example if you have a
8685,10-31,11:04,10 giga bps link okay and we know the rtt is 250 m second
8686,10-31,11:12,in this case we assume it's 250 m seconds then the buffer size need to be
8687,10-31,11:19,2.5 gigabits okay so that is the buffer uh
8688,10-31,11:26,of course if you want to do a more accurate calculation the recent
8689,10-31,11:32,recommendation is if we have nfl then the buffer should be equal to this one okay this is a
8690,10-31,11:40,calculated this can be used to calculate the buffer okay so this is i think this
8691,10-31,11:46,is provided um like uh federal experience experiments
8692,10-31,11:53,okay and there are uh another another concept
8693,10-31,11:59,you need to know here is called the head of line blocking
8694,10-31,12:04,head of line blocking is like for example when you are driving okay when
8695,10-31,12:09,you are driving um if you just want to turn right okay
8696,10-31,12:15,but someone before you is trying to go straight
8697,10-31,12:20,okay and even if you can turn right but because the the the car before you is
8698,10-31,12:27,waiting for the green light so you cannot turn right you have to wait until the car before you left
8699,10-31,12:33,okay uh that's what it's called the head of line blocking it's the same thing for example here we have this one and this
8700,10-31,12:41,one they all want to be forwarded to this output okay
8701,10-31,12:46,then we know um let me know the priority is given to
8702,10-31,12:53,this one okay came into this red this one will have to wait okay this one doesn't need
8703,10-31,13:00,to wait the blue one can directly go to here okay uh because this red one is
8704,10-31,13:06,waiting to be sent to this output port then the green one is actually blocked
8705,10-31,13:12,there okay so this is the head of line blocking
8706,10-31,13:18,all right um so as we said because all those
8707,10-31,13:23,packets are buffered there in the queue in output
8708,10-31,13:29,like this okay so then we have to have some kind of a schedule scheduling
8709,10-31,13:35,algorithm to choose the next package to send on the link okay uh very simple way
8710,10-31,13:41,is we do first in first out first thing first out basically means the packets
8711,10-31,13:47,are running first will be sent out first okay it's very easy um so and we also need to think about
8712,10-31,13:55,the discard policy because sometimes the package may arrive at a four q then in
8713,10-31,14:00,this case who to discard okay there are three different ways
8714,10-31,14:05,about discarding so one way is okay we just do teardrop teardrop means we drop
8715,10-31,14:12,the a driving package the new coming one okay second type is called priority drop that
8716,10-31,14:18,means we can drop or remove uh based on the priority we can drop some low
8717,10-31,14:24,priority one for example even if this packet is already killed there but this is not very important then we can drop
8718,10-31,14:31,it and then um to to give some space to the new new
8719,10-31,14:37,coming packets okay and we can do also random job okay so
8720,10-31,14:43,those are three ways to discard a package um a second type of scheduling is called
8721,10-31,14:50,priority scheduling this means we always we kept two we kept two queues one is
8722,10-31,14:57,the high priority of q another one is the low priority queue so when pack is arrives we need to uh assign them to
8723,10-31,15:05,different cues based on them their priority and then we will always give
8724,10-31,15:10,priority to the high priority queue okay so for example um if we have one coming in okay this is
8725,10-31,15:18,high priority so we will do one first then we while we are working on one two
8726,10-31,15:23,and three comes in okay then in this case three will be put into the higher
8727,10-31,15:30,priority q2 is put into the low priority queue so we will do three next and then
8728,10-31,15:37,after three is down we do two okay if we have more pocket casts coming in let's
8729,10-31,15:43,say four arrives when they are working on two okay then of course we will work
8730,10-31,15:48,on four and when five lies then we work on five it's like that so we always give
8731,10-31,15:54,priority to the high priority queue okay
8732,10-31,16:00,but this actually creates a problem the problem is um is that we may have starvation for
8733,10-31,16:08,the low priority queue okay uh so for example if we always have some some
8734,10-31,16:15,packets in high priority queue then those packets will always be sent out first then the package in the low
8735,10-31,16:22,priority cube will never get the opportunity to be sent out okay so that
8736,10-31,16:27,is the problem for this kind of priority scheduling then how can we address that problem
8737,10-31,16:33,okay another kind of uh schedule is called
8738,10-31,16:39,the round robin scheduling one robin basically means we have multiple classes okay but we can
8739,10-31,16:45,cite cyclically scan all the class cues and at least give the opportunity to
8740,10-31,16:52,every class okay so we send one complete package from each class
8741,10-31,16:58,so for example um we here you can see we have one two
8742,10-31,17:04,three of rhymes okay we do one first then we give opportunity to the next class although we have both two and
8743,10-31,17:10,three but we have already works worked on the red class so that's why we will work on the green class
8744,10-31,17:17,then we do red class 2 okay because we have no green now then we will do four
8745,10-31,17:25,directly which is a red class okay so if i were arrives then i'm going to do five it's like that so in this case it's like
8746,10-31,17:31,taking turns for every class we take turns every time we just give opportunity to one of the package in uh
8747,10-31,17:39,one class okay in this case we do not have a starvation problem but the the
8748,10-31,17:44,thing is also we do not have any priority right we do not have priority
8749,10-31,17:50,to the red plus either so that is the problem then some of you
8750,10-31,17:57,may think how can we give or how can we give priority to the red glass to the
8751,10-31,18:05,high priority class but also give some opportunity a little bit opportunity to
8752,10-31,18:10,the low priority class how can we do that so this is a very interesting thing
8753,10-31,18:16,actually what we can do is called red weighted fair queuing okay or it's
8754,10-31,18:23,actually generalized around robbing so we can referral killing means
8755,10-31,18:29,we we still class them to different classes and if one class is more has more
8756,10-31,18:36,priority then we give it more weight okay if one class has a low priority
8757,10-31,18:43,then we give it last week in this way okay we can always
8758,10-31,18:48,give priority to the high priority queues but we also give opportunity to
8759,10-31,18:53,the low priority queues okay so this one is like uh we have w1 w2 w3 for each
8760,10-31,19:01,class okay and then if w1 is let's say uh 10 this is a five let's say it's two
8761,10-31,19:09,then this means every time we we send out 10 packets from the red class then
8762,10-31,19:14,we send we can do five packets at most for green class then do two packets and
8763,10-31,19:21,also for the blue class so that is the uh scheduling problem we will continue
8764,10-31,19:26,to discuss 4.4 the internet protocol okay internet protocol is a very
8765,10-31,19:32,important part uh in networking so i hope you pay attention to this part okay
8766,10-31,19:41,um personally let's look at the layers again we learned application layer
8767,10-31,19:46,transport layer network learning clear physical layer etc okay so what we are
8768,10-31,19:51,discussing now is actually the network layer so in network layer there are different protocols okay uh firstly we
8769,10-31,20:00,know ip protocol okay ip protocol basically uh deals with
8770,10-31,20:06,the addressing conventions the datagram format the packet handling conventions
8771,10-31,20:12,etc and then we also have the routine protocols the routing protocols are
8772,10-31,20:18,basically defining the routing algorithms right and not just the
8773,10-31,20:23,logarithm actually how we for example select a path okay how we combine
8774,10-31,20:29,different type of routing algorithms um when should we pay attention to the
8775,10-31,20:36,performance of the volcan algorithm where should we pay attention to the policy issues etc so those things are
8776,10-31,20:41,all defined in the routing protocols and then we also have the
8777,10-31,20:47,um forwarding table forward symbol is actually generated by running the working algorithm
8778,10-31,20:53,for icmp protocol this is uh mainly for
8779,10-31,20:58,error reporting and router signaling so it's more like control okay control about the
8780,10-31,21:05,um networking okay so let's firstly look at the ip data format
8781,10-31,21:12,um we have learned we have learned the different formats like how uh the application layer message right and then
8782,10-31,21:20,we learned the transport layer segment format okay do you remember if we are
8783,10-31,21:25,using tcp then um the header is about more than 20
8784,10-31,21:31,bytes okay the and then it has the payload so in the header we know it has
8785,10-31,21:36,the source port number destination port number okay so let's maybe quickly read
8786,10-31,21:42,this again we have several layers
8787,10-31,21:48,application layer transport layer network layer okay so at
8788,10-31,21:56,application here we have a message and then we know when it comes to transport layer we need to add the transport layer
8789,10-31,22:04,header into this message right to this message and in the transport layer header we know it has the
8790,10-31,22:11,port numbers okay source point number that's the import number and then when this comes to a layer below
8791,10-31,22:20,the network layer we need to have not so this is called a segment right
8792,10-31,22:27,this is a segment then when we add a header to the segment we need to add network layer header so then this
8793,10-31,22:34,segment now is called the data graph okay this is this thing at the network layer is called data graph and for this
8794,10-31,22:41,datagram okay for this tablegram basically
8795,10-31,22:48,um this is a header okay this is a actually this part
8796,10-31,22:53,okay and then the payload as you can see
8797,10-31,22:58,is this part okay so the payload is actually the tcp
8798,10-31,23:04,or udp segment pay attention to this okay it contains
8799,10-31,23:10,not only the message itself okay it also contains the header for the transport
8800,10-31,23:15,layer no matter is tcp or udp okay so uh that's the payload and then let's now
8801,10-31,23:22,look at the hydra part the network clear header what do we have okay firstly we have the warrior number which number
8802,10-31,23:29,here means ipv version 4 or version six uh later we will learn the difference
8803,10-31,23:34,between the two versions okay and then we have header lens
8804,10-31,23:39,header lens basically means the the number of bytes in the header okay so
8805,10-31,23:47,the number of bytes in the header may vary because of the option part okay sometimes we may have uh options
8806,10-31,23:55,sometimes we may not okay so that's why the header length may vary and then this is the type of service
8807,10-31,24:02,which means what type of data it is then this is uh um a time to leave time claim
8808,10-31,24:08,i think you are very familiar already right we said this is ttl
8809,10-31,24:14,okay time to link ttl and ttl is very important this means the maximum number
8810,10-31,24:20,of remaining hops if ttl equals to 2 this means the packet can travel at most
8811,10-31,24:27,two more steps two more hops okay one hop is a a router right so then this
8812,10-31,24:35,number will be decreed decreased at each router okay so
8813,10-31,24:42,decremented at each router so for example if ttl equal to 2 when it comes
8814,10-31,24:47,to a router then we will do -1 okay so here becomes one and then when it comes
8815,10-31,24:53,to another router we'll do here minus one again so one minus one equal to zero we know at this time we have to drop
8816,10-31,24:59,this packet okay and then um this field is the upper layer
8817,10-31,25:06,protocol arpelier protocol basically means um
8818,10-31,25:11,uh is this tcp or udp so what are our player protocol okay
8819,10-31,25:19,um and then this field is the length the total datagram length in bytes okay it's
8820,10-31,25:25,different from the header length because the header length is only about the header but this length is about the
8821,10-31,25:31,entire datagram after that we will say the 16-bit identifier the flags the and the
8822,10-31,25:39,fragment offset these three fields are used for fragmentation and resembling
8823,10-31,25:45,you don't need to understand it now later we will describe how we can use
8824,10-31,25:50,these three bits for a through field for fragmentation
8825,10-31,25:56,then you can see we also have um the header checksum okay and then we
8826,10-31,26:03,also have the source and decision ip addresses okay and for source and
8827,10-31,26:08,decision ip addresses now because we are using ipv4 with the source id and
8828,10-31,26:14,destination ip are all 32 bits they are both 32 bits okay and
8829,10-31,26:21,pay attention again as we said okay we will use the 32-bit source ip and
8830,10-31,26:28,destiny ip2 especially the destination ip to do the robot key okay to find out
8831,10-31,26:35,the host okay the host uh which package we should deliver which host we should
8832,10-31,26:40,deliver this package to okay so that is the function of ip address but uh if we want to find out a
8833,10-31,26:49,specific process in the host then we have to look at the transport layer
8834,10-31,26:55,header which is actually within the data okay which is actually within data
8835,10-31,27:01,so that is how it works um and then in the auction part we may
8836,10-31,27:06,have some more information like the timestamp um the record route taken and we may
8837,10-31,27:12,also uh we may also specify the list of routers to visit okay so one thing you
8838,10-31,27:19,need to know is we want to calculate how many bytes do we have in the header
8839,10-31,27:26,if you look at again each row is 32 bits
8840,10-31,27:31,each row is 32 bits okay 32 bits is four bytes right so eight uh b is probably so
8841,10-31,27:37,four bytes and then we have five rows four times five equals to uh 20 bytes
8842,10-31,27:43,right so it's 20 bytes of ip and you can see uh i didn't come to the
8843,10-31,27:49,option part of course you can count the option part right if we count options then we know it's a 20 plus 20 plus
8844,10-31,27:57,bytes for ip header for network layer header and we know for t if we are using
8845,10-31,28:03,tcp okay tcp has 20 bytes of a header okay so then in total you can see
8846,10-31,28:10,um the header overhead the header overhead is 20 plus 20 uh equal to 40
8847,10-31,28:16,bytes okay 40 bytes or even more than 40 bytes so that is uh the overhead any questions
8848,10-31,28:23,so far okay
8849,10-31,28:30,so the next thing i want to talk about is the ip fragmentation part
8850,10-31,28:35,um so why do we do fragmentation firstly
8851,10-31,28:40,the network links have mtu mtu is is the full name is called
8852,10-31,28:46,maximum transfer size which is the largest possible link level frame
8853,10-31,28:53,for different networks they have different network links they have different mtus
8854,10-31,28:59,so for example you can think about uh for fiber we may have one mtu4 wi-fi we
8855,10-31,29:07,may have different mtu so different links have different capacities and and
8856,10-31,29:12,the capabilities that's why they have different mtus
8857,10-31,29:17,um it's like it's like um when we drive on the road we may have a very wide road
8858,10-31,29:25,or very wide road that can accommodate maybe big cars trucks okay and we may
8859,10-31,29:33,also have very narrow roads that can only accommodate very small cars
8860,10-31,29:39,okay so it's like that similarly for network links they have
8861,10-31,29:44,different mtus then in this case we may have a very large iep datagram
8862,10-31,29:50,arriving at a link but this the size of this datagram already
8863,10-31,29:58,exceeds the maximum transfer size of this link in this case what can we do we
8864,10-31,30:05,have to divide the large ip datagram into smaller pieces for this we call it
8865,10-31,30:11,as fragmentation okay that means one datagram becomes several
8866,10-31,30:17,datagram several smaller datagram is like that we have one big datagram
8867,10-31,30:22,and we break it into several smaller pieces this is called fragmentation
8868,10-31,30:28,then these pieces may travel on their own finally when they arrive at the
8869,10-31,30:35,destination we need to do assembly with us reassemble sorry we need to do
8870,10-31,30:41,reassemble reassembling okay we need to reassemble those smaller pieces into one
8871,10-31,30:48,big this graph one largest ground okay so then you can see the ip headers
8872,10-31,30:55,are used to identify and order the related fragments
8873,10-31,31:01,and we learned before here we said these three fails the 16-bit
8874,10-31,31:07,identifier the flags and also the fragmentation fragment offset these
8875,10-31,31:13,third fails will be used for fragmentation now let's do let's see how we can do a
8876,10-31,31:20,fragmentation okay this is an example in this example we have a package the packet length is
8877,10-31,31:28,400. so now what you are looking at is actually a datagram
8878,10-31,31:35,okay this is the datagram the datagram has different fields do you remember lens right identifier
8879,10-31,31:44,flags offset so we also have this here length identifier flex offset
8880,10-31,31:53,okay so now we want to break or break this big datagram into smaller pieces
8881,10-31,32:01,let's assume the original originally this package has a length of four
8882,10-31,32:06,thousand but mtu the maximum transfer size is
8883,10-31,32:12,only 15 00 bytes okay so that means
8884,10-31,32:25,this is a 4 000 byte packet okay and now we know pay attention
8885,10-31,32:34,pay special attention women need to break this okay that means we need to
8886,10-31,32:40,break this 4 000 package into 1500 pieces okay but there is one thing you need to
8887,10-31,32:47,pay attention the first 20 bytes
8888,10-31,32:54,are for the header do we need to break the header when we break the big datagram into smaller
8889,10-31,33:01,datagrams we do not break the header okay it's like for example when you when you drive
8890,10-31,33:08,a big car a big truck you come to a very narrow road you
8891,10-31,33:14,cannot pass so then you can bring in several smaller trucks
8892,10-31,33:19,in this case you only need to load the stuff on the big truck onto the smaller
8893,10-31,33:25,trucks do you need to also load the truck itself you do not okay you do not
8894,10-31,33:31,load the truss truck itself um and then what we can do is okay the
8895,10-31,33:39,header we do not break okay so the next we only need to break the
8896,10-31,33:46,remaining 39 80 bytes
8897,10-31,33:51,and you also need to pay attention when you break them into smaller pieces
8898,10-31,33:57,for the small truck of smaller datagram it also has a header so although in
8899,10-31,34:06,total the maximum transfer size is 1500 but it
8900,10-31,34:12,also use 20 bytes for the header so the remaining
8901,10-31,34:18,1480 bytes can be used for data okay so
8902,10-31,34:23,that's why when you do the braking you can say okay i need to break this into 1
8903,10-31,34:30,480. and another one for 18. how many do we have now so 2 9 16 right 2 9 60.
8904,10-31,34:40,so we still have one thousand 120
8905,10-31,34:48,bytes remaining is this correct
8906,10-31,34:53,okay so this is how we break it into smaller pieces then what we can do is we
8907,10-31,34:59,put this one this into um datagram number one okay and then we can
8908,10-31,35:07,also put it into
8909,10-31,35:14,this gram number two okay and then this round number three will be put into this one
8910,10-31,35:29,does this make sense so this is how you do the fragmentation you basically put the data into
8911,10-31,35:37,different smaller datagrams and again pay attention each datagram has 20 bytes
8912,10-31,35:43,for header in the test many students made a mistake at this point
8913,10-31,35:49,okay so now let's fill in the
8914,10-31,35:56,data or the the data for these fields in smaller datagrams so for the number one
8915,10-31,36:03,this is for number one for number one datagram the total length you can see is
8916,10-31,36:09,1500. okay the id number
8917,10-31,36:15,the id number will inherit the same we will inherit the big
8918,10-31,36:21,datagrams id it's very easy so frag flag this is a very special bit
8919,10-31,36:30,this beast is used to note to indicate if this small datagram is the last
8920,10-31,36:40,uh fragment fragment or not because we know one big datagram may be broken into
8921,10-31,36:47,many smaller pieces and when the receiver receives these smaller pieces the receiver need to reassemble them but
8922,10-31,36:55,how do the how does the receiver know which one which piece is the last piece
8923,10-31,37:01,so that it can do the reassemble right so that and the basically one of the
8924,10-31,37:09,fields that the receiver can look at is the frag flag so if this front flag
8925,10-31,37:14,equals one this means this is not the last piece we have more fragments coming
8926,10-31,37:20,in if it equal to zero this means this is already the last piece there are no
8927,10-31,37:27,other um smaller pieces coming in so you can do
8928,10-31,37:32,the reassemble now it's like that okay so
8929,10-31,37:37,and the last one is the offset the last field is offset the offset basically
8930,10-31,37:43,means the position of this uh
8931,10-31,37:50,small datagram in the large datagram for example
8932,10-31,37:56,we know here the first the number one the number one
8933,10-31,38:01,piece actually starts from here okay and this is the very beginning of the data
8934,10-31,38:08,so that's why the offset is zero and this one we know it starts at byte 1 480.
8935,10-31,38:18,okay so by 21480 uh is the position of
8936,10-31,38:24,the second the number two datagram okay so then
8937,10-31,38:30,1480
8938,10-31,38:35,1480 divided by eight is 185
8939,10-31,38:41,you may ask why do we divide it by eight um we use h as uh eight bytes eight
8940,10-31,38:49,bytes as a unit okay eight bytes as you need to calculate the offset so that's
8941,10-31,38:55,why it's so 1480 divided by eight and then this number
8942,10-31,39:06,this position we know it is actually 1 480 plus 1 for
8943,10-31,39:12,80. is 2 9 60. so 2960 divided by 8 it is a 370.
8944,10-31,39:23,okay so that's how we calculated offset and you can see for diagram number two
8945,10-31,39:30,and number three for number two the length is 1500 again
8946,10-31,39:35,the id is of also x the front flag is still one because this
8947,10-31,39:41,is not the last piece and the offset we just mentioned how to calculate that the length for number three is very
8948,10-31,39:47,interesting the net for number three is a you need to pay attention again this is
8949,10-31,39:53,a length of the entire packet so it should include both the header and the data so
8950,10-31,40:00,it's 20 plus 1020 equals to 1040. many
8951,10-31,40:05,students made a mistake here in the test some of them forgot to add the 20 bytes
8952,10-31,40:12,of a header okay they put 1020 here and
8953,10-31,40:18,id is also x frag flag is zero this means it is the
8954,10-31,40:25,last fragment so you can do uh reassemble once you receive this one
8955,10-31,40:31,um and then this is uh the entire example any questions
8956,10-31,40:36,some of you are asking why do we need the offset to be divided by eight right
8957,10-31,40:42,so the reason is because the offs the for the offset this field of the field
8958,10-31,40:51,has 13 beats that means you can have at most 2 to 13
8959,10-31,40:58,units or this number can be at most 2 to 13. okay
8960,10-31,41:04,but the datagram itself can be much bigger than that okay much bigger than
8961,10-31,41:10,that the date the diagram itself is a the total length can be
8962,10-31,41:19,65
8963,10-31,41:24,1536 that is actually equaling into uh this is this actually equals to
8964,10-31,41:32,8192 this is 81.92 plus 8. okay so if
8965,10-31,41:38,you say okay if we want to we i want to denote every every byte
8966,10-31,41:45,then we have this this offset number has to be this big okay if we want to denote every byte the
8967,10-31,41:53,precision the relative position from 0 to 66 65 536 this this offset number has to be
8968,10-31,42:01,that big but apparently the offset number can be only 13 bit it can be at
8969,10-31,42:07,most this big so that's why we cannot denote every bite we can only denote every eight
8970,10-31,42:16,bytes okay we denote every it by so this is eight eight
8971,10-31,42:22,so we divide this entire diagram into eight bytes per unit and then we can say okay this
8972,10-31,42:30,is a zero this is a one this is two this is three it's like that so in total you
8973,10-31,42:38,can have this number is one probably 8191
8974,10-31,42:45,and then in total we have this many units each unit is advice then we can
8975,10-31,42:53,denote the entire lithograph this makes sense to you
8976,10-31,42:58,okay so that's why i mean you do not need to understand the details of this
8977,10-31,43:04,okay you don't need to do this no need you don't need to know this you only
8978,10-31,43:09,need to know the units of data is 8 byte in the
8979,10-31,43:14,fragment in the fragment so that's why when we calculate the offset we need the
8980,10-31,43:19,byte number the position of the byte number to be divided by eight okay that's
8981,10-31,43:27,that's all you don't need to know that much details okay so then now let's look at this question for this question the
8982,10-31,43:35,length and total length is uh one thousand
8983,10-31,43:41,okay and among this 1000 we know the header is 20. so the remaining
8984,10-31,43:48,980 of the data and when we do the fragmentation we know we only need to
8985,10-31,43:55,divide the data for the for the fragmentation number one we know we we
8986,10-31,44:00,need to divide this into the total is 40
8987,10-31,44:06,420 420 so 20 bytes over
8988,10-31,44:11,header and 400 bytes of data so 400 bytes of data okay and then we for the
8989,10-31,44:18,number two is the same so 20 header
8990,10-31,44:23,400 bytes of data again 400 so how many is left one thousand minus 800 200 200
8991,10-31,44:32,minus twenty we have one 180 left so the number three will pack it will look like
8992,10-31,44:39,this 20 bytes or header and 180 bytes of
8993,10-31,44:44,data so this is in total 42 400 420 this
8994,10-31,44:49,is a 200 so those are the lens those are how we calculate the lens so then for
8995,10-31,44:55,number one we know okay the length is a
8996,10-31,45:02,420 id equal to x okay
8997,10-31,45:07,frag flag we know this is not the last one so this
8998,10-31,45:14,should be one offset is easy through the beer
8999,10-31,45:19,this is at zero right so pi to zero we do not hydra we only count the data so
9000,10-31,45:25,the relative position for for number one is actually zero for number two we know
9001,10-31,45:32,here it should be 400 for number three this relative
9002,10-31,45:38,position from the start is a 0 to 800.
9003,10-31,45:43,okay so this is 800. that's how we calculate the offset we then we not use
9004,10-31,45:49,this number to divide eight okay so then for then for packing number two we know
9005,10-31,45:55,the length is also 420 id is equals equal to x
9006,10-31,46:03,frag flag equal to 1
9007,10-31,46:09,offset equals to what 400 yes 400 divided by 8 equal to 50.
9008,10-31,46:19,okay for number three we know the length pay attention the length here you should
9009,10-31,46:25,include the header not just 180 it's actually two hundred id equals to x
9010,10-31,46:32,flag flag equal to what it should be zero okay and offset equals
9011,10-31,46:39,to 800 800 divided eight equal to 100 okay
9012,10-31,46:44,so that's how you do the calculation all right so that is about the
9013,10-31,46:50,fragmentation
9014,11-02,0:01,the next thing we are going to discuss today is about the ipv4 addressing we we
9015,11-02,0:08,know we all we are very familiar with ip address now right uh we know it's a 32-bit identifier we use it every day we
9016,11-02,0:16,usually what we we talk about is this kind of thing right
9017,11-02,0:22,223.1.2.0 something okay it's like that um but how why do we
9018,11-02,0:29,um why why do we write ip address in this way okay uh how do we come up with this
9019,11-02,0:36,kind of format so today we are going to introduce about the rationales the
9020,11-02,0:42,principles for ip addressing okay so basically ip address we know is 32 bit
9021,11-02,0:49,uh actually this ip address is assigned for each interface
9022,11-02,0:55,for each host or launcher interface so what does this mean this means uh we
9023,11-02,1:02,know on a host we may have the kneecard right network interface card
9024,11-02,1:08,so this nick card is a interface is the interface to connect to the network on
9025,11-02,1:14,the routers we also have some interfaces so for example you can see for this router it has three interfaces so the ip
9026,11-02,1:22,address is actually assigned to each interface okay uh sometimes for example
9027,11-02,1:29,on your computer you may have the interface for wire network and also for wireless network for those two different
9028,11-02,1:36,networks you may have different ip addresses that is something you need to pay attention
9029,11-02,1:42,um traditionally we already say oh my the the ip for my host is is a abcd but
9030,11-02,1:47,that is actually not accurate okay that is not accurate it's actually for the
9031,11-02,1:53,host interface for specific host interface so then what is the interface interface
9032,11-02,1:59,basically means the connection between the host and the physical link or the
9033,11-02,2:05,router and the physical link okay it's the the con the interface used to
9034,11-02,2:11,connect to the internet um usually the routers have multiple interfaces which means it has multiple
9035,11-02,2:18,ip addresses okay um and the host typically has one or two
9036,11-02,2:23,interfaces for as i said you may have wired or wireless interfaces okay and the ip address is as
9037,11-02,2:32,we said is 32 bit so 32 bits means
9038,11-02,2:37,in binary it is 32 bits
9039,11-02,2:42,okay and then we know it's very hard to remember this 32 bits in binary it's
9040,11-02,2:50,very hard to remember then what is a better way to denote the 32 bits
9041,11-02,2:56,um ip address so then people decide to divide the 32 bits into
9042,11-02,3:04,four segments for each segment is uh h uh this is one byte basically okay so
9043,11-02,3:11,then we can convert the binary into decimal so the number will be from 0 to
9044,11-02,3:18,255. okay so for each byte the biggest number
9045,11-02,3:24,is 255 then we can we can use dots to separate these four segments four parts
9046,11-02,3:30,okay so that's why we can say for example the first bytes the first byte is now converted to 2
9047,11-02,3:37,23rd and then the second byte is converted to one in decimal and this is
9048,11-02,3:44,one in decimal this is one in decimal so that's why we have two 23.1.1.1 okay so uh in the future when
9049,11-02,3:53,you see uh ip address in decimal you know you are able to convert it back to
9050,11-02,3:59,binary okay any questions
9051,11-02,4:06,all right uh you may also ask how are interfaces actually connected how are
9052,11-02,4:12,they connected for example here you may say oh we have uh this interface
9053,11-02,4:20,this interface this one this one with the router we have this many interfaces
9054,11-02,4:25,here right so how are those interface connected that will be something that we
9055,11-02,4:32,will learn uh in the ethernet layer okay in another sorry i should say in the
9056,11-02,4:39,link layer okay in the link layer we will talk about the switch we will talk about how to connect the adjacent
9057,11-02,4:46,interfaces okay so that is something you don't need to worry about now
9058,11-02,4:54,uh another concept in networking a very important concept is subnet you heard
9059,11-02,5:01,about this term again again okay so what is a subnetic basically
9060,11-02,5:08,um for uh subnet we basically mean the device interfaces can be connected with
9061,11-02,5:15,each other without intervening the router okay without intervening the router for
9062,11-02,5:23,example here we have this these four interfaces these four interfaces can be
9063,11-02,5:29,connected together without a router in between okay similarly for this interface you
9064,11-02,5:36,can see they can be connected together without a router imbition so now we call this as a
9065,11-02,5:45,subnet and this
9066,11-02,5:51,as a subnet and this is another subnet okay so we have three
9067,11-02,5:58,subnets now and at your home you may have your home network okay your home
9068,11-02,6:04,network um is itself is of course a small network right so you can also view that
9069,11-02,6:10,as a small subnet because your devices can be connected together okay but this
9070,11-02,6:19,your home network is is a little bit different from the subnets because uh
9071,11-02,6:25,you may or may not use a switch to connect those interface scalar your
9072,11-02,6:31,device is maybe connected to the browser directly okay so that is the difference
9073,11-02,6:36,uh and some of you may ask them how can we know how can we denote how can we see
9074,11-02,6:42,usually how can we see it belongs to a subnet or not those interfaces belong to one subnet or not okay so usually you
9075,11-02,6:50,can tell from the ip address for example for the ip address usually we have two parts
9076,11-02,6:55,the sub network part and the hotspot so the sub network part is used to denote
9077,11-02,7:01,the subnet and the host part is used to denote the host the individual horse it's like the subnet part is like the
9078,11-02,7:10,family name for us we all have our our own names for example my first name is
9079,11-02,7:15,showian last name is san right so that the sun is like the same approach this
9080,11-02,7:21,means um i belong to the same family okay and then my first name is the host parties
9081,11-02,7:28,it's like the hospital it's used to uh denote myself okay to represent this
9082,11-02,7:36,me okay this individual so that is the difference then usually if the sub
9083,11-02,7:42,network part the high order beats are the same then very likely they belong to
9084,11-02,7:48,the uh same subnet so for example here you can say for this subnet okay the high order bits
9085,11-02,7:56,are 223.1.1
9086,11-02,8:01,then you can see the remaining this one two three four they are different okay
9087,11-02,8:09,so then you can see they belong to the same subnet okay similarly for this one
9088,11-02,8:15,for this one you can see the high order bits are 223.1.2 okay the host part is one two
9089,11-02,8:26,nine okay so that means they are they very likely they belong to the same
9090,11-02,8:31,subnet and similarly here you can say 223.1.3
9091,11-02,8:36,okay to the third and then we have 2 27 one as the hotspot okay
9092,11-02,8:44,um by looking at ip address you can you can
9093,11-02,8:49,um estimate if they are in the same subnet but this
9094,11-02,8:55,may not be accurate okay because sometimes you cannot determine
9095,11-02,9:01,how many bits are used for the sub network part okay so that's why usually the best way to do
9096,11-02,9:08,it is to look at the topology of this network and see if the router is in is
9097,11-02,9:16,is within the subnet or not okay if there is a router in between that means
9098,11-02,9:22,this is not a subnet okay and now you can see
9099,11-02,9:28,um this is the example we've explained and how do we denote a subnet okay we
9100,11-02,9:33,can denote a subnet use some using something called mask okay for example
9101,11-02,9:39,if we use the first 24 bits the first 24 bits
9102,11-02,9:45,as the subnet part for the ip address then we what we
9103,11-02,9:50,can do is write in this way
9104,11-02,9:56,223.1.3.024 slash 24 means this is the subnet mask
9105,11-02,10:02,okay that means we use the first 24 bits to use as the sub network part it's like
9106,11-02,10:10,i use the first 24 bits as the family name okay as the family name and then
9107,11-02,10:16,the remaining eight bits are used to denote the individual house okay so that
9108,11-02,10:22,is how we use the subnets now let's look at this example in this
9109,11-02,10:30,example can you tell can you tell how many subnets we have think about the informal definition i
9110,11-02,10:37,mentioned before i said for to divide the subnet we need to make
9111,11-02,10:42,sure there is no rubber in kitchen okay
9112,11-02,10:47,so for those of you who see third i'm guessing you are talking about this one
9113,11-02,10:54,this one and this one right we are talking about the
9114,11-02,11:00,interfaces so those interfaces are connected together without a router so
9115,11-02,11:06,they can be three subnets but how about these ones
9116,11-02,11:13,is this also interface yes is this also interface yes okay so are they connected
9117,11-02,11:20,together yes is there a voucher in between no so this is also a subnet okay
9118,11-02,11:27,similarly this is also a subnet and this is also a subnet
9119,11-02,11:32,you may say there are no computers but we didn't mention we must have computers
9120,11-02,11:37,in between right we just mentioned the interfaces okay the interfaces are
9121,11-02,11:44,connected together without a router so that's why those three are also the
9122,11-02,11:49,subnets so the correct answer is actually six so the next the next thing let's discuss
9123,11-02,11:55,the ip address in depth okay so the ip addressing we have uh we have a
9124,11-02,12:03,classless kind of ip addressing okay so class list um the phone name is called cider
9125,11-02,12:09,classless enter the main routing okay
9126,11-02,12:15,um so basically this means for the entire ip address we divide it into the
9127,11-02,12:21,format of this a dot b dot c dot d slash x so we divide it into the subnet part
9128,11-02,12:28,and also the host part okay so the subnet parts we can use the number x to
9129,11-02,12:35,denote how many bits is used for subnets so for example here we use 23 bits 23
9130,11-02,12:42,bits the first 23 you can count okay the first 23 bits are used as subnet and the
9131,11-02,12:49,remaining nine bits are used for host okay and we do not have any requirements
9132,11-02,12:55,on how many bits can be used for summer you can use two bits for subnet and use all
9133,11-02,13:02,the remaining 30 pieces for host or you can use um 30 bits as a subnet and use only two
9134,11-02,13:09,bits as a host so then what is the difference you can you can think about this for example
9135,11-02,13:15,if we use a 30 23 bits as the sub network part okay
9136,11-02,13:22,then how many subnets can we have in total for the entire internet if we all divide it in this way then the total
9137,11-02,13:30,number of thumbnails we can have is actually 2 to 23. we have we can have
9138,11-02,13:35,this many subnet okay sub networks but in each sub-network how many hosts
9139,11-02,13:43,can we have we know in each subnetwork the number of
9140,11-02,13:49,hosts is actually two two nine okay
9141,11-02,13:54,then you can think about this if we use the first 30 bits and subnet okay then
9142,11-02,14:01,the number uh subnet this is the number of a host
9143,11-02,14:09,okay if we use 30 bits for subnet then
9144,11-02,14:14,the number of subnets is a 2 to 30 and the number of hosts is two two
9145,11-02,14:21,okay so that means what that means we can have so many subnets but each subnet is very
9146,11-02,14:29,very small each subnet can only have four hosts one two three four they can
9147,11-02,14:34,have only four hosts okay if we use for example two bits as the
9148,11-02,14:40,subnets let me use three maybe have three piece as the summoners okay
9149,11-02,14:46,uh then the number of subnets will be two to three
9150,11-02,14:51,that means we can have at most eight subnets but how many hosts can be accommodate in
9151,11-02,14:57,each subnet each subnet we can have two two
9152,11-02,15:04,nine we can have a 2 to 29 uh horse what
9153,11-02,15:09,does this mean this means we can have only eight subnets but those a subnets
9154,11-02,15:15,are huge okay because each one can accommodate a lot of horse
9155,11-02,15:22,okay in the first situation when we have 30 bits as the sub network part
9156,11-02,15:28,we can have a lot of subnets but the each subnet is very small it can
9157,11-02,15:36,accommodate only four costs okay so then you can see
9158,11-02,15:42,by adjusting the number of subnets in ip address we can actually adjust the
9159,11-02,15:52,size of the subnet and also the total number of subnets we can accommodate
9160,11-02,15:57,okay so then this is very good because sometimes we need a big subnet okay if
9161,11-02,16:04,we have a lot of machines to connect we need to speak subnet okay uh then in this case we can say we need
9162,11-02,16:10,to assign more beats to the host okay and the last piece to the subnet but
9163,11-02,16:17,sometimes we may have only two machines through machine or a few machine to connect then in this case we can
9164,11-02,16:24,um assign as few bits to the host okay and
9165,11-02,16:29,uh more beats to the subnet okay so basically we can adjust the size uh very
9166,11-02,16:36,flexibly um by using by adjusting the piece of the pc47s so
9167,11-02,16:44,then if you do not have any questions let's look at the network classes we
9168,11-02,16:50,said we just talked about uh the classless entered the miracle right this is classless but originally i mean the
9169,11-02,16:59,network actually was classified into different classes okay for example
9170,11-02,17:05,um here with me this here you can see this is class a for class in a network
9171,11-02,17:11,you can see the the white part are used for subnet the yellow beads are used for
9172,11-02,17:18,the horse okay so for class a network you can see the we use the cell eight
9173,11-02,17:25,bits eight bits of four subnet and we use the the remaining 24 bits for the
9174,11-02,17:31,host so that means what that means and also you need to pay attention for class a the first bit is zero
9175,11-02,17:39,because uh b c d and e the first speed are all one okay i o one so that's why
9176,11-02,17:46,uh the for class a the first bit is fixed okay it's fixed so then now you
9177,11-02,17:53,can say for class a network how many class a networks can we have
9178,11-02,17:59,how many class a networks can we have in total for the entire network
9179,11-02,18:07,you you can check how many bits can we have we have well in total we have eight bits but the first bit we cannot change
9180,11-02,18:14,right the first bit is zero so that's why in total is actually two to seven
9181,11-02,18:20,right it's two to seven very close to uh yeah two to seven okay
9182,11-02,18:28,um and then for the host part for the post part how many hosts can we have in
9183,11-02,18:33,each class a network you think about this we use 24 bits okay so it should be
9184,11-02,18:43,2 to 24. we have two to twenty four hosts we can accommodate this many hots
9185,11-02,18:49,in class a network okay so this is for class a for class b
9186,11-02,18:55,okay for class b we use similarly we use the first twin uh first
9187,11-02,19:02,um 16 bits as the network part but the first two
9188,11-02,19:08,bits are fixed okay it must be one zero so you can see this is actually we can
9189,11-02,19:14,have two two fourteen subnets each subnet is again two two
9190,11-02,19:24,16. okay 2 to 16 house we can have this many holes but in reality okay the
9191,11-02,19:31,number of holes should be 2 to 18 minus two why because the host id
9192,11-02,19:38,0.0.0.0 and the id 225.225
9193,11-02,19:43,um is actually reserved for something else okay it's reserved for something else later we will talk about that for
9194,11-02,19:50,example uh 225.25 is used for broadcasting okay so
9195,11-02,19:56,um so for those for those we do not use them that's why the number of holes should be -2 okay then we can continue
9196,11-02,20:03,for class c for class c this is basically for example first third piece
9197,11-02,20:09,are fixed so then two to twenty four minus 3 is actually 21 it's for subnet
9198,11-02,20:17,and two two eight is for house okay and then you can continue for class
9199,11-02,20:24,d and e etc so as you can see um regionally when people talk about
9200,11-02,20:30,class a b c d e the major difference is actually their size okay when we say oh
9201,11-02,20:35,this is the class a network that is that actually means this it doesn't work it's
9202,11-02,20:41,very very big okay this subnet is very big if we see this is a class b network okay it's it's like oh okay the size is
9203,11-02,20:49,it can accommodate at most about 65 000 parts okay if it's a cluster network we
9204,11-02,20:57,know this is a small uh small network okay so it's like that and pay attention pay attention uh for
9205,11-02,21:05,this type of classification okay it may not work very well sometimes because for
9206,11-02,21:12,example for classy network we can accommodate 254 of 254 house
9207,11-02,21:18,but for class b we can accommodate 65 000 more than 65 000 house
9208,11-02,21:23,now what if we have a network that has uh 1000 hosts should we make it classy
9209,11-02,21:31,apparently not because class c is not big enough should we make it class b we can but we
9210,11-02,21:39,can see there is a risk of ip address right so we use only a thousand ip addresses among this
9211,11-02,21:46,entire um network okay and the remaining ip addresses are listed so that's why this
9212,11-02,21:54,kind of classification classification is actually not very good uh that's why we
9213,11-02,21:59,prefer to have uh sader now okay classless addressing okay
9214,11-02,22:06,the next the next thing you may you may ask is how can we get one ip address how
9215,11-02,22:12,can can host get the ip address okay there are two different ways one way is
9216,11-02,22:18,you can actually uh hard code ip address in a file for example you for windows
9217,11-02,22:24,system you can go to appropriate files okay you can change the ip address for this machine or in unix system or linux
9218,11-02,22:32,system you can also uh set up the ip address manually okay
9219,11-02,22:38,basically when you for example in windows system when you try to set up the ip address you also need to
9220,11-02,22:44,specify the network mask the gateway router etc you need to specify a lot of
9221,11-02,22:51,information okay and that method is not very flexible not very convenient the
9222,11-02,22:58,reason is because when you assign ip address that ip address is occupied okay
9223,11-02,23:04,but sometimes you don't not know which ip address is occupied you have to try
9224,11-02,23:10,different ip addresses otherwise you may have conflict with other machines okay so i've done that before
9225,11-02,23:18,many many years ago and i often write that problem that i am competing with
9226,11-02,23:25,other machines for one ip address okay so that's why gradually now people are
9227,11-02,23:31,using deep cp so dhcp is dynamic host configuration protocol this is one
9228,11-02,23:38,protocol that can dynamically assign ip address to the servers or to the
9229,11-02,23:44,machines sorry not to the servers from a server to the machines okay so basically
9230,11-02,23:50,a dhcp server um wheel respond
9231,11-02,23:56,and help to assign ip address to a machine okay this is a plug and play
9232,11-02,24:03,protocol it's very easy to use very convenient there is no problem of conflicting ip address let's look at
9233,11-02,24:11,this protocol so basically the goal for this protocol
9234,11-02,24:17,is to allow the host to dynamically obtain the ip address from a server when
9235,11-02,24:24,it joins the network and if and this ip address can be renewed
9236,11-02,24:32,okay what does this mean this means because for example when you join a network you are assigned ip address and
9237,11-02,24:39,this ip address can be valid for certain amount of time after this time expires then this ip
9238,11-02,24:47,address cannot be used anymore but we in this case we can renew the list okay we
9239,11-02,24:52,can renew the list on the address in use this also uh this dcp will also allow
9240,11-02,24:59,allow the reuse our address what does this mean this means if one machine left
9241,11-02,25:05,the ip used by that machine can be reused by some other machines okay so
9242,11-02,25:12,then this also supports the most buy users who want to join the network so
9243,11-02,25:17,it's very convenient okay um basically this dtcp has uh the
9244,11-02,25:24,digital discover offer request ac key visa four different types of messages
9245,11-02,25:29,let's look at an example here in this scenario we have one
9246,11-02,25:35,digicip server okay and we have the subnet okay you can
9247,11-02,25:41,see this subnet the first four 24 bits are used for to denote the subnets
9248,11-02,25:47,and now we have a new client trying to join this network this new
9249,11-02,25:54,client needs a ip address okay so what what what can the uh so
9250,11-02,26:02,what will happen after that so basically the client will need to shout to
9251,11-02,26:08,everybody okay say is there a d2cp server out
9252,11-02,26:13,there why is this a broadcast message because the client does not know
9253,11-02,26:21,who is the d2cp server okay so that's why the client has to shout to everybody
9254,11-02,26:27,so how can the client shout very easy okay the source address is
9255,11-02,26:35,zero zero zero zero that's why we said before zero zero zero zero is actually reserved okay it's reserved this stock
9256,11-02,26:42,address basically means i do not have an ip address yet okay i'm waiting for assigning ip address
9257,11-02,26:49,and then the destination address is 255 255 255 255. this means this means
9258,11-02,26:58,this message is for everyone for everyone okay
9259,11-02,27:03,and here the source part is 68 and the destination port is 67 that means the
9260,11-02,27:10,d2cp server is actually listening to 67. and this is this uh uh yi address is
9261,11-02,27:20,actually this will be changed later okay this means i'm waiting for uh for uh
9262,11-02,27:26,assignment okay uh and then last line is
9263,11-02,27:31,the transaction id okay so then the everybody will receive this
9264,11-02,27:36,message everybody will receive this message but for those machines who are not dtcp
9265,11-02,27:44,servers they will simply discard the message they may not listen to 67 okay
9266,11-02,27:49,they do not listen to 67. only dhcp server is listening to 67 and dhcp
9267,11-02,27:55,server will respond to say hey i'm the dhcp server and here is an ip address
9268,11-02,28:01,you can use okay how is this now basically the dhcp server now will
9269,11-02,28:09,introduce itself my source address is this one and my port number is 67. the
9270,11-02,28:15,destination address is now in your broadcasting it's still 255 a bunch of
9271,11-02,28:21,255 why because the client does not have any ip address yet
9272,11-02,28:27,the division server cannot reply to a specific ip address so that's why it also has two broadcast and the port
9273,11-02,28:36,number is 68 because originally we learned the phone number
9274,11-02,28:41,168 okay and this is the offered ip address okay so the dsp server say you
9275,11-02,28:50,can use this ip address of 223.1.2.4 as your new ip address
9276,11-02,28:55,the transaction id is 654 the same as the last one means this
9277,11-02,29:01,is the reply to last message and the lifetime is 3600 seconds what
9278,11-02,29:06,does this mean this means the ip address is valid within 3 600 seconds
9279,11-02,29:13,after that if you still want to use this ip address you need to renew okay
9280,11-02,29:18,and then this client will reply say okay i'll take that ip address
9281,11-02,29:24,okay and then in this case you can see
9282,11-02,29:29,of the source is zero zero zero because there is no confirmation yet so and then
9283,11-02,29:34,destination is still the same thing 255 to 55 okay broadcasting to everyone
9284,11-02,29:40,and the ip address this one okay this is a confirmation
9285,11-02,29:48,to the server say i'm i will take this ip address okay the transaction id is uh 655 this
9286,11-02,29:58,is like a request a request would say hey i'll take this ip address i'll take
9287,11-02,30:04,this ip address okay and i know the lifetime is 3600 seconds
9288,11-02,30:09,okay then the server will confirm again so okay
9289,11-02,30:15,now you've got that ip address okay so now you have uh you can see the source
9290,11-02,30:22,is this one and destination is still broadcasting and now it's a confirmation that this ip
9291,11-02,30:28,address can be used by the client and then transaction id is the same as the last request message lifetime is 36 100
9292,11-02,30:36,seconds okay so this is the entire process you may feel like oh the second part seems
9293,11-02,30:44,like very redundant right the second time seems redundant uh
9294,11-02,30:51,why do we need to have a confirmation again again okay there is the reason here
9295,11-02,30:57,because in the network we may have multiple thcp servers okay when the
9296,11-02,31:04,client broadcast the message to everyone multiple industry scissors may reply
9297,11-02,31:11,with multiple ip address candidates okay so then this client needs to choose
9298,11-02,31:17,one specific address and then make the dhcp request say i'll take that one not the others
9299,11-02,31:25,okay although i got several offers but i only choose one okay and then the server
9300,11-02,31:30,will uh ack so that is the entire process okay and that's the reason why
9301,11-02,31:36,we have the confirmations again in the second part this will happen once you
9302,11-02,31:42,join a new network okay and sometimes the d2cp server is actually combined
9303,11-02,31:47,together with a router the router can directly it also serves as a server okay
9304,11-02,31:52,but sometimes dtcp server is separate so so when you connect to a network this
9305,11-02,31:57,happens automatically the ddcp actually return information
9306,11-02,32:04,a lot of information not just the ip address not just the one we see here you
9307,11-02,32:09,can see the ip address of two two three one two uh four right uh actually it
9308,11-02,32:16,also provides more information what information this information it will also provide the address or the
9309,11-02,32:24,first hope launcher for the client so because we know when the client joins
9310,11-02,32:30,this network the client is new right the client is new to this network the client
9311,11-02,32:35,has no information about the network so that's why dhcp is very important to
9312,11-02,32:41,introduce the basic information about that network to the client so the clients know how to continue okay the
9313,11-02,32:49,first very important thing is the first hop launcher why because when the client
9314,11-02,32:54,wants to send something outside the network it needs to contact the first
9315,11-02,32:59,hub browser so that's why dtcp need to introduce the first hub browser to the
9316,11-02,33:04,client okay so this is the first piece very important and we are we actually we are going to
9317,11-02,33:10,use this information again again um the second piece of information is
9318,11-02,33:15,the name and ip address or ds server dns server is also very important we
9319,11-02,33:22,know the sd has a help help the client to interpret the
9320,11-02,33:30,um the mean name address into some ip address okay so that's why it's also
9321,11-02,33:36,very important without dns the client can do nothing okay that's the second piece of
9322,11-02,33:41,information the third piece of information is the network mask okay padding in the network market will
9323,11-02,33:50,help the client know which part is used
9324,11-02,33:55,for the network which part is used for host so when it is connecting with some
9325,11-02,34:01,machine okay some ip address it knows how to interpret this ip address okay so
9326,11-02,34:07,that those are the three pieces of information that will be returned in
9327,11-02,34:12,addition to ip address by the dhcp okay so this is very important
9328,11-02,34:19,so you can say here we have a router with dcp server built into the router
9329,11-02,34:26,okay so the the dhcp server is combined with the router
9330,11-02,34:31,and we have a switch here and we have a computer here okay we have this computer
9331,11-02,34:38,when this computer joins the network okay this client you can see we are
9332,11-02,34:43,looking at the five layer now a five layer application layer transport layer
9333,11-02,34:50,network layer okay link layer and physical layer so i hope you have this
9334,11-02,34:57,five layers in your mind forever okay do not forgot that and then now add the application layer
9335,11-02,35:05,you can see we will form a dhcp request message okay for my dcp request message
9336,11-02,35:12,and this message will be sent to the
9337,11-02,35:19,um transportator and the transport layer will add a transported layer header here
9338,11-02,35:27,okay the pay attention here the transport layer protocol we are using is
9339,11-02,35:34,udp not tcp why do we use
9340,11-02,35:40,udp instead of using tcp we're doing is it is about reliability
9341,11-02,35:47,actually no this is not about reliability okay we all know that for
9342,11-02,35:54,tcp protocol we need to establish a connection before we do that exchange but pay
9343,11-02,36:01,attention this machine does not know who is the server yet
9344,11-02,36:06,okay and this machine has no ip address yet so in this case how can we make a connection we cannot so we cannot make a
9345,11-02,36:14,connection that's why we must we must use udp we cannot use tcp at transport
9346,11-02,36:20,layer okay so now when this machine comes down to when this message comes
9347,11-02,36:25,down to network layer and then we are adding a network clear header
9348,11-02,36:32,okay and then it got comes on to link layer we are adding a link layer header
9349,11-02,36:37,okay so this is the entire process and finally this message becomes zeros and
9350,11-02,36:43,ones okay the link later we call it a frame okay transport layer record is a segment network layer recorded datagram
9351,11-02,36:49,and then link later we have the frame translated into zeros and a ones then it
9352,11-02,36:55,is sent out okay okay and pay attention when this frame is
9353,11-02,37:02,sent out the frame is broadcasted to everybody how do we do the broadcast we know for
9354,11-02,37:09,at the ip the ip address we know it should be 255 255 255 25 but when this
9355,11-02,37:16,is implemented in reality at the link layer what we will do is we will make the mac
9356,11-02,37:24,address a bunch of apps okay 12 f's okay 12 apps
9357,11-02,37:30,in total 48 bits online okay and i know
9358,11-02,37:35,you have no idea about mac address now but it's fine we will learn later okay
9359,11-02,37:40,for now you just need to know a bunch of s okay this is how we do the broadcasting at the link layer
9360,11-02,37:47,okay and then this message will be received by the dtcp server d2cb0 will
9361,11-02,37:54,remove the headers layer by layer and finally deliver this dhcp message to the
9362,11-02,38:02,application layer okay and then the dtc server will basically formulate a dcp
9363,11-02,38:09,act response continuing all this information okay four pieces information
9364,11-02,38:15,client address the ip address of 4-hub launcher the name and address of the
9365,11-02,38:20,server and also the network mask actually okay so basic information will be or included and then send back
9366,11-02,38:29,to the client okay then when the client receives it the client will remove the header layer
9367,11-02,38:37,by layer and finally wrote the message to the application layer so this is a the entire process now the client knows
9368,11-02,38:44,is ip address name and ip address of dns server ip address always first hop
9369,11-02,38:50,browser okay so this is a sample message you can see this is the left part is a
9370,11-02,38:55,request message and it is requesting for subnet
9371,11-02,39:01,the mean name the router's information that is the first gateway router and
9372,11-02,39:08,first of all brownstra and also the domain name servers okay so then in the
9373,11-02,39:14,reply you can see it is providing it is actually providing the client ip
9374,11-02,39:20,address okay and it also provides the sub
9375,11-02,39:26,network mask information dns servers information and the domain name okay so those
9376,11-02,39:32,information are provided in the reply message okay so another question you may ask
9377,11-02,39:40,further is okay i know the router or the dfcp
9378,11-02,39:45,server can help assign ip address to a host but the question is how could a
9379,11-02,39:52,network get the subnet part of the ip address that means okay you can assign
9380,11-02,39:58,ip address but how do you know which ip addresses you can assign okay how does
9381,11-02,40:03,the dhcp server know which ip address is to assign okay uh so the answer to this
9382,11-02,40:11,question is that usually uh we need uh for a subnet it needs to get allocated
9383,11-02,40:18,portion um from its price provider isp's address
9384,11-02,40:25,space okay so basically for example this is the isps
9385,11-02,40:31,um space okay outer space so basically this is one block okay it means the
9386,11-02,40:38,first 20 bytes if you look at the network mask is 20 that means the first 20 bits are used for subnet and then the
9387,11-02,40:46,remaining bits can be used for horse okay and then this is for the entire isp
9388,11-02,40:54,but if we have different organizations okay the isp may decide to assign the ip
9389,11-02,41:01,address range to different organizations so they may say okay
9390,11-02,41:06,let me use this if we have eight organizations let me use these three
9391,11-02,41:11,bits these three bits to distinguish those
9392,11-02,41:18,eight organizations so you can see organization zero is zero zero zero and
9393,11-02,41:23,this is zero zero one this is zero one zero and we continue until we have one one one okay so you can say for all
9394,11-02,41:31,these uh organizations there first 20 fees are the same
9395,11-02,41:38,but following those first 20 bits we have three more bits distinguishing those on organizations okay now we can
9396,11-02,41:46,say okay for each organization the first 23 bits are used for subnet and then the
9397,11-02,41:53,remaining nine piece are used for horse
9398,11-02,41:59,okay and then of course the dtcp server for organization zero we all know okay
9399,11-02,42:05,when i assign ip address i can assign the ip address 13 with this okay and the
9400,11-02,42:13,first 20 therapies are for the subnet then remaining these are for the host
9401,11-02,42:18,okay so this is how we can get um a portion of the address space okay
9402,11-02,42:27,and these are kind of a hierarchical addressing is very useful actually
9403,11-02,42:33,um because we know uh later we will learn in network layer in when we talk
9404,11-02,42:38,about the routines and we will learn um the network each sub-network needs to
9405,11-02,42:46,advertise to others um which ip address is belong to this
9406,11-02,42:52,network so for example um the california california's postal office
9407,11-02,42:57,california's post office will need to advertise to the to the outside of
9408,11-02,43:03,california say hey if you have any emails going to
9409,11-02,43:08,um california then you can send it to me okay so that is uh adwords advertisement
9410,11-02,43:15,okay adwords advertisement is very important and then
9411,11-02,43:21,um you can say when we send advertisement okay we can aggregate those
9412,11-02,43:30,um those organizations uh all those those routes those routine information for
9413,11-02,43:37,example uh sacramento county may sacramento may say hey if you have any
9414,11-02,43:42,mail sending to me send it to sacramento sacramento you can send it to me and uh
9415,11-02,43:48,los angeles may say hey if you have any lectures going to los angeles you can send it to me so they are all doing
9416,11-02,43:54,advertisements and then when it comes to california california may aggregate all
9417,11-02,44:00,these advertisements combine them together and only see hey if you have
9418,11-02,44:06,any letters going to california you can send it to me okay so it's like that it's like it's
9419,11-02,44:12,the aggregation of those adversements so we can do the same thing in the internet as you can see for organization zero
9420,11-02,44:20,okay he said hey um this this address space belongs to zero so
9421,11-02,44:28,this belong to one this belongs to two this belong to seven and then when they are advertising to
9422,11-02,44:36,the internet then this isp can simply say hey if you have anything with address beginning
9423,11-02,44:43,with this pay attention this is 20. okay with this
9424,11-02,44:48,you can send it to me okay so why this is 20 because as you
9425,11-02,44:54,can see here 20 means this entire isp block
9426,11-02,45:00,okay so 23rd is actually indicating each smaller each smaller organization so we
9427,11-02,45:07,are doing algorithm we do not need to say one two three four until this eight okay we don't don't
9428,11-02,45:14,need to say these eight organizations we can combine them together and only advertise this okay it's like you don't
9429,11-02,45:21,need to advertise sacramental la san francisco you can directly advertise
9430,11-02,45:27,california it's like that okay and for different organizations or
9431,11-02,45:32,different isp they can see okay if you have anything with address beginning
9432,11-02,45:38,um 1993100 16 and centimeters okay so we
9433,11-02,45:43,select that and this is also very helpful for
9434,11-02,45:49,relocating okay or relocation what does this mean so sometimes for example one
9435,11-02,45:55,organization may decide to move from one isp to another isp we know it's very
9436,11-02,46:03,common to change the isp right so in this case in this case
9437,11-02,46:10,do we need to change the ip address for this entire organization
9438,11-02,46:15,okay for example now you can say organization one
9439,11-02,46:21,okay organization one um change from this flight by night isp
9440,11-02,46:28,to isp or us okay in this case we may not want to change
9441,11-02,46:35,the ip address we may not want to change the ip address
9442,11-02,46:40,for organization one okay because it's a lot of work we know especially if this organization is a big
9443,11-02,46:48,organization okay the ip address may already be known by by the public okay
9444,11-02,46:53,we don't want to change those then in this case if we directly move this
9445,11-02,46:59,organization to another isp without changing ip address some of you may
9446,11-02,47:05,worry oh in this case this may create a problem when we do the routing
9447,11-02,47:12,okay because this already said this already said send me anything with
9448,11-02,47:18,addresses beginning with this okay it's like saying send me anything
9449,11-02,47:23,beginning with california okay but what if a sacramento decided to
9450,11-02,47:28,move outside okay so what we can do now is
9451,11-02,47:35,in addition in the new isp in addition to the original address range we can add
9452,11-02,47:41,something more we can just say okay if you if you have anything with address
9453,11-02,47:46,beginning 199 something or 223 18 0-23 you can send it to me okay
9454,11-02,47:57,so it's like saying oh if you have anything going to
9455,11-02,48:03,um pennsylvania or california sacramento you can send it
9456,11-02,48:09,to me it's like that okay
9457,11-02,48:25,so you may see you may think oh then it's there is some confirm for example
9458,11-02,48:31,if i send i have something going to sacramento it's certify both conditions is it belongs to
9459,11-02,48:39,california and it's also belonged to california sacramento then in this case should i send the package to
9460,11-02,48:45,the flyby knight isp or the sp rus
9461,11-02,48:51,can you guess can you type in the chat which one if we use one to represent this two to
9462,11-02,48:58,represent this so if we have a package going to california sacramento will you
9463,11-02,49:05,send this to one or two okay we will choose to send to two
9464,11-02,49:11,because we know california's sacramento is a longer address it's more accurate
9465,11-02,49:16,right so it's the same thing it's the same thing if you have an
9466,11-02,49:22,address that matches both this sorry matches both this address and
9467,11-02,49:28,also this address then please remember a principle we learned before that is
9468,11-02,49:34,called the longest prefix matching then we will choose the one that matches
9469,11-02,49:39,longer okay that matches longer so it's called longest prefix matching if you cannot
9470,11-02,49:46,remember let me remind you
9471,11-02,49:54,do you remember here we learned it right if it matches both
9472,11-02,50:00,um addresses then we will choose the one that matches longer okay it's called longest prefix matching so that's why uh
9473,11-02,50:09,this kind of hierarchical addressing is actually very flexible if we want to
9474,11-02,50:14,move one organization from one isp to another isp this organization does not
9475,11-02,50:22,need to change the ip addresses the only thing it needs to do is the isp will
9476,11-02,50:28,simply add this address space in its own advertisement okay so that's a
9477,11-02,50:36,that's the thing and then you may also ask how can isp get a block of addresses
9478,11-02,50:42,the answer is that it will need to get this block of addresses from ica and n
9479,11-02,50:49,okay the internet corporation for assigned names and numbers uh this
9480,11-02,50:54,organization will allocated addresses manage the dns and
9481,11-02,50:59,assign the mean names uh result the disputes okay
9482,11-04,0:03,all right so the next thing we are going to introduce is the nut network address
9483,11-04,0:11,translation okay uh i think you probably heard about the local network or the
9484,11-04,0:19,um the internal network those kind of terms okay
9485,11-04,0:26,so um you can see here we have a router and
9486,11-04,0:32,we have the local area network okay this this loop network can be home network
9487,11-04,0:38,can be um campus network or any local area network so then the left part left part
9488,11-04,0:46,is the rest of the internet okay so network address translation
9489,11-04,0:52,basically means basically means we will use
9490,11-04,0:58,a 10 zero zeros slash 24 as the
9491,11-04,1:04,network address for a local area network okay for local area network
9492,11-04,1:12,and then all so you can see this clients are all assigned a ip address
9493,11-04,1:19,within this range okay within this range then when this
9494,11-04,1:25,when when the um datagrams for when a packet comes from one client
9495,11-04,1:32,and goes through the router okay then
9496,11-04,1:38,the packet will uh the source address was originally 1001 right so then when it goes out of
9497,11-04,1:46,the round trip we will change the source address into this one
9498,11-04,1:51,okay into a public address okay
9499,11-04,1:57,then um this this is this is like for example for your family okay for my
9500,11-04,2:04,family for example for my family san family okay um we may have a outside name like sun
9501,11-04,2:12,okay but uh within our family we may simply name
9502,11-04,2:18,ourselves one two three four like that okay and then for any other
9503,11-04,2:26,families they also have an outside name okay but within their family they only
9504,11-04,2:32,call themselves one two three four okay it's like that so in this case in
9505,11-04,2:38,this case we will say all the datagrams leaving the local network have the same
9506,11-04,2:45,single source net ip address which is this one and they have different source phone
9507,11-04,2:51,numbers okay the diagrams with source or definition in this network have this
9508,11-04,2:57,address for source and destination okay i know you are you still maybe you
9509,11-04,3:04,still feel like you you are confused okay
9510,11-04,3:09,um we will explain more okay don't worry so why do they use net you think about
9511,11-04,3:14,this you think about this okay one major reason is that we for ip
9512,11-04,3:21,address it is 32-bit okay ip address is 32-bit that means for
9513,11-04,3:29,this entire internet we have at most 2 to 32 ip addresses
9514,11-04,3:39,pay attention this is not a large number this is actually a small number compared
9515,11-04,3:44,to the number of devices we are having right now okay so we can run out ip addresses very
9516,11-04,3:51,soon okay then people begin to think how can we address this problem
9517,11-04,3:57,then they come out of one solution one solution is that how about for this
9518,11-04,4:04,entire local area network they just use one ip address okay it's like public ip
9519,11-04,4:11,address but internally they all use the ip address so ten zero
9520,11-04,4:17,zero something okay then to the outside this entire
9521,11-04,4:23,local area network uses only one ip address but actually they can they have
9522,11-04,4:28,a lot of devices okay then for other local networks for example there is one maybe for sex date
9523,11-04,4:36,okay and then for ucd we may have uh we may also use just one ip address okay
9524,11-04,4:42,but we may have thousands of machines within that so we may we may denote those machines also within
9525,11-04,4:50,1000 1000 slash something okay so basically
9526,11-04,4:56,10 0 0 is is like a special address that
9527,11-04,5:01,is used for net okay and then in this case in this case
9528,11-04,5:07,an entire local area network only need one ip address but but we can actually
9529,11-04,5:12,denote a lot of devices using the internal address okay so that is uh i would say one
9530,11-04,5:21,motivation for using net i hope you understand this it's like for my family
9531,11-04,5:27,to the outside we only use the sun as the the public name okay but inside
9532,11-04,5:33,we use one two three four and this one two three four can be reused by other families okay this name can be used by
9533,11-04,5:40,other families in this way we do not occupy a lot of family family names okay it's like that
9534,11-04,5:46,uh any questions
9535,11-04,5:52,okay so then now let's look at the motivation the motivation we have
9536,11-04,5:57,several more motivations and then we will discuss uh how that works okay
9537,11-04,6:03,so the motivation uh for net is that the local network uses just one ip address
9538,11-04,6:11,as far as outside world is concerned
9539,11-04,6:16,because of that okay uh we also we all we also want to
9540,11-04,6:21,do several things um several more things first thing the range our addresses
9541,11-04,6:28,is not needed for my sp because we just need one ip address
9542,11-04,6:34,for all the devices of course internally we still need to
9543,11-04,6:39,distinguish those devices but we can just use the internal address okay 1000 something and this internal address can
9544,11-04,6:47,be reused again and again for other local area networks okay
9545,11-04,6:52,and then another benefit is if we want to change the addresses or
9546,11-04,6:59,devices in the local network we do not need to notify the outside world
9547,11-04,7:05,that means if someday i'm not happy about the architecture for my network i
9548,11-04,7:10,can change the structure freely but i don't need to tell the outside network okay
9549,11-04,7:16,second benefit the third benefit we can also change the sp without changing the
9550,11-04,7:24,addresses of devices in the local area network case one day we are not happy with the
9551,11-04,7:29,internship we want to change to comcast is fine you don't need to change the addresses
9552,11-04,7:36,or devices in the local network although maybe the outside public ip address has
9553,11-04,7:42,been changed okay and the fourth benefit is about security the
9554,11-04,7:51,device is inside the local area network is not are not explicitly addressable or
9555,11-04,7:57,visible by the outside world okay so this is very good because the outside
9556,11-04,8:03,world cannot directly uh communicate or can cannot
9557,11-04,8:09,directly address uh device within the local area network so this is adding a
9558,11-04,8:16,layer of security actually okay so now let's look at how how uh is the
9559,11-04,8:24,net implemented okay um so basically the net router must do
9560,11-04,8:30,several things for the outgoing datagrams okay for the outgoing datagrams we need to replace the source
9561,11-04,8:38,ip address and source port number of every optical integram to the next ip
9562,11-04,8:46,address and a new phone number okay basically replacing the internal address
9563,11-04,8:53,internal port number with some out um uh
9564,11-04,8:59,external or we can see uh public ip address and a new phone number
9565,11-04,9:05,okay and then uh of course when the remote clients or servers respond to this
9566,11-04,9:12,package they will respond to the net ip address and the net port okay they will
9567,11-04,9:19,not respond to this one because they do not know this one okay and then because they are responding to
9568,11-04,9:27,this one then when it comes to when the response comes to the net router the net router
9569,11-04,9:33,needs to replace
9570,11-04,9:39,um the net address okay with the real ip address and port
9571,11-04,9:46,number okay so that is uh what the net router should do let's look i mean i mean you
9572,11-04,9:52,may be confused still no it doesn't matter let's look an example and you may feel uh clear okay
9573,11-04,9:59,so now we have the internal addresses of 100123 and 4.
9574,11-04,10:07,okay and then we have a public address which is 138 76 29 7.
9575,11-04,10:15,and this router need to have a translation table next translation table
9576,11-04,10:21,the next translation table has the one side and also the land side okay so now
9577,11-04,10:28,we assume there is a packet from 1001 okay ten zero zero one cents a
9578,11-04,10:36,datagram to this destination address this port number so you can see it is
9579,11-04,10:41,communicating with a web server and then we know the source address
9580,11-04,10:46,should be 1001 and source port is three through four five this is a real part that means
9581,11-04,10:53,this computer is actually listening to this port okay the definition we know is 128 119 40 186
9582,11-04,11:02,okay for destination port is 18. when this datagram come to the router goes
9583,11-04,11:10,through the router the router will need to replace the source
9584,11-04,11:16,address with the public address
9585,11-04,11:21,okay and the source port number is also replaced it's replaced with 5001
9586,11-04,11:29,okay and then
9587,11-04,11:35,and then pay attention the next translation table in the net transformation table the router also
9588,11-04,11:42,write down this pair write down this pair okay basically this support number of
9589,11-04,11:48,5001 here is referring to this
9590,11-04,11:55,ip address and port number pair okay five zero zero one is representing
9591,11-04,12:02,this 1001345 pair okay and then this packet is sent to the
9592,11-04,12:10,server the server will respond when the server respond you can see the server
9593,11-04,12:15,actually is bounded to you can see the source address is the
9594,11-04,12:20,original destination address this is source address softball number the server is replying to
9595,11-04,12:27,this public ip address and 5001 because this is what is provided to the
9596,11-04,12:35,server okay what was provided to the server that's why the server is replying to this one and again when this package third goes
9597,11-04,12:42,through the router the router will need to check this table and say okay this ip address and this
9598,11-04,12:51,port number 501 is actually matched to 1001345
9599,11-04,12:59,so this router will replace replace the destination address to the
9600,11-04,13:06,original address which is 1001345 okay and then now the packet can
9601,11-04,13:14,be sent to 1001.0045
9602,11-04,13:19,okay so here pay attention this five zero zero one is that's a real
9603,11-04,13:25,pot number is a is that a real port when i say real port i mean is there any
9604,11-04,13:32,machine listening to this port is there an emotion listening to 5001
9605,11-04,13:39,the answer is no 5001 is not a real post number because
9606,11-04,13:45,nobody is listening to this port instead this is more like a identifier
9607,11-04,13:53,an id to denote this address and sort and port pair okay but this 3345 is a
9608,11-04,14:03,real port because this 1001 machine is actually listening to this port okay
9609,11-04,14:08,foreign now if we have another machine
9610,11-04,14:14,10002 for example if it is sending out a packet also
9611,11-04,14:21,okay if we have at the land side if we have 1002
9612,11-04,14:28,okay this machine is sending out a datagram with the spot number one two three four
9613,11-04,14:33,and then when it goes through the one side we can use a different phone number to denote this pair
9614,11-04,14:40,okay and some of you may ask what if what if we have the same machine 10001
9615,11-04,14:50,but a different point number maybe four five six seven what if this is
9616,11-04,14:57,going through the router what can we do should we also give it a new phone number the answer is yes
9617,11-04,15:11,okay so in this case as long as there is something and as
9618,11-04,15:17,long as either the ip address or port number is different then we will need to
9619,11-04,15:22,assign a new phone number to that a new one-sided phone number so basically as i
9620,11-04,15:27,said this port number this port number is used to identify
9621,11-04,15:34,this pair okay not just the ip address or just the port number okay
9622,11-04,15:40,so now you can see um if we come back to review
9623,11-04,15:46,the motivation again the motivation is also the benefits okay so then we know okay
9624,11-04,15:54,for this entire local network we only need one ip address one ip address for
9625,11-04,16:00,all the devices okay and if we want to change the internal ip address we don't
9626,11-04,16:06,need to notify the upside world if we want to change the isp we don't need to
9627,11-04,16:12,change the structure or the addresses or the devices in the local area network because they are all using
9628,11-04,16:18,the internal address is 100 something okay um
9629,11-04,16:24,and also the device is inside the local area network are not explicitly
9630,11-04,16:30,addressable or visible by the outside world so now you can see oh yes we
9631,11-04,16:35,indeed have those benefits okay and some some of you may worry
9632,11-04,16:41,um so how many devices open numbers can
9633,11-04,16:46,be accommodate okay so you don't need to worry too much because for port number
9634,11-04,16:54,for post number is
9635,11-04,17:00,so that means that we can have as much the 2 to 16
9636,11-04,17:06,different pairs different ip address and the phone number pairs okay so
9637,11-04,17:14,um usually that is i would say that is sufficient for a regular size network
9638,11-04,17:21,okay um so that means we have sixty thousand
9639,11-04,17:26,sema we can have at most sixty thousand um around 60 000 simple continuous
9640,11-04,17:33,connections with a single landside address okay and pay attention this next
9641,11-04,17:39,translation table is actually um is actually dynamic okay which means
9642,11-04,17:45,for example when this first connection is done when the communication is down we can actually delete this one
9643,11-04,17:52,we can we will remove this pair from the net translation table okay and then uh
9644,11-04,17:59,this is a port number of five zero zero one can be reused by some other
9645,11-04,18:04,connections okay that's why usually it's sufficient because we can have
9646,11-04,18:10,um 2 to 16 simultaneous connections with one single landslide address okay and
9647,11-04,18:18,this is dynamically changing okay but that is also very it's also
9648,11-04,18:23,controversial because uh we know we assume the routers should only process
9649,11-04,18:29,up to layer 3 which means network layer which means we only deal with the ip
9650,11-04,18:35,addresses etc in the network layer okay we should not we should not address deal
9651,11-04,18:41,with the port numbers processes uh in the network layer right uh but you can
9652,11-04,18:49,see that actually while it's this end-to-end argument that is dealing with
9653,11-04,18:54,the processes okay why because net is dealing with the port number so we know paul numbers are
9654,11-04,19:01,associated with the processes okay so that's why net is actually uh
9655,11-04,19:06,controversial and people are thinking oh uh net is a solution a good solution to
9656,11-04,19:13,address shortage the ip address shortage but it's not the final eventual solution
9657,11-04,19:19,which we need to find out some other solutions that's why eventually the
9658,11-04,19:24,address shorter problem is actually sold by the ipv4 sorry iqb6 okay ipv6
9659,11-04,19:32,and another thing i want to quickly talk about is the icmp okay icmp is the full
9660,11-04,19:38,name is internet control message protocol so this is used by the house and routers to communicate network level
9661,11-04,19:46,information uh basically this is for arrow reporting for example if you have
9662,11-04,19:51,some hosts and reachable or some network unreachable some port and reachable okay
9663,11-04,19:57,so you may do error reporting using icmt and sometimes this can also be useful
9664,11-04,20:02,for echo equity requests or reply okay
9665,11-04,20:08,um so icmp is actually um it's not it's still it still belongs to
9666,11-04,20:15,network layer but it's also viewed as a layer above the ip there okay about the
9667,11-04,20:23,um ip layer so that means um the icmp messages are actually
9668,11-04,20:28,carried within the ip datagrams okay we will see that a lot later
9669,11-04,20:34,so for the icm key messages usually it contains uh the type the code and then
9670,11-04,20:42,uh also the a short description okay and also your list can hit that
9671,11-04,20:49,sorry not the crucial difference is actually the first eight bytes of iptogram causing the error so
9672,11-04,20:56,um here is uh the different type and code actually means different things so this is the short description for the
9673,11-04,21:03,type and code for example if you have type 3 code 0 that means the destination
9674,11-04,21:12,network is not reachable if you have a type 3 code 1 that means
9675,11-04,21:18,that that's neutral host is not reachable okay so i select that and
9676,11-04,21:23,um i think we use the one thing before for example if it's type 11 code 0 this means ttl
9677,11-04,21:32,expired okay if you still remember the trace route before we talk about trace
9678,11-04,21:39,routes before right so how is trace router is done we we remember we know
9679,11-04,21:44,um usually this client will need to send for example uh one package of course
9680,11-04,21:54,usually each time we send out three for three probes okay but for all those three packets they have the ttl equal to
9681,11-04,22:00,one okay so ttl was set to one and when they arrive at the router we will need
9682,11-04,22:07,to minus one on the current gtl so 1 minus one ttl now because it becomes
9683,11-04,22:12,zero okay so when it becomes zero when it becomes zero we know the ttl expires
9684,11-04,22:20,okay when it expires then this router needs to send back an icmp message to
9685,11-04,22:27,the source okay with type 11 code 0. so
9686,11-04,22:32,type 11 equals zero this tti expire then after this response is sent to the
9687,11-04,22:40,client the source the source will write down this message okay and then it will
9688,11-04,22:46,know okay the information about the first voucher the second time okay we will send out
9689,11-04,22:53,ttl equal to true okay a second set with three probes this time the ttl is set to
9690,11-04,22:59,two so two then that this means the practice can travel two hops so whether
9691,11-04,23:06,it arrived at um the first round for ttl becomes one when to arrive that here ttl becomes two
9692,11-04,23:14,sorry zero y minus one equal to zero and then
9693,11-04,23:20,ttl expires we will need to send back to the source send send the this error
9694,11-04,23:27,message to the source with type 11 code 0 okay at the same time this router will
9695,11-04,23:34,also need to send back its own information so then with this when this message is received by the source the
9696,11-04,23:40,source will record the name of the router and the ip address etc okay
9697,11-04,23:47,so we will continue until
9698,11-04,23:52,um we reach the destination okay so
9699,11-04,23:57,then you can see in this process actually the trace around function is implemented with icmp
9700,11-04,24:07,messages okay is implemented with icmp messages and the the reason that choice route can
9701,11-04,24:15,work is because every time when the ttl expires the icm icmp message with type
9702,11-04,24:23,11 code 0 will be sent back to the source together with the router's
9703,11-04,24:28,information okay so for the icmp
9704,11-04,24:35,um this is uh the general information so we have first an icmp message and then we have the header then this entire
9705,11-04,24:42,thing is actually uh encapsulated here in the datagram and with the ip header
9706,11-04,24:51,okay ip header obviously this is actually a network layer header and then we have the datagram and then here is
9707,11-04,24:59,actually right this should be link layer okay and then we have nuclear headers like that okay
9708,11-04,25:06,um so you can see here in in this example
9709,11-04,25:11,icmp is like the tcp or udp right so you have the payload and then you have tcp
9710,11-04,25:18,udp header and then it is in capital state encapsulated within the datagram
9711,11-04,25:24,and then you need to add the network layer header and then you add the link layer header it's like that okay
9712,11-04,25:31,for net although it is a very good way to use um so the ip shorted problem it
9713,11-04,25:38,is not the final solution as we mentioned because we suppose the router only deal with the network layer up to
9714,11-04,25:45,the network layer right but net is dealing with the port numbers port number belongs to process okay which it
9715,11-04,25:53,belongs further belongs to the transport layer so that's why we say oh okay net
9716,11-04,25:59,is not the final solution then what is the final solution so the final solution is ipv6 so what is
9717,11-04,26:09,ipv6 basically originally ipv4 in version 4 we have 32 bits as the ip
9718,11-04,26:16,address now we want to make this much longer okay we want to make this much longer we
9719,11-04,26:24,want to make this 128 bits the ip address we can make it 128 bits
9720,11-04,26:32,then now we can accommodate 2 to 128 devices at least right we can that means
9721,11-04,26:39,we can have we can have that many ip addresses for the entire world okay of
9722,11-04,26:46,course there are some other motivations for ipv6 for example uh the header
9723,11-04,26:51,format hubspeed processing or forwarding so basically we can add some information
9724,11-04,26:57,in the header to help speed up this the processing okay
9725,11-04,27:04,um and also uh the header uh changes are made to facilitate quality of uh service
9726,11-04,27:12,okay that is another motivation um for the datagram format pay attention
9727,11-04,27:20,for ipv6 for ipv4 we can still remember how many bits we um
9728,11-04,27:27,how many bits we had so sorry how many bytes we had for the entire header so
9729,11-04,27:34,generally it is uh 20 bytes for the entire handle ipv4 right so 20 plus
9730,11-04,27:41,bytes as the header but for ipv6 um the the header lens is about 40 bytes
9731,11-04,27:50,okay it's much longer one of the major reasons because the ip address becomes
9732,11-04,27:56,longer so you can imagine original source address destination address in total is 64 bits now it's a 128 times 2
9733,11-04,28:05,which is a 256 bits okay and also for ipv6 we do not allow any fragmentation
9734,11-04,28:13,no fragmentation is allowed if you still remember
9735,11-04,28:18,we may learn about ipv4 one major component is actually fragmentation
9736,11-04,28:25,fragmentation means as we said we have network links right so some links are
9737,11-04,28:33,um some links have a bigger capacity or bigger bandwidth something has a smaller
9738,11-04,28:39,bandwidth then in this case uh and and they can accommodate and
9739,11-04,28:46,comment the different the size of the package measurement maximum segment size
9740,11-04,28:52,okay so then when a bigger packet comes to a narrow
9741,11-04,28:58,link we how to break this bigger package into smaller pieces that is called
9742,11-04,29:03,fragmentation but in ipv6 we do not allow fragmentation that's the that is
9743,11-04,29:09,something you need to pay attention okay so then some of you may ask oh uh if we
9744,11-04,29:17,do not allow fragmentation then what if a big packet comes to
9745,11-04,29:24,a narrow link which can accommodate only small packets
9746,11-04,29:29,what can we do so in this case we need to modify the icmp protocol
9747,11-04,29:38,correspondingly okay in icmp protocol we need to add one more type
9748,11-04,29:45,okay with one more code saying oh this packet is too big
9749,11-04,29:50,okay now in this case if a pack is too big then this package will this uh um
9750,11-04,29:56,package will be dropped and the pat the error message will be sent back to the source and then the source will based on
9751,11-04,30:03,that will adjust the size of this packing and send a smaller one okay so that's how it works
9752,11-04,30:11,um for ipv6 datagram format let's look at this together so basically each row is
9753,11-04,30:19,32 bits which is four bytes
9754,11-04,30:25,okay um and you can see
9755,11-04,30:35,so this this will take four rows
9756,11-04,30:41,this will take four rows
9757,11-04,30:47,okay now you can see firstly we have the version number this shows v6 or v4 okay
9758,11-04,30:55,now of course here it will be v4 v6 sorry and then we also have priority
9759,11-04,31:01,priorities used to identify um uh priority among the datagrams in
9760,11-04,31:08,the flow okay and we will also have the flow label although the concept of flow
9761,11-04,31:13,is not well defined yet okay and then we will have the payload lens okay this is
9762,11-04,31:22,the length of the payload pay attention which means the data the length of the data then this is the
9763,11-04,31:30,next header next header basically means uh the upper layer protocol for the data
9764,11-04,31:36,for example is our player tcp or udp okay or even maybe icmp
9765,11-04,31:43,and this is the hop limit hop limit is similar to ttl and then we will have four rows of
9766,11-04,31:51,source address which is which has a 128 bits and four rows of uh destination
9767,11-04,31:58,address okay so you can say in total we have one two three sorry one two plus
9768,11-04,32:06,eight so in total we have 10 rows
9769,11-04,32:11,and we know each row is four bytes
9770,11-04,32:18,so that is in total 40 bytes of data okay for device of data or 40
9771,11-04,32:26,bytes of hydro we should say okay so now pay attention let's review all the
9772,11-04,32:31,headers we have learned okay so for udp we know the header length is uh it buys
9773,11-04,32:38,for tcp the headlands is about 20 bytes or 20 plus bytes
9774,11-04,32:44,ip windows about 20 bytes okay ipv4 ipv6
9775,11-04,32:50,is about 4 device okay and there are some other changes from
9776,11-04,32:57,ipv4 for example checksum is removed entirely to reduce the processing time
9777,11-04,33:04,at each hop because we know for udp and tcp they
9778,11-04,33:09,have the checksum already so now we remove checksum at the network layer and
9779,11-04,33:14,options are allowed but it is outside of the header it is indicated by the nest
9780,11-04,33:21,header field so if we have in the next header field if we have an indicator see
9781,11-04,33:27,there is option then this option will will not be included in within the
9782,11-04,33:33,header okay um and as i said as i said because we have a new version of i ip then we also
9783,11-04,33:42,need a new version of icmp okay um so the additional message type may be
9784,11-04,33:50,added such as package to big okay so those are uh the major changes
9785,11-04,33:57,from ipv4 to v6 um but they're when we upgrade to ipv6
9786,11-04,34:04,there is a problem we need to we need to address so the problem is basically me
9787,11-04,34:10,is basically uh that we cannot we cannot upgrade all the routers
9788,11-04,34:17,simultaneously that means we cannot say oh okay today
9789,11-04,34:23,i'm going to shut down the entire internet and i will upgrade the router all
9790,11-04,34:30,together can we do that we cannot so for the current internet we cannot afford
9791,11-04,34:37,such kind of flag dates okay then the problem becomes
9792,11-04,34:43,um how could this network operate with a mixed ipv4 and v6 launchers so some
9793,11-04,34:49,routers are able to read ipv4 packets some are
9794,11-04,34:54,able to read ipvc vouchers so what can we do okay if a packet is traveling in
9795,11-04,35:02,such kind of mixed routers then uh what can i do okay so then people began to
9796,11-04,35:07,think um a very obviously very smart way okay it's called tunneling tunneling
9797,11-04,35:13,basically means uh the ipv6 datagram is carried as the payload in the ipv4
9798,11-04,35:24,datagram among ipv4 routers okay so
9799,11-04,35:30,usually usually for example ipv6 vouchers uh can still read itv4 packets
9800,11-04,35:39,so um because ipv6 routers are more advanced
9801,11-04,35:45,right so we can we can say okay you can backwardly accomplish those
9802,11-04,35:51,um order format of packets but it's hard it's very hard for ipv4 routers to
9803,11-04,35:59,understand the new package the ipv6 package okay so then in this case as i
9804,11-04,36:05,said what we do is we basically incorporate
9805,11-04,36:11,in we basically reported this this is this is actually our ipv6
9806,11-04,36:21,so this is the ipv6 datagram it is put into an ipv4 datagram to view it as the
9807,11-04,36:30,payload ipv4 payload okay then in addition to that we are
9808,11-04,36:35,adding the ipv4 headers and ipv4 source address destination address then this
9809,11-04,36:42,ipv6 datagram is able to travel through
9810,11-04,36:48,the old routers okay um so of course you can see in the ipv6
9811,11-04,36:55,because this is this ipv6 instagram is a complete dead form so you still have
9812,11-04,37:01,ipv6 header fails uh the source station address and also the udptcp payload
9813,11-04,37:07,within this ipv6 datagram okay any questions so far
9814,11-04,37:16,all right so let's look at this uh this view okay this is the tunneling
9815,11-04,37:23,and we have those uh new routers ipv6 launchers and we also have ipv4
9816,11-04,37:32,routers okay as we said if we have for example
9817,11-04,37:38,um so you can you can view this as a tunnel okay you you can view those ipv4
9818,11-04,37:44,routers as a time tunnel connecting those ipv6 launchers then if we have a
9819,11-04,37:51,datagram from a for example the source is a destination is f
9820,11-04,37:56,uh it is from one v6 router to another v6 router
9821,11-04,38:02,okay so then we it might is traveling from a to b we know it is still a v6 uh
9822,11-04,38:09,datagram then when it is traveling to
9823,11-04,38:14,um to router c okay we know router c is the v4 router so then we have to you can see
9824,11-04,38:22,we have to wrap this ipv6 datagram with a v4 uh headers okay with the v4
9825,11-04,38:32,header so we basically added the source as b destination as e okay and then
9826,11-04,38:40,this becomes a v4 package so it can travel through c and d finally it will
9827,11-04,38:46,arrive at e okay when it arrived at e then e can remove the v4 header and take
9828,11-04,38:53,out the v6 datagram and then it can continue travel to other v6
9829,11-04,38:59,um routers okay so this is the entire process
9830,11-07,0:09,so the next thing we are going to discuss is the routing algorithm so firstly let's review let's and this
9831,11-07,0:17,part is very important okay routine algorithm is very important and it will definitely appear on the test
9832,11-07,0:25,um let's review the routing and the forwarding again okay we learned that
9833,11-07,0:31,each router will have a local forwarding table and if you record the router's structure
9834,11-07,0:39,okay we learned the router has um the routine processor the switching
9835,11-07,0:46,fabric the input ports and outputs so the routine processor is for running
9836,11-07,0:53,the routing algorithm and then it will generate a local forwarding table so those this little
9837,11-07,1:01,conference table will be executed by the switching fabric okay
9838,11-07,1:08,so pay attention this local phone table is actually generated by running their organism i will show you how to do that
9839,11-07,1:15,okay and we also learned um we also learned for example we only
9840,11-07,1:21,need to check the destination address as the header and then we can decide uh
9841,11-07,1:26,which output link to forward okay so it's it's like that if you look at the router sorry if you
9842,11-07,1:34,look at the network the network actually can be viewed as a graph okay in this graph each node
9843,11-07,1:45,okay or each router is a node and then the link between them is an edge okay so
9844,11-07,1:51,this this will become uh the graph can be represented mathematically it can be
9845,11-07,1:57,represented as g equal to a set of n and a set of e so n is a set of routers so
9846,11-07,2:05,these are all the launchers and e is a set of links so for example the link between you and the way is this one
9847,11-07,2:13,the link between you and you and x so please remember how we represent a
9848,11-07,2:19,link we use this u we to represent a link between you and
9849,11-07,2:26,we okay you know in final exam some uh one question requires students to write
9850,11-07,2:31,down some links and some students just say way x w they do not they do not use
9851,11-07,2:38,this kind of method to represent them the answer is wrong okay
9852,11-07,2:44,so then the wrong team the routine problem is basically a shortest path
9853,11-07,2:51,problem okay so for example if this is the sauce and if this is the destination then what
9854,11-07,2:59,is the shortest path from u to z okay so then these uh numbers 2 3 1 etc
9855,11-07,3:07,they can be viewed as the cost so what is the cost of the cost can be for example
9856,11-07,3:14,um the distance okay or maybe uh the time spent on this link okay so you can
9857,11-07,3:22,view this anyway our goal is that we want to find out the shortest path
9858,11-07,3:29,between u and z so then we can save time we can save efforts okay that is the the
9859,11-07,3:37,essential goal for routine algorithm okay so now you can see we can represent the
9860,11-07,3:44,cost c and the cost for the link x x prime as c x x prime
9861,11-07,3:52,so for example uh cwdc wz the link
9862,11-07,3:59,for between w and z has a cost of five okay
9863,11-07,4:05,um and we can also calculate the cost of parts
9864,11-07,4:10,the cost of path is um is for example if we have x 1 x 2 x 3 to
9865,11-07,4:18,xp then the causal part is the cost between x1 and x2 plus the cost between
9866,11-07,4:24,x2 and x3 and you continue until we finish uh all the notes okay for example
9867,11-07,4:32,if we say uh the cost of u
9868,11-07,4:37,x y z okay because for this path is one
9869,11-07,4:42,plus one plus two equal to four okay so that's how we calculate the cost of path
9870,11-07,4:49,um then the key question for routine algorithm becomes what is the least cost path
9871,11-07,4:56,between you and the least cause the path between u and z okay as i said the cost
9872,11-07,5:04,can be distance uh can be time okay so then
9873,11-07,5:09,um if this is distance then we can see this is the least the shortest path between um z right
9874,11-07,5:17,the purpose is to find out the least cost path okay
9875,11-07,5:25,so there are two types of uh algorithm generally
9876,11-07,5:30,um i shouldn't say two type maybe we can categorize in different uh aspects for
9877,11-07,5:36,example if we consider uh if the outcome is global algorithm or decentralized
9878,11-07,5:44,algorithm okay we will say for global algorithm that means all the routers
9879,11-07,5:51,have the complete topology of the entire network and they all know
9880,11-07,5:58,that link cost information for each link okay so that is the link stage algorithm
9881,11-07,6:05,so basically in this in this uh algorithm as i said every right i every
9882,11-07,6:11,router will know uh the information for the entire network
9883,11-07,6:17,okay this is global and another type is
9884,11-07,6:22,decentralized algorithm decentralized algorithm the routers only know the
9885,11-07,6:30,physically connected neighbors and also the link cost to neighbors
9886,11-07,6:36,okay um for example if i'm a router i only know oh okay i have three neighbors so
9887,11-07,6:44,if i go to neighbor one the cost is a 10 go to neighbor 2 the cost is five if i
9888,11-07,6:50,go to neighbor 3 the cost is uh 12 maybe okay so all right only know the
9889,11-07,6:56,information about my neighbors i do not care about the other routers this is
9890,11-07,7:02,very very different from the global algorithm which in which the routers basically know all the information about
9891,11-07,7:10,um the entire network okay um and then
9892,11-07,7:16,basically for this kind of action we're not we need to do iterative
9893,11-07,7:22,um iterative process of computer computation and then we need to exchange
9894,11-07,7:27,the information with the neighbors the neighbors will do the calculation based
9895,11-07,7:32,on the information provided by neighbors and i believe the neighbors again so
9896,11-07,7:38,it's like that until finally we reach some kind of equilibrium equilibrium
9897,11-07,7:43,okay or some kind of balance uh so one of the example is the distance
9898,11-07,7:48,vector algorithm okay so this is a uh the characterization if we're we are
9899,11-07,7:55,categorized in um global or decentralized if we are
9900,11-07,8:00,categorized um in terms of static or dynamic then uh
9901,11-07,8:06,one type of one type of algorithm is the static algorithm in which the routers
9902,11-07,8:12,change the robs change slowly over time okay but for the dynamic once the rocks
9903,11-07,8:20,may change more quickly so we may do periodic update in response to the cost
9904,11-07,8:26,changes okay so those are the different types
9905,11-07,8:32,um so next let's look at the link state algorithm again we may not be able to finish this but let's uh at least maybe
9906,11-07,8:41,try so for link state algorithm
9907,11-07,8:47,um it's actually um built on top of the diecast algorithm
9908,11-07,8:53,i think you have all learned like stress algorithm in 130 probably okay
9909,11-07,9:00,um in directors we know we we firstly have the network topology and the link
9910,11-07,9:06,costs are known to all the nodes okay uh how how can we make the link cost known
9911,11-07,9:12,to everybody we do the broadcasting right next day broadcasting all the notes have the same information
9912,11-07,9:18,uh and then based on those information we compute the least cost path from one
9913,11-07,9:24,node to the to all the other nodes in that constructs algorithm uh human 30
9914,11-07,9:32,probably you have learned uh the calculation or shortest path from one
9915,11-07,9:38,note from source to destination right so but in next state housing our goal is
9916,11-07,9:47,to calculate the shortest path or the least cost path from the source
9917,11-07,9:53,to every other node that means we need to calculate the shortest path between u
9918,11-07,10:00,and away between u and x between u and w between u and y between u and z so from the
9919,11-07,10:08,source to every other node we need to know the shortest path because only
9920,11-07,10:15,um only when we know the short part from or the least cost part from the source
9921,11-07,10:21,to every other node then we will know how to do the forwarding when we see a
9922,11-07,10:27,destination address okay so for example if we know this is the shortest path to w
9923,11-07,10:33,then um if we know the destination node is w then we can forward this to uh to the uv
9924,11-07,10:41,link okay so it's like that we will learn more uh but for now we need to know okay we are calculating the least
9925,11-07,10:47,cost path from one node the source node to all the other nodes okay all the
9926,11-07,10:54,other nodes um and with me um do this alternatively after k
9927,11-07,11:02,iterations we know the least cost path to k destinations okay so here we need
9928,11-07,11:09,to firstly know some of the notations for example 6x and y means the link cost from node x
9929,11-07,11:16,to node to y and if they are not direct neighbors if x and y are not iraq
9930,11-07,11:23,neighbors then this number will become infinity okay
9931,11-07,11:30,d y is the current value of the cost of path from source to destination weight
9932,11-07,11:39,okay for example for example dw
9933,11-07,11:46,if we know this this is the path we are looking at then dw will be 5 because that is the
9934,11-07,11:54,cost from the source 2 w so it's 2 plus 3 equal to 5. select that okay
9935,11-07,12:03,um and then pv is the predecessor note along the path from source to weight
9936,11-07,12:11,again if we are looking at you we w then
9937,11-07,12:18,pw on this path pw equals to we and pv
9938,11-07,12:24,equals to you okay again we are looking at only this path we are not looking at
9939,11-07,12:30,others of course if you are looking at others for example u x y z then pz will
9940,11-07,12:37,become y p y become x p x become u so it's predecessor okay
9941,11-07,12:44,and m prime is the set of nodes whose least cost path definitely not okay so
9942,11-07,12:52,basically this is a set a set of nodes if we or for example if
9943,11-07,12:57,we already find out the least cost path between you and the way okay so then we
9944,11-07,13:04,will add we we will put way to uh this uh m prime
9945,11-07,13:10,later if we find out the least cost part from uh source to w then we will change
9946,11-07,13:18,this after this and put w into this set okay so our goal as we said our goal is
9947,11-07,13:27,to compute the least cost path from the source node to every other node okay
9948,11-07,13:35,that means our goal is to finally put all the other nodes into this set of m
9949,11-07,13:41,prime okay any questions so far
9950,11-07,13:48,i know this is a lot of information uh but gradually you will learn how to
9951,11-07,13:54,use those okay basically we are i'm providing four notations uh the cost the
9952,11-07,14:00,current value of the past cost the predecessor and the set of nodes okay
9953,11-07,14:07,so this is a direct stress algorithm all right so then now let's look at the
9954,11-07,14:13,dark stress algorithm of so firstly we need to do initialization
9955,11-07,14:19,in the initialization for the m prime we put u here only the source only the
9956,11-07,14:26,source as i said our goal is to put all the other nodes into m prime okay now it has only the sauce because we know the
9957,11-07,14:33,shortest path from sauce to the source okay and for all the other nodes if the v or
9958,11-07,14:43,the other notes away if v is adjacent to you okay then dv equals to the cost between
9959,11-07,14:51,u and away that means if you and v for all the other nodes if you and we are direct
9960,11-07,14:59,neighbors then we basically uh give the current plus value as the the link value
9961,11-07,15:06,the link cost okay otherwise then
9962,11-07,15:11,um it is infinity okay so for example
9963,11-07,15:17,um it's basically the initialization if for example if for you and away are the right neighbors then we can see dv when
9964,11-07,15:24,we do the initialization dv equals to see you wait which is true okay but then
9965,11-07,15:32,dj will equal to c u z which is actually infinity so that's how we do the
9966,11-07,15:39,initialization okay and then later we will find we will
9967,11-07,15:45,enter a loop okay in this loop we will find out find the w not in the m prime
9968,11-07,15:51,such that the dw is a minimum okay if we find out dw is a minimum then
9969,11-07,15:59,we add w to m prime okay in this case
9970,11-07,16:04,because w is ended to added to m prime then all the other nodes will try to go
9971,11-07,16:11,through w okay they will need to update their own d-way
9972,11-07,16:16,by considering going through w if they go through w then it's basically
9973,11-07,16:23,uh the total cost will be currently w's cost
9974,11-07,16:29,because dw means the constitute from w to u right
9975,11-07,16:34,and then plus the cost between you and the weight so this is the total cost
9976,11-07,16:41,so it's like if my neighbor told me say hey i have the shortest path to go
9977,11-07,16:48,to new york okay and you need to take only two days to go to new york
9978,11-07,16:54,then i will update my own time i will say okay if we if i go through you and
9979,11-07,17:03,you only need to take two days to new york then i know between me and my
9980,11-07,17:09,neighbor i need to take one more day okay then two days plus one more day i
9981,11-07,17:15,know this is three days okay if i go through w go through my neighbor it is three days then i'll
9982,11-07,17:23,compare this three days with my original time originally if i do not go through w
9983,11-07,17:29,my the time i used to to travel to new york is probably seven days and now i
9984,11-07,17:35,only need three days of course i will choose the minimal one okay so basically
9985,11-07,17:40,you can say that all the notes will update there their value
9986,11-07,17:48,by going through w okay and if we get a new cost
9987,11-07,17:53,okay then we will find the shortest path now okay for example for me i i only
9988,11-07,17:59,need three days okay then i will need to update this to three days okay and then i will need
9989,11-07,18:06,to update my path my path originally is probably going through another neighbor but now i need to go through w
9990,11-07,18:13,okay so that is my shortest path now and then uh later because this node way
9991,11-07,18:22,um we can find out the shortest path then we will add way into m prime
9992,11-07,18:28,okay so it's like that so we will continue but after we add a way into m
9993,11-07,18:35,prime than another note we are update again based on
9994,11-07,18:40,the value provided by weight okay then everybody will say oh now
9995,11-07,18:46,let's try a new neighbor wait because this week is this is a has a shortest
9996,11-07,18:51,path so then everybody try away and then try to find out the shorty path again so
9997,11-07,18:58,we will do this until all the nodes are in the m prime
9998,11-07,19:04,okay are in the m prime uh i know this is probably very overwhelming for so far
9999,11-07,19:11,um so diagram algorithm is able to compete compute the least cost path from
10000,11-07,19:19,one node to another node okay here following state album we want to calculate the least cost path from one
10001,11-07,19:26,node to all the other nodes okay so basically for example if you are
10002,11-07,19:31,looking at this this example here we have source node and then we will view every other node
10003,11-07,19:39,at the destination node and then we calculate the shot the least cost path
10004,11-07,19:44,from the source node to every other node for example we may do
10005,11-07,19:51,um we want to calculate the list called path from u to x from u to w from u to v
10006,11-07,19:57,u to y u to z okay um and uh again let me review the notations
10007,11-07,20:04,again so for for example c x y is the link cost from node x node y
10008,11-07,20:11,if they are direct neighbors for example uh c x y
10009,11-07,20:16,okay if they are direct neighbors okay their cost is uh just the link cost
10010,11-07,20:22,between them for example in this example is 7 for c x y right but if they are not
10011,11-07,20:29,derivative for example c u z for cuc because u and z are not your
10012,11-07,20:36,enabled so we cannot provide a link cost to it then the link cost we will use
10013,11-07,20:41,during initialization is the infinity okay and then d way is the current value of
10014,11-07,20:48,the cost of path from source to destination
10015,11-07,20:53,so for example if we are looking at u x y you u x y okay then d y equal to 5 plus
10016,11-07,21:07,7 equals to twelve so that is a uh the value of cost for path okay then pv is
10017,11-07,21:17,the predecessor node along the path from source to a node weight okay for example
10018,11-07,21:26,for example um on this path u x y we may have p y at
10019,11-07,21:34,equal to x because y's predecessor is x okay and then p x equals to you all
10020,11-07,21:42,right um then m prime is the set of nodes whose least cost path uh is definitely
10021,11-07,21:49,no as we said our goal is to put every node into m prime that means our goal is
10022,11-07,21:57,to calculate the least cost path from the source to every other node okay
10023,11-07,22:05,so now to write our algorithm we need to uh we first list all those steps for the
10024,11-07,22:13,first step for the first step okay we will need to initialize uh some of the
10025,11-07,22:19,values for example we need to look at the d's okay that means
10026,11-07,22:26,uh the cost of path from the source to
10027,11-07,22:31,way to w to x to y to z okay of course depending on different paths this values
10028,11-07,22:37,may difference may be different okay um and then we will look at the piece
10029,11-07,22:43,okay the predecessors for every node okay later we will use those
10030,11-07,22:49,predecessors um to draw the list cost path tree okay
10031,11-07,22:55,for now let's do the initialization for at the very beginning we can put u into
10032,11-07,23:01,m prime why because as we said as we said
10033,11-07,23:08,um we uh m prime means the set of nodes that we have already found out the least
10034,11-07,23:14,cost path so from u to you our course we know from itself to itself okay uh we
10035,11-07,23:21,know uh the shortest path is is going through itself right so that's why we
10036,11-07,23:26,put you into m prime and then we need to do initialization of the d's okay the
10037,11-07,23:32,distances so for example is gonna be from u to we and then you
10038,11-07,23:42,can say from you to way this is actually um seven so that's why you can see this
10039,11-07,23:48,is the seven and the predecessor away is actually you
10040,11-07,23:56,okay that's way so then we look at w because
10041,11-07,24:01,we are in the first step the very first step is just initialize this we just look at uh look at uh the uh direct
10042,11-07,24:09,neighbors not direct we look at each node and see if there are different numbers with the source okay and then we
10043,11-07,24:16,look at w for w we know between u and w the cos is third and we know now the
10044,11-07,24:24,predecessor is u predecessor for w p w is actually u
10045,11-07,24:30,same thing for x for x we know u x equal to 5 and the predecessor of x is also u
10046,11-07,24:39,okay the half of the y u and y are not direct neighbors
10047,11-07,24:46,okay so that's why we cannot put any value there we can just put infinity okay we cannot put um
10048,11-07,24:53,a specific number there okay the same thing for z z and u are not
10049,11-07,25:00,your neighbors so their cost the cost for the path of use is infinity okay so
10050,11-07,25:08,this is what we know currently and that among those values
10051,11-07,25:14,among those values among all those nodes v w x y z currently what is the shortest path to
10052,11-07,25:22,reaching you and you can easily know okay w has the
10053,11-07,25:27,smallest value right so w has the least cost path to you
10054,11-07,25:34,okay so now we found out the list cost path from w to u then we choose w and we
10055,11-07,25:42,put w here okay and then
10056,11-07,25:48,because w is currently the least cost path to you everybody else will will try
10057,11-07,25:54,w so w is very proud wc hey i have the best pass so far okay
10058,11-07,26:01,if you want to reach to the destination sorry it reach to the source u okay go
10059,11-07,26:07,try me try me i may give you a surprise okay so it's like that and then
10060,11-07,26:12,everybody try w we will try w we try w
10061,11-07,26:19,so when we go through w we use w's original value it is which is a third
10062,11-07,26:24,okay plus the cost of three so three plus three is six it's a smaller than
10063,11-07,26:32,the original value of seven that's why we put 6 here and now we know that which
10064,11-07,26:37,predecessor is not u anymore it is actually w
10065,11-07,26:42,so we put a w here okay and then w do not need to try itself
10066,11-07,26:50,again we skip w the x will try w
10067,11-07,26:55,so x try w again we use currently w we know dw is three okay so three plus four
10068,11-07,27:03,is seven seven is not better than five that's why x will see that's not a
10069,11-07,27:09,better solution so i'll keep five e okay and then y will try w why try w again
10070,11-07,27:17,what eight plus three is eleven eleven is actually better than infinity so
10071,11-07,27:26,that's why we put 11 here and then the predecessor of y is
10072,11-07,27:31,actually w so we put w here and how about z if they want to try
10073,11-07,27:39,um w we know there is no direct link between w and z so it doesn't improve we
10074,11-07,27:47,just put infinity there still so currently among the remaining notes we know now x
10075,11-07,27:57,x has the shortest part the least cost path to you right so
10076,11-07,28:06,and then we can put x into m prime because we find out the least cost path
10077,11-07,28:14,from x to you okay the x is now very proud x will see
10078,11-07,28:20,hey everybody try me please you may find some surprise okay then we will try x
10079,11-07,28:28,pay attention we has no direct link with acts so that's why we will just do
10080,11-07,28:37,6w still and we skip w we skip x then y will try
10081,11-07,28:43,x so now we know dx equals to five okay y
10082,11-07,28:51,prime x and then you can see five plus seven
10083,11-07,28:58,equals to 12. 12 is not better than
10084,11-07,29:03,11. so that's why why we all just give up and still keep 11 w how about z z try
10085,11-07,29:12,x 0 x is five plus nine equals to 14 so we say oh this is better
10086,11-07,29:19,than infinity so now this predecessor is a x
10087,11-07,29:26,okay because it's going through x and now among all of these we say okay
10088,11-07,29:32,now we know the this course part from we to u
10089,11-07,29:38,so then we put u w x we put a v here
10090,11-07,29:44,okay then we know now dv equals to 6.
10091,11-07,29:51,okay and then everybody try way so we have
10092,11-07,29:57,only y and z remaining why they are trying v then four plus six is ten ten is
10093,11-07,30:05,actually better than 11 so this is a 10 and the predecessor we know this is away
10094,11-07,30:12,so pay special attention here many students made a mistake so many students
10095,11-07,30:17,will they forgot we put a d y equal to 6 here that what they will do is oh why
10096,11-07,30:24,try v we had seven seven plus four is eleven it's not better
10097,11-07,30:30,that is absolutely wrong that is wrong because you just you you ignore the
10098,11-07,30:36,other past other parts you just directly look at the direct link between you and
10099,11-07,30:42,me that is actually wrong because by um through our previous steps we have
10100,11-07,30:49,learned the the shortest path or the least cost path for we actually has a
10101,11-07,30:56,cost of six that's what we have learned that's the one you have to use can we do
10102,11-07,31:01,further calculation you cannot use seven no pay attention to that many students
10103,11-07,31:06,made mistakes um here okay and then see we are also
10104,11-07,31:11,trying it so if they try v then you say
10105,11-07,31:16,they have did not have any direct link so that's why they will still do 14 and
10106,11-07,31:22,x then among y and z we know we have to choose y
10107,11-07,31:28,so u w x v and y now you know why we
10108,11-07,31:34,have already find out the least cost path for between uh between u and y okay then everybody
10109,11-07,31:43,try y z is the only the remaining one so then
10110,11-07,31:49,we know d y now equal to 10 okay you don't want to do calculation on your own
10111,11-07,31:56,again uh for d y you can directly take uh the value from what you have
10112,11-07,32:01,calculated before okay so then d y equal to 10 they say that now equals to ten
10113,11-07,32:09,plus two okay equals 12 12 is better so then the predecessor for z this time
10114,11-07,32:18,is y okay because this is the only one so we have
10115,11-07,32:23,nothing else to choose we just put z here
10116,11-07,32:29,now we have put every node into m prime that's how we fill this table and then
10117,11-07,32:37,you may ask what do we do with this table okay what do we do with this table very interestingly okay i just
10118,11-07,32:47,you can see uh it is displaying what we have discussed
10119,11-07,32:53,okay okay so the next thing we we are going
10120,11-07,33:00,to do is to this to construct to construct the least cost path tree
10121,11-07,33:06,okay so let me
10122,11-07,33:12,so just clean this up okay but i i'll keep those d d x d v d y etc there okay
10123,11-07,33:22,so then now uh we know okay so now we will connect we want to
10124,11-07,33:29,construct the list called the shortest path tree or the list cost path tree okay so what we should do now is we
10125,11-07,33:37,connect every node with its predecessor so for example you can see uh for z we
10126,11-07,33:44,know the predecessor is actually y then we will connect z and y here okay and
10127,11-07,33:51,then for y the predecessor is way so we connect to y and we
10128,11-07,33:56,okay then for x the predecessor is actually u if you look at the table so x
10129,11-07,34:02,and u and for w the predecessor is u
10130,11-07,34:08,okay and then the way predecessor is w
10131,11-07,34:14,now you can see what we i have drawn here is actually the least cost path tree or
10132,11-07,34:22,the shortest path trick okay so between u and x
10133,11-07,34:27,between unw so all these ones so is the discourse pathway so what does
10134,11-07,34:35,this mean this means if you want to reach to any node you just follow this
10135,11-07,34:41,list cost pathway for example if you want to reach x then follow ux
10136,11-07,34:48,if you want to reach w then follow uw if you want to reach way then do u w and
10137,11-07,34:55,then wv if you want to reach y then follow uw wa
10138,11-07,35:01,and v y if you want to reach z the same thing you do uw wa
10139,11-07,35:07,v y and then y z okay so that is how you follow uh the
10140,11-07,35:15,least cost path to 3 to reach every destination okay so that means if you
10141,11-07,35:21,have a packet coming in with a specific destination for example if the definition is is y
10142,11-07,35:28,then we know the least cost path for this package is to go through
10143,11-07,35:35,uwwe and then we y okay so that's what we do and then interestingly now you can
10144,11-07,35:42,see if you stand at this uh source you okay then when the packet comes in you
10145,11-07,35:51,know how to do the forwarding okay so for example for example
10146,11-07,35:58,if this is the destination
10147,11-07,36:10,if the left column is destination the right column is the outgoing link
10148,11-07,36:16,then we know if the destination is x
10149,11-07,36:22,okay we should forward this to u x
10150,11-07,36:28,right we forward it to this link if the addition is w we need to forward
10151,11-07,36:34,it to you w we follow the list cost path tree okay
10152,11-07,36:39,now i have a question you can type the answer in the chat
10153,11-07,36:45,what if the definition is v what is the outgoing link
10154,11-07,36:52,what if the destination is a way what is the
10155,11-07,36:58,outgoing link pay attention you need to write down a
10156,11-07,37:06,link not just one node okay a link so how to
10157,11-07,37:11,express a link you need a parenthesis
10158,11-07,37:17,um apparently some of you are considering oh because definition is a way so i need to forward this to uw
10159,11-07,37:26,um and then to wait okay that is very normal
10160,11-07,37:31,but that is actually wrong why because because
10161,11-07,37:38,when the router do the forwarding okay the router can forward it to only its
10162,11-07,37:46,own neighbors it cannot control others it's like for me i have for example for
10163,11-07,37:53,you it has three neighbors of x w and we it can only decide
10164,11-07,38:00,if it need it should be forwarded to x or to w or to wait
10165,11-07,38:05,but it cannot decide what will happen after that that means for you you can only say oh i
10166,11-07,38:13,need to forward it to this link to the uw link okay but what will happen after w
10167,11-07,38:23,is not decided by you you don't care okay you doesn't care
10168,11-07,38:29,so that's why i pay special attention here you can only write down uw you should not add wb okay no wa and some of
10169,11-07,38:39,you may think then how can i decide how can i how can i make sure
10170,11-07,38:46,um w is doing the job w is forwarding this two-way we cannot we cannot control w okay we
10171,11-07,38:53,cannot make sure that um as a matter of fact w will run its
10172,11-07,39:00,routing algorithm and generating its own forwarding table okay so what you is
10173,11-07,39:08,doing now is to make the best judgment based on the gravity algorithm it is
10174,11-07,39:15,running it can only tell oh from what i understand i need to forward this to w
10175,11-07,39:21,but i don't know what will happen after that w may have a different opinion w
10176,11-07,39:27,may make me forward it to to something else not to wait okay but w is running
10177,11-07,39:33,its own routing algorithm and generating its own local formative table that is
10178,11-07,39:39,something you need to pay us pay attention okay pay attention
10179,11-07,39:44,and then if the destination is uh y so can you guess the answer now can you
10180,11-07,39:51,type in the answer in the chat now what is the outer link outgoing link if the
10181,11-07,39:57,destination is y the answer should be u w again u is only controlling
10182,11-07,40:05,itself this is the local
10183,11-07,40:18,pay attention because you know what we are doing is a local forwarding table for you not for anybody else okay for
10184,11-07,40:24,you okay um anthony is asking uh so we assume the
10185,11-07,40:30,machine will take care of the inputs yes the machine will look at look at uh i
10186,11-07,40:36,don't know what you mean by inputs if you are meaning the destination of the package yes the the router will look at
10187,11-07,40:43,the destination destination of the packet and then decide the outgoing link
10188,11-07,40:49,okay so what is this what if the definition is z so what is that green link
10189,11-07,40:57,so if the definition is z then the um forwarding link the outgoing link is
10190,11-07,41:04,still uw okay because we are looking at only the local 40 table for you okay you
10191,11-07,41:12,will make the decision based on the destination of the package okay and it
10192,11-07,41:18,can only forward to three links number one is the uwx number two is the uw and
10193,11-07,41:26,then number three is the ue one okay so i'll remove this just to
10194,11-07,41:36,okay um so there is another example
10195,11-07,41:43,another example
10196,11-09,0:03,there is another example another example here below
10197,11-09,0:11,let's do the get this together and we take u as the source okay the first step
10198,11-09,0:17,is the initialization so you can say for we it is 2 k for x we know for is two
10199,11-09,0:25,and the predecessor is u for w we have a direct link between u and w so
10200,11-09,0:31,the value is 5 and predecessor is u for x the value is 1 u x is one and the
10201,11-09,0:40,predecessor of x is u for y u y do not have direct link so infinity and dz uh
10202,11-09,0:48,have no direct link so infinity so this is the first line very easy the second line if you look at the first
10203,11-09,0:55,line we know okay among these nodes x apparently have the least cost parts
10204,11-09,1:01,right so the least cost so then d x equals to
10205,11-09,1:07,one okay we choose x and put x into m prime then everybody try x when you try
10206,11-09,1:14,x we try x we know this is 2 plus 1 equals to 3 is not better so that's why
10207,11-09,1:20,we still keep to you here and if you look at w
10208,11-09,1:25,tri x so it's 3 plus 1 is equal to four four is better than five so that's why
10209,11-09,1:32,we have four here and then we have x as the predecessor
10210,11-09,1:37,okay uh we skip x we look at y y try x so 1
10211,11-09,1:44,plus 1 equal to 2 is better than infinity so we put two here and then the
10212,11-09,1:49,predecessor is x they try x no direct link between x and
10213,11-09,1:54,z so it's your infinity now um in the second line among or a second row among
10214,11-09,1:59,all of these we say a tie between we and y okay so you can choose any one of them
10215,11-09,2:08,you may have the confusion there you can choose either way or why both are fine
10216,11-09,2:13,and they will generally the same result okay of course here in our example
10217,11-09,2:19,um and in slide it chooses uh y okay it's
10218,11-09,2:24,put y here of course you can try way on your own and see if you can generate the same thing okay
10219,11-09,2:30,so now we know okay y is put uh into the m prime
10220,11-09,2:36,okay everybody try y d y now equal to two okay so we try y no direct link
10221,11-09,2:45,between we and y but we doesn't change w 20y is one plus two equals to 3 which
10222,11-09,2:54,is better than four so we put three here and y is the predecessor for w
10223,11-09,3:01,okay and then they try y is 2 plus 2 equal to four four is better
10224,11-09,3:07,than infinity so we put 4y here okay because predecessor for z is y now
10225,11-09,3:14,among all of these we know we has the smallest value so then we try d we
10226,11-09,3:23,equals to 2 then everybody twice we um
10227,11-09,3:29,and we also put a v into n prime so w try away w tri v okay it's the third
10228,11-09,3:37,plus two equal to 5 is not better so w will still keep through y
10229,11-09,3:43,and they try one uh they try v okay they
10230,11-09,3:49,try away there is no direct link between j and uh way so it's still capable y
10231,11-09,3:56,okay then among these two we choose apparently we choose w okay
10232,11-09,4:03,so then d w now equals 2 3. okay then
10233,11-09,4:09,everybody try w only z is only the only remaining one so they will try w is 3
10234,11-09,4:16,plus 5 equals to eight which is not better than four that's why we still
10235,11-09,4:23,keep four y here okay and then we put because this is the
10236,11-09,4:28,only remaining one so we put uh they here uh into the last line then we are
10237,11-09,4:33,done with this table now what what we need to do next is we want to construct the least cost path
10238,11-09,4:40,tree so we connect z and its predecessor which is y
10239,11-09,4:47,z and y okay and y
10240,11-09,4:52,and x y and x and u
10241,11-09,4:59,x and u okay w and y
10242,11-09,5:06,w n y then we and u
10243,11-09,5:14,okay so you can see this is the least cost path tree
10244,11-09,5:22,now we know now let's construct the forwarding table
10245,11-09,5:33,okay
10246,11-09,5:45,it's still for you okay so then if the destination is way then we need to
10247,11-09,5:51,forward it to you wait if the definition is x we need
10248,11-09,5:58,to forward it to u x what if the definition is uh
10249,11-09,6:05,um y what should we do if the definition is a y we should
10250,11-09,6:11,forward it to we need to follow this u x y link right so we should still need to
10251,11-09,6:18,forward this to u x what if the definition is w
10252,11-09,6:23,we need to forward this to u x and then x to y y to w so it's c o u x
10253,11-09,6:31,okay if danisha is they then we need to forward it to steal u x
10254,11-09,6:39,okay any questions this is how we construct the local
10255,11-09,6:46,forwarding table for um for you this link state album as i said
10256,11-09,6:52,will definitely appear on the test please pay special attention to that okay
10257,11-09,6:58,and you can see this is uh actually what we have discussed just now it's the same thing okay so i got just skip this part
10258,11-09,7:06,uh if we look at the digital algorithms complexity then each node we have nodes
10259,11-09,7:12,okay in each iteration we need to check all the other nodes okay not e and prime
10260,11-09,7:18,so that means we need to check n minus one nodes plus m minus two nodes
10261,11-09,7:27,plus n minus three nodes and here we have and notes a one notes okay so the total
10262,11-09,7:36,of this is one plus and minus one
10263,11-09,7:43,times and minus 1 divided by 2.
10264,11-09,7:48,so this is actually so this is this is actually o big and
10265,11-09,7:55,two okay uh so we need to do that many comparisons
10266,11-09,8:03,um of course if you consider also uh the unknowns in the very first iteration
10267,11-09,8:10,when we do initialization then this will become n plus this okay so then this will become
10268,11-09,8:18,um this will become 1 plus n times n so then this becomes n square plus n still
10269,11-09,8:26,big o and two okay there is some more efficient implementations which have the
10270,11-09,8:34,o uh and log in complexity okay but we will not discuss those
10271,11-09,8:41,um and it makes up from oscillation problem that oscillation problem basically means
10272,11-09,8:48,um because we are considering the shortest path every time so every time if if the
10273,11-09,8:55,traffic we know if the traffic is uh um is uh actually related to the link cost
10274,11-09,9:04,right so when when the traffic is more busy then the cost is higher okay the
10275,11-09,9:12,cost is higher than because then when if we run this algorithm we will choose the uh the the the the path with less
10276,11-09,9:20,traffic okay um but it's it's like when you uh so but
10277,11-09,9:25,it's it's like when you drive on the road okay for example you feel like oh uh this pass is very busy
10278,11-09,9:33,okay i have to wait so how about i choose this one okay i choose that part
10279,11-09,9:38,initially okay and then after you everybody everybody let me choose this
10280,11-09,9:44,one and then the traffic becomes more heavy on this path
10281,11-09,9:50,and now the time is increasing so then everybody
10282,11-09,9:56,now switch back to the other parts because the other parts has less traffic so it's like that so we continue
10283,11-09,10:03,switching back and forth so it's this is called oscillation problem it's like when you drive on the road
10284,11-09,10:09,i think many of you have noticed if you drive on one lane and this lane has uh
10285,11-09,10:16,it's very very slow and you may get impatient you you say oh let me switch to the the other fasterly and then you
10286,11-09,10:24,may notice after you switch to the faster line and the faster line becomes slower so
10287,11-09,10:30,you have to switch back so you're doing this back and forth that is actually exactly uh uh the the obviously the best
10288,11-09,10:38,analogy for this oscillation problem okay and in the exam i will give you
10289,11-09,10:45,some practice some um network with like the the numbers
10290,11-09,10:51,okay uh for each link with the cost for each link and then you will need to fill in this table and also generate the
10291,11-09,10:58,local forwarding table generate the short path tree okay or the list cost path three so those are
10292,11-09,11:04,are very important so make sure you really understand that and then second algorithm is the
10293,11-09,11:10,distance vector album decent vector algorithm is different from link state as we
10294,11-09,11:16,mentioned before the state algorithm is a global algorithm which means each router actually know
10295,11-09,11:24,the topology for this entire network it knows the cost of
10296,11-09,11:31,the cost between every two routers okay but additional vector algorithm the
10297,11-09,11:38,router know only the neighbors it doesn't care about others it only rely
10298,11-09,11:45,on the neighbor's information to make the final decision okay so this number
10299,11-09,11:50,to amazon is based on the bellman4 equation so for this equation you can see if we define dxy as the cost of
10300,11-09,11:59,least cost path from x to y okay so basically x is the sauce and y is the
10301,11-09,12:10,destination then in this case d x y equals 2 equal
10302,11-09,12:17,to 1. so firstly c x y c x y is the cost between x and y
10303,11-09,12:25,so who is the way who we exactly the neighbor of x so we have x and we have a
10304,11-09,12:32,number of neighbors so they are all called we okay so then basically
10305,11-09,12:39,um foreign also has a
10306,11-09,12:45,this this destination this is the sauce
10307,11-09,12:50,as you can see the basically x will try different
10308,11-09,12:56,neighbors different weights okay then for this way for example we know the
10309,11-09,13:02,cost from way to y to the destination y is d y and then the cost between x and y
10310,11-09,13:09,is a c x b okay so now we use the neighbor's cost
10311,11-09,13:14,plus the cost from neighbor to the destination this will be the total cost
10312,11-09,13:20,for this part okay then basically x will try all the
10313,11-09,13:26,neighbors try all the neighbors and then choose the minimum one okay so this is the base of this in the
10314,11-09,13:34,vector algorithm now let's look at the example in this example we know uh d v z
10315,11-09,13:41,is equal to 5 d x z equal to 3 d w z equal to third
10316,11-09,13:49,okay these are our assumptions okay and then if we want to calculate
10317,11-09,13:55,the short the least cost from u to z then you will basically look at them the
10318,11-09,14:03,different neighbors so u has a one neighbor another neighbor
10319,11-09,14:08,a third neighbor k u has three neighbors so among these neighbors you will try different
10320,11-09,14:15,neighbors so basically let's say we try the neighbor wave first we try neighbor
10321,11-09,14:21,wave first and then we know the cost between you and me is two two
10322,11-09,14:26,plus d raise it from way to z we know it is 5.
10323,11-09,14:31,okay so 2 plus 5 that is 7. and then we also try x
10324,11-09,14:37,number x x c u x is one okay and d x z we know this is third
10325,11-09,14:44,okay so it's one plus three this is a four then for c u w okay we try neighbor w
10326,11-09,14:53,then the cost between u and w is 5. cuw is 5 5 plus dwc from w to the
10327,11-09,15:02,destination z is uh three so five plus three equal to eight
10328,11-09,15:08,okay the amount all these all of this we choose the smallest one which is four
10329,11-09,15:14,this is how we calculate the shortest path from the source to the destination we
10330,11-09,15:21,basically look at only the neighbors we do not care about the others okay and
10331,11-09,15:27,you can see actually uh it is very important for the neighbors to provide accurate and correct information if the
10332,11-09,15:35,neighbors do not provide the correct information then we cannot calculate this correctly
10333,11-09,15:41,thank you and then um the decent vector algorithm is basically every node maintaining a
10334,11-09,15:48,distant vector okay and the error note one when when one of the notice something changes notice the cost
10335,11-09,15:55,changes then this node will need to notify all the other neighbors say hey i
10336,11-09,16:02,have workers change and you need to change your cost based on mine okay then
10337,11-09,16:07,those neighbors cost will change and then they will need to update their
10338,11-09,16:13,neighbors including than this neighbor okay so let's see the
10339,11-09,16:20,um i maybe let's do this very quickly and i
10340,11-09,16:27,don't want to um go very deep into this okay so for
10341,11-09,16:32,example you can see for notes here we have three notes x y and z okay note has
10342,11-09,16:38,a table x okay so so node x has a table and this table is maintaining the cost
10343,11-09,16:46,from f to x x y and easy white x white
10344,11-09,16:52,white z to ask z2 yd today it is maintaining all the cost and node
10345,11-09,16:59,y is also maintaining uh its own cost okay so for this we call this as a
10346,11-09,17:06,distance vector okay and then when we do initialization you can say from x to x the cost is zero
10347,11-09,17:15,from x to y the cost is from x to y it because it's 2 from x to z the cost is
10348,11-09,17:22,seven okay for the others we just make it infinity because we don't know yet and
10349,11-09,17:30,then why we also do the uh initialization y to x is 2
10350,11-09,17:36,okay y to y is zero why today is a one
10351,11-09,17:42,okay similarly from z to x is seven z to y is one z to z is zero okay so
10352,11-09,17:52,these are the this is the initialization step and then the next step is you can
10353,11-09,17:57,see node y and node z
10354,11-09,18:02,because they have because they all have their own costs right so they need to
10355,11-09,18:09,tell ex about their cost okay because there are ex- neighbors so
10356,11-09,18:15,then why and they need to update x and x need to recalculate the cost based on
10357,11-09,18:23,the information from y and z so you can see basically y is copying its own
10358,11-09,18:28,decent vector to x table okay so y is
10359,11-09,18:33,sending x and 10x to say hey my cost is 201 and z is also sending in 710 okay
10360,11-09,18:41,then the network important thing is that x need to calculate these two values
10361,11-09,18:46,based on the information from y and z so how can x calculate
10362,11-09,18:53,x will say okay might cause the two definitions
10363,11-09,19:01,we real y as the destination okay
10364,11-09,19:07,equals to here x has two neighbors right do you remember we will try all the
10365,11-09,19:13,neighbors and from all these neighbors we choose uh the smallest value okay so
10366,11-09,19:19,then basically x will try y first so basically c x y is this one okay plus
10367,11-09,19:28,from y to y because the definition we know is y okay the neighborhood this is
10368,11-09,19:33,neighbor y the first y is neighbor y the second y is the destination y
10369,11-09,19:41,okay they have different meanings that's why it's actually the destination y
10370,11-09,19:50,okay and then this is a try enable y if we try neighbor z then it's c x z
10371,11-09,19:59,plus d z y from z to y so d z y from
10372,11-09,20:05,neighbor j to destination y okay
10373,11-09,20:10,then from neighbor j to destination y again
10374,11-09,20:15,this z is actually neighbor and y is the destination so then among this let's say
10375,11-09,20:22,c x y equal to 2 2 plus d y from y to y from white y we
10376,11-09,20:30,need to refer to this table from y 2y so this is actually dyy
10377,11-09,20:41,okay this number is dyy uh it's zero one is zero so two plus
10378,11-09,20:47,zero is a two and c x z c x z we know from the figure we know this is seven
10379,11-09,20:53,and then this is a this is a is actually from sorry dz y from z to y this is uh
10380,11-09,21:03,actually d z y so you can see this is one so
10381,11-09,21:09,seven plus one equals to eight among these two we choose the smallest number
10382,11-09,21:14,which is two and then we will put two here okay so this is how we calculate dxy
10383,11-09,21:21,similarly we can calculate dx z xz we will try different neighbors again
10384,11-09,21:29,to enable y okay c x y plus from y to z okay from y
10385,11-09,21:36,to z and c x z plus from z to z okay so the c x y we know this is 2 d y
10386,11-09,21:46,z d y z is from y to z so this value is actually d y z this is a one okay and
10387,11-09,21:56,then c x y we know c x y is i'm sorry c x z is 7 6 7 and this is it
10388,11-09,22:06,this is actually this one from z to z this is a d z z
10389,11-09,22:12,okay so this is equals to um zero then we we know okay two plus
10390,11-09,22:20,one equal to 3 7 plus 0 equals to seven so the minimum number is three then we
10391,11-09,22:25,will update this number and put through here okay so and now you can see x has
10392,11-09,22:32,updated its own value based on the information provided from y and z
10393,11-09,22:37,similarly similarly as you can see
10394,11-09,22:43,here x needs to send the information to y they
10395,11-09,22:49,need to send the information to y okay and x need to send the information
10396,11-09,22:54,today why you need to send the information today
10397,11-09,23:00,and then they will update this value so y opposite y update
10398,11-09,23:07,uh that's this value okay
10399,11-09,23:12,so basically based on those information they will do calculations and then
10400,11-09,23:18,okay then after that because x has already updated its own value it needs
10401,11-09,23:26,to it needs to send the information again to y and today
10402,11-09,23:33,okay similarly if y and z also get new values they need to update the other
10403,11-09,23:40,neighbors okay so you can see this is actually
10404,11-09,23:47,um changing process it it needs to go on
10405,11-09,23:54,and on until finally we reach some kind of equilibrium or some kind of a balance
10406,11-09,24:01,okay and here finally all these values they do not change anymore okay so this
10407,11-09,24:08,is the distance vector algorithm and um
10408,11-09,24:14,i don't require you i i want you to understand the basics of
10409,11-09,24:19,what is the vectorism like for example the spellman fourth equation and how we
10410,11-09,24:25,can use to do calculations okay um i do not require you to know a of
10411,11-09,24:34,course it's better if you know how to do the calculation but in the test i will not ask you to do such kind of uh
10412,11-09,24:42,algorithm um running okay it's different from the
10413,11-09,24:47,next details so don't worry about that part and this doesn't matter album has a
10414,11-09,24:52,feature which is called good news travels fast bad news travels slow so
10415,11-09,24:58,this means um basically if for example if uh cost
10416,11-09,25:04,is changing to a smaller number okay we know because of this link cost
10417,11-09,25:12,is changing so for example x will need to update all the neighbors say hey we
10418,11-09,25:17,have a link cost here link cost changing here okay so then everybody need to update their own tables and it takes
10419,11-09,25:24,only a few iterations to finally reach the equilibrium to finally
10420,11-09,25:30,um guess uh guess the final value okay but if if this number is changing
10421,11-09,25:38,from a small number to a much bigger number okay to a much bigger number then
10422,11-09,25:46,basically this num this uh this uh this news okay this this bad news will
10423,11-09,25:55,take a lot of iterations before the algorithm finally established stabilize
10424,11-09,26:02,okay so this is called the good news channel was fast and bad news travel
10425,11-09,26:07,slow basically for if you increase learning cost to a much bigger number
10426,11-09,26:13,then it takes a lot of iterations for the amazon to stabilize to to
10427,11-09,26:20,finally get the final value okay uh i don't want to urinate in the first
10428,11-09,26:27,semester sometimes i explain this in details why but now i think uh we do not
10429,11-09,26:32,have time to explain that in that detail and then you only need to remember the
10430,11-09,26:39,final conclusion good news travels fast bad news travel slow okay you don't need to
10431,11-09,26:44,explain why the bad news travels low
10432,11-09,26:49,okay now let's compare the links this algorithm and distance vector algorithm
10433,11-09,26:55,for the message complexity the link state album has anodes e-links them
10434,11-09,27:02,because we as we said all the routers need to know the state of the entire
10435,11-09,27:08,network then that means we have to send at least a big o and e messages to
10436,11-09,27:15,update everybody okay and for this adventure i was on the exchange it happens only between the
10437,11-09,27:22,neighbors okay so for the speed of convergency for
10438,11-09,27:29,linkedin outcome okay again
10439,11-09,27:35,um the on2 algorithm requires o and e messages they need to exchange the
10440,11-09,27:40,messages and as we said we may have oscillation problem postulation problem do you remember when
10441,11-09,27:45,i said uh when you travel it will drive on the road okay you may want to choose
10442,11-09,27:51,the one that is faster and after you change the name to the first to the
10443,11-09,27:56,faster lane you may finally realize the fastening is becoming slower that's because everybody is changing to the
10444,11-09,28:03,faster lane so now the fast training becomes slowly okay so then you can change back you change back and then
10445,11-09,28:10,everybody is changing back okay so this it will generate the oscillation problem
10446,11-09,28:16,for distance vector the convergence in time convergency time may vary as you
10447,11-09,28:23,can see sometimes if you are changing to changing the cost to a higher number it
10448,11-09,28:29,takes longer to converge but if you are changing the cost to a smaller number it
10449,11-09,28:35,takes shorter to converge okay so for robustness what happens if the
10450,11-09,28:42,router malfunctions foreign the node can advertise incorrect
10451,11-09,28:48,link cost okay each node will compute its own table
10452,11-09,28:53,so they they are kind of in independent from each other because they are making
10453,11-09,28:59,their own judgments okay but for this vector algorithm the nodes can advertise
10454,11-09,29:05,incorrect cost okay and the nodes are relying actually on the neighbors if the
10455,11-09,29:12,neighbors are providing incorrect information then those routers will
10456,11-09,29:17,generate the wrong results okay so those are their difference uh those are all about the different
10457,11-09,29:24,albums as i said this nixteen album will be very important it may appear on the
10458,11-09,29:30,test for this and out vector algorithm you only need to know the bf equation how to use vf equation you don't need to
10459,11-09,29:37,worry about running the algorithm in detail okay the next thing we want to discuss
10460,11-09,29:45,is the hierarchical routine currently we what we have learned or for
10461,11-09,29:52,other accounts or no matter is selling state or distance vector it's kind of a
10462,11-09,29:58,flat the network is kind of flat okay because we are treating all the rounders
10463,11-09,30:03,as the same but this is not true in practice okay you think about this in reality we
10464,11-09,30:10,may have we may have a lot of raptors we have a huge number of routers
10465,11-09,30:17,we cannot treat those rafters all the same okay we cannot store for example if
10466,11-09,30:23,you are running state housing you cannot run this algorithm towards the entire
10467,11-09,30:28,network you think about this because we have so many routers
10468,11-09,30:34,um foreign state algorithm will require every router knowing the status of the
10469,11-09,30:41,entire network knowing the topology knowing the link cost okay but if we are
10470,11-09,30:47,training all the routers at the same can we store all the destinations information in the routing table we
10471,11-09,30:54,cannot we cannot store all the information in just one router right the router has to be
10472,11-09,30:59,has to have really huge uh storage space okay that is not possible
10473,11-09,31:07,um and another thing you need to consider is internet in reality is a network of networks each network admin
10474,11-09,31:14,may want to control the royalty in its own network so for example sex state may
10475,11-09,31:22,say okay i want to control my own network i want to manage this in this way ucd may say i want to manage this in
10476,11-09,31:29,a different way i want to run a different algorithm okay and different isps may want to control their network
10477,11-09,31:36,in different ways so that's why it's actually um we we call this as administrative
10478,11-09,31:43,autonomy okay so because of that usually what we do is
10479,11-09,31:51,aggregate the routers into regions for those regions each region we call it a
10480,11-09,31:57,autonomous system and as okay the router in the same as run the same routine
10481,11-09,32:05,protocol usually so for those kind of routing protocol we
10482,11-09,32:11,call it as intro as routine protocol okay then the routers in different as
10483,11-09,32:19,current different intro as routine protocols so for example we may have this as
10484,11-09,32:27,another as another as we may have different as
10485,11-09,32:33,okay then within each as we can run different routing algorithms
10486,11-09,32:39,so for example this as may decide to run link states this as may decide to run a
10487,11-09,32:45,decent vector this is decided to running state i'm just giving an example of
10488,11-09,32:51,course in reality we may have more complicated algorithm okay but anyway
10489,11-09,32:57,each as may run its own routing algorithm and we also need to run
10490,11-09,33:06,among those as so for example from this as1 to as2 to s3 so what is the shortest
10491,11-09,33:15,path from as1 to sas3 what is the shortest path from as1 to as2
10492,11-09,33:22,okay of course we have more es
10493,11-09,33:27,okay there are more here i'm just giving an example then among those as we also need to run some
10494,11-09,33:35,routine algorithm to find the best way to reach a certain
10495,11-09,33:42,autonomous system okay that is actually the uh external as
10496,11-09,33:49,routine housing okay or we call it inter as routines so now
10497,11-09,33:56,let's look at an example here okay so in this example you can say
10498,11-09,34:03,um we are looking at a router 1d okay for rounds from 1d the forwarding
10499,11-09,34:11,table for 1d is actually determined by two things one thing is the intro as routine
10500,11-09,34:19,algorithm another thing is the inter as routine amazon
10501,11-09,34:24,okay so the inter is routing algorithm actually determines
10502,11-09,34:31,um the best way to reach a certain autonomous system okay then the intro answer optionalism
10503,11-09,34:39,is determining the best way to reach a certain gateway voucher okay so we're
10504,11-09,34:45,explaining more later but anyway now you need to know you need to know the forwarding table is actually determined
10505,11-09,34:51,not by just one routinism is actually by two types of rockhampton inter and inter
10506,11-09,34:58,okay so let's firstly look at the inter as tasks okay we suppose the rupturing is
10507,11-09,35:06,one receive the desk that receives a datagram destined outside of es1
10508,11-09,35:13,then okay the router should forward the packet to the gateway router by which
10509,11-09,35:19,one okay we don't know for this package if it arrives at es1
10510,11-09,35:26,and we need to forward it to somebody else okay so for example if you want to
10511,11-09,35:32,forward this to as2 then you should send this package to 1b because 1b is the
10512,11-09,35:40,gateway router that is connected to as2 okay
10513,11-09,35:45,but if you are sending this package to as3 then you should send this package to
10514,11-09,35:54,gateway router 1c because 1c is the gateway router connected to as3
10515,11-09,36:00,okay so now basically as1 need to make this decision
10516,11-09,36:05,okay so as one must learn which destinations are reachable through as2
10517,11-09,36:11,which definitions are reachable through s3 okay and then as1 need to propagate this
10518,11-09,36:21,reachability information to all the routers inside as1
10519,11-09,36:29,so after basically after eso one learns how to reach those destinations through
10520,11-09,36:34,those um as okay then yes we need to tell all
10521,11-09,36:41,the routers inside the s1 about this reachability information
10522,11-09,36:46,okay because with this information then these routers can make their own decision they can run
10523,11-09,36:53,render our routine algorithm right so you can see this job one two is uh the
10524,11-09,36:59,job of inter as routine awesome okay so basically the inter as routing
10525,11-09,37:07,algorithm need to learn which destinations are reachable through which autonomous systems
10526,11-09,37:15,and then propagate this reachability information to all the routers inside
10527,11-09,37:20,this autonomous system okay it's like it's like uh for example for
10528,11-09,37:28,our class we have so many students if each student is a router okay
10529,11-09,37:34,then for our class we need to learn if we want to reach some person
10530,11-09,37:41,okay some other student in other classes we need to learn how we can
10531,11-09,37:47,reach that person through which classes right so we may go through class one class two class three and finally reach
10532,11-09,37:55,a person okay we need to learn those kind of information and then we need to come back tell everybody in our class
10533,11-09,38:03,saying hey these are all the reachability information i have learned okay and then you need to you make your
10534,11-09,38:11,judgments based on those information so that is the job of inter as routine
10535,11-09,38:18,okay now we suppose as1 learns that
10536,11-09,38:24,the subnet x is reachable through as3
10537,11-09,38:31,okay but not through as2 and then this intra as protocol protocol
10538,11-09,38:39,will propagate this reachability information to all the routers within es1
10539,11-09,38:45,okay then the router 1d determines
10540,11-09,38:51,from the intro s algorithm okay it will it will firstly it will
10541,11-09,38:57,know okay i need to send forward this packet to once it because 1c is connected to
10542,11-09,39:07,as3 okay and we know as3 can reach x
10543,11-09,39:13,okay then the next thing is the next thing 1d we will need to determine is
10544,11-09,39:20,how can i reach this 1c okay what is the shortest path
10545,11-09,39:27,or the least cost path to reach 1c okay this
10546,11-09,39:34,is another algorithm this this algorithm is run is run with
10547,11-09,39:40,aes1 so this is actually the intro as routine
10548,11-09,39:45,okay this is interesting so basically now if we summarize if we summarize the
10549,11-09,39:52,inter as routine is learning about the reachability information the as
10550,11-09,39:58,reachability information and then broadcast appropriate the information to
10551,11-09,40:03,all the routers inside this network then the intro is abstracting algorithm
10552,11-09,40:09,is basically used to determine the shortest path from the source router to
10553,11-09,40:15,the gateway launcher okay from 1d to 1c okay similarly let's see let's look at
10554,11-09,40:21,this now we suppose the x so for example can be reached through
10555,11-09,40:27,both a s3 and as2 okay now 1d has a package
10556,11-09,40:34,okay so it can either forward to as2 or 4 or to as3
10557,11-09,40:42,okay now we need to determine firstly we need
10558,11-09,40:48,to determine firstly should the way forward to as2 or as3
10559,11-09,40:54,that is the inter as routine part okay should we forward to es2 or as3
10560,11-09,41:03,okay which means which is the the best as path
10561,11-09,41:10,okay that is an intern es launching algorithm if finally we decide
10562,11-09,41:17,for example we decide to forward to as2 okay then we will say okay 1b is the
10563,11-09,41:27,shortest it is the gateway router that we should use then one thing we'll need
10564,11-09,41:32,to determine what is the shortest path from 1d to 1b
10565,11-09,41:38,okay so that is the intra as routine
10566,11-09,41:44,now you can say when the package is destination as x
10567,11-09,41:50,okay and the outgoing link the we are actually looking at the forwarding table
10568,11-09,41:57,okay this is the destination if the definition is x then the outgoing
10569,11-09,42:03,link should be let's see if this is a link one this is link two okay so this
10570,11-09,42:08,outgoing link should be one why it's actually determined by two things
10571,11-09,42:15,one thing is the interest rotioxide which helps determine the best as is to
10572,11-09,42:22,go through as2 and after that we need to determine okay the best
10573,11-09,42:29,um the shortest path to reach 1b to reach this gateway is actually going
10574,11-09,42:34,through link one okay so it's determined by two things inter yes and intro as okay so that is
10575,11-09,42:43,the hierarchical routine and let's continue to discuss the
10576,11-09,42:49,royalty in the real internet so what we have learned are just the principles the
10577,11-09,42:54,like the basics for optionalism but what are really used in the internet we need
10578,11-09,43:00,to look at that okay so firstly firstly
10579,11-09,43:06,uh the intro is astronaut routine is also known as the inter interior gateway
10580,11-09,43:13,protocols okay idp and the most common most commonly used
10581,11-09,43:20,inter intro in astrological intro which means within this is okay
10582,11-09,43:26,the most commonly used are ospf open shorted path first
10583,11-09,43:32,igrp integrated with routing protocol so in our class we only introduce the first
10584,11-09,43:39,one let's
10585,11-14,0:03,let's continue to discuss the royalty in the real internet so what we have
10586,11-14,0:08,learned are just the principles the like the basics for working hours but what
10587,11-14,0:14,are really used in the internet we need to look at that okay so firstly firstly
10588,11-14,0:22,uh the intro astronaut routine is also known as the inter interior gateway
10589,11-14,0:29,protocols okay idp and the most common most commonly used
10590,11-14,0:36,inter intro in astrological intro which means within this is okay
10591,11-14,0:42,the most commonly used are ospf open shorted path first
10592,11-14,0:48,igrp interrogate with routing protocol so in our class we only introduce the
10593,11-14,0:54,first one ospf okay so ospf is opens publicly available it uses
10594,11-14,1:03,an institute algorithm okay um
10595,11-14,1:09,and we all know that the topology need to be known as at each node okay the
10596,11-14,1:15,poly map is known as each node and we need to also do the package dissemination to tell to update all the
10597,11-14,1:22,all the notes about the map okay and we also need to do the computation based on
10598,11-14,1:27,the die construct algorithm okay and this ospf is actually also
10599,11-14,1:34,hierarchical okay let's see for example we have this uh these are the back
10600,11-14,1:40,boundary voucher this is connected to the internet okay these are the backbone
10601,11-14,1:45,launchers and we also have the uh area border router so here we can see we have
10602,11-14,1:50,different areas okay these are the internal routers and
10603,11-14,1:56,then these are the area border routers these are the backbone launchers and
10604,11-14,2:02,boundary routers so we actually you can see this is a also hierarchical
10605,11-14,2:08,okay the link state advertisement is is um download only with inner area okay so
10606,11-14,2:15,for example when we do the broadcasting sorry not working when we do um the link state algorithm we will look
10607,11-14,2:22,at only this specific area okay and each note has detailed area topology
10608,11-14,2:29,and then we also have the area border routers which summarize distance to the
10609,11-14,2:35,to the nets in own area and also other words is to other every body routers so
10610,11-14,2:41,we also have the background backbone launchers which run ospf
10611,11-14,2:48,within the backbone okay so um basically you can see the routine
10612,11-14,2:56,album is actually run within each area and also within the backbone okay to
10613,11-14,3:02,make the decision uh this that is the intro as routine for
10614,11-14,3:07,inter as routine okay we call it bjp the full name is border
10615,11-14,3:14,gateway protocol okay so this is the internet
10616,11-14,3:20,do you remember we said for internet routine exam it actually has a two
10617,11-14,3:26,functionalities the first functionality is to learn the reachability information you remember i said if we are if i want
10618,11-14,3:35,to send some letter or something to some other classes we need to learn the reachability information how should we
10619,11-14,3:42,go through class one class three plus four or class two class one plus plus
10620,11-14,3:47,five okay so we need to learn the reachability information as number one number two is after we learn this
10621,11-14,3:54,reachability information we need to propagate that to all the people in our
10622,11-14,4:00,class right so two functionalities similarly for bgp it's the same thing okay for bdp
10623,11-14,4:08,may have ebgp and ibgp so the purpose for evgp is to obtain the
10624,11-14,4:17,subnetic reachability information from the neighboring es okay then after we learn the reusability
10625,11-14,4:26,information we will need to use ibjp to propagate the reachability information
10626,11-14,4:32,to all the as internal routers so optional learn the
10627,11-14,4:38,visibility information come back tell everybody in our class it's like that
10628,11-14,4:44,okay so that is ibgp um and then we need to determine the good routes to other networks based on
10629,11-14,4:50,reachable information and the policy okay so this allows the subnet to
10630,11-14,4:56,advertise its existence to the rest of the internet say i'm here okay now let's
10631,11-14,5:01,look at the example for bgp session uh we have
10632,11-14,5:09,we have two bdp routers exchanging the video messages so we need to advertise the parts to different destination
10633,11-14,5:16,network prefixes okay prefix i hope you still remember okay uh basically for ip address we know
10634,11-14,5:24,it has prefix right we when we do the advertisement we need
10635,11-14,5:29,that we tell others say hey if you have a letter going to california please send
10636,11-14,5:34,it to me so we do this using ip address so we do slash 24 for example ip address
10637,11-14,5:41,one two three four slash 24 24 the first 24 bits
10638,11-14,5:47,i used for uh for um uh network prefix okay so it's
10639,11-14,5:55,like that of course you can change this 24 number 24 to some other numbers okay
10640,11-14,6:01,so for example one bs3 and vertices are
10641,11-14,6:07,prefix to as1 as3 promises it will forward the
10642,11-14,6:13,datagram toward that prefix means when s3 is saying say hey if you have any
10643,11-14,6:19,letter to california please forward to me basically esther is making a promise if
10644,11-14,6:26,you have a letter to california i will definitely forward that to california okay
10645,11-14,6:32,and of course esther will also aggregate the prefix in advertisement for example
10646,11-14,6:37,if we have california and also um maybe seattle okay it's not i mean i
10647,11-14,6:45,mean circle is not a state but sometimes we do aggregation like that okay so if
10648,11-14,6:51,you have any letter of going to california or seattle give it to me okay so it's like like that so s3 can
10649,11-14,6:58,aggregate the prefix in this advertisement and then okay we will use epgp session
10650,11-14,7:06,between third a and 1c okay so as through will send this
10651,11-14,7:14,reachability information to as1 by using e bgp because we know ebdp is
10652,11-14,7:22,used to learn which stability information okay and then once say we
10653,11-14,7:27,are then use the ibdp sessions to broadcast this info to send this
10654,11-14,7:33,information or project this information to all the routers within as1
10655,11-14,7:41,okay then now one you can see one thing for
10656,11-14,7:47,example can use the ibgp to distribute the the new prefix into all the routers
10657,11-14,7:54,and 1b can then re-advertise the new reachability information to as2
10658,11-14,8:01,through another ebgp session okay and similarly the 2a will do a ibap
10659,11-14,8:11,session to propagate this information to all the routers within as2 okay so this is the entire process you
10660,11-14,8:18,can see we use ebt to learn the reachability information and then use ibdp to tell everybody within that yes
10661,11-14,8:26,okay so then the path um so the adult type prefix include the bdp
10662,11-14,8:33,attributes it includes um the prefix plus the attributes
10663,11-14,8:39,okay so you may ask prefix if we understand this ip ip address prefixing and what are the attributes so there are
10664,11-14,8:46,two very important attributes the first attribute is called as path aspath basically contains the as through which
10665,11-14,8:54,prefix adwords unit had passed so for example if on this part on this path we have passed the as67 as 17 then all
10666,11-14,9:04,those as will be written on this okay this is the as we have go through for
10667,11-14,9:12,this path okay and then the next the the the the second attribute is the next hop
10668,11-14,9:18,next hub indicates the specific internal as router to next hub yes okay it's
10669,11-14,9:25,basically telling this next hop information okay those gateway vouchers
10670,11-14,9:31,internal s routers um
10671,11-14,9:37,so another thing you need to pay attention is the gateway launcher receiving route
10672,11-14,9:43,at route advertisement uses some import policy to accept or decline okay and
10673,11-14,9:50,when we make the decision about the routinalism we actually care a lot about the policy okay we call it policy based
10674,11-14,9:58,routing so what does this mean this means this means policy is number
10675,11-14,10:04,one important thing we need to consider when we determine the routing of the
10676,11-14,10:10,routes in reality okay so it's not as of what you have already thought you may
10677,11-14,10:16,even thought you may think oh four or a few of them as long as we can find the least cost path then we are fine but
10678,11-14,10:22,that's not true okay in reality policy is the most important thing because
10679,11-14,10:29,sometimes for example the isps may have competitions they may want they may
10680,11-14,10:34,don't want to disclose some information to each other then for example even if
10681,11-14,10:40,they know some shortest path they don't want to tell the other company that they have the shortest time okay or between
10682,11-14,10:47,countries between um between different areas there are
10683,11-14,10:53,also these kind of things so policy is always number one thing to consider when
10684,11-14,10:58,you decide the best route and the next thing is to choose the shortest es path
10685,11-14,11:06,okay the shot is a s path that means determine the a s path is actually more
10686,11-14,11:13,important because um because as we can we can think about
10687,11-14,11:18,this uh each path is more cost point right a s is more cost growing it's a
10688,11-14,11:24,it's covering a larger area okay so for example it's like if we want to make
10689,11-14,11:30,this if we want to send a letter to somebody in another class we need to firstly determine which classes we need
10690,11-14,11:37,to go go through which buildings we need to go through right because that is more
10691,11-14,11:42,important and when you come to when you need to determine how to forward it
10692,11-14,11:49,within a s that's not as important as the internet yes okay because the the
10693,11-14,11:57,time etc or the cost can be that can be saved
10694,11-14,12:02,is is actually very small compared to the time or cost that you can see
10695,11-14,12:08,um with me between the yes okay so then that's why the second thing is actually
10696,11-14,12:15,the as path the third thing is the nest hop router so how you can how you can
10697,11-14,12:22,find the closest network router okay so this is actually vte not es then we
10698,11-14,12:30,consider some additional criteria so those are all the information for you
10699,11-14,12:36,need to consider all the priorities you need to consider when we choose the best routes so you may you may think you may
10700,11-14,12:43,ask uh why do um why does the bgp routing policy
10701,11-14,12:48,matters okay why does the policy matters even more than performance sometimes
10702,11-14,12:54,let's look an example here here a b and c are the provider networks okay x
10703,11-14,13:05,w and y are customers so x w and y are
10704,11-14,13:11,just no more users abc are service providers like at t comcast okay and as
10705,11-14,13:18,you can see x is dual homes which means it belongs to both b and c it gets
10706,11-14,13:26,services from both b and c okay so if your ex
10707,11-14,13:32,if you are x will you let me uh or say no that
10708,11-14,13:40,um you can reach the other party y or x
10709,11-14,13:47,okay so x we are not l x we are not let b know that b can reach c through x
10710,11-14,13:57,okay we know although there is a path between b and c here but x will not tell b about this path
10711,11-14,14:05,why because if x help b about this path then we can assume the traffic from b
10712,11-14,14:13,will be directed some of the traffic will be directed to x and then to c okay
10713,11-14,14:19,so then x becomes a also a service provider right not service provider but
10714,11-14,14:26,it's also excuse me it's also providing the
10715,11-14,14:31,service for b but x is just a customer x is
10716,11-14,14:37,paying to be for the service but it actually do not get does not get any pay
10717,11-14,14:43,from b right so that's why x actually we are not advertised to be this route to c
10718,11-14,14:52,okay that's one example another example is you can say a advertise the path aw
10719,11-14,15:02,to b okay so a is basically telling b say hey
10720,11-14,15:07,if you want to root w you can go through me and b will advertise the baw path
10721,11-14,15:15,to x because x is a this customer so b will
10722,11-14,15:20,say oh if you want to reach w you can go through me bac okay but should be advert
10723,11-14,15:28,height b a w path to c foreign
10724,11-14,15:37,no way because what because bnc they are very likely competitors right at least the b
10725,11-14,15:45,gets no revenue from c okay so b gets no revenue for routing
10726,11-14,15:53,say b a w okay because c is not b's customer
10727,11-14,16:01,okay um that's why we will not tell c about the
10728,11-14,16:09,existence of this path okay if if b tells c then c will very likely direct
10729,11-14,16:15,some traffic to baw okay so then in this case b will force c
10730,11-14,16:22,to only route to w through a okay only right to w through a and
10731,11-14,16:31,um because b wants to route only two or from its own customers okay unless it
10732,11-14,16:38,has two some of you may ask oh if one service provider does not pro does not
10733,11-14,16:44,um advertise a path to the other service provider what if they are isolated what
10734,11-14,16:50,if two two service providers are isolated and then they cannot reach each other
10735,11-14,16:56,uh so you do you do not need to worry about this as we mentioned
10736,11-14,17:01,if they are isolated okay then they must firstly cooperate
10737,11-14,17:07,okay then they must firstly cooperate to make this internet work and then they
10738,11-14,17:13,think about oh should i advertise this additional path or not
10739,11-14,17:19,okay so at least this will make this internet work but from these examples you will say oh
10740,11-14,17:25,policy do matter sometimes okay policy means here basically means
10741,11-14,17:32,um should i advertise this path or not should i let my competitor know about
10742,11-14,17:37,this or not okay so i think this is just one example okay and there are more
10743,11-14,17:42,things to consider for example uh there may be some things among countries okay
10744,11-14,17:48,you also need to consider that so um then
10745,11-14,17:54,if you look at the inter and enter as routine okay so for intra as policy wise
10746,11-14,18:01,policy wise for intern is the admin wants control over how is traffic
10747,11-14,18:08,uh routed who robs the recently is network
10748,11-14,18:13,okay so that's why we actually for interests we really need to consider
10749,11-14,18:19,policy okay for intro as intro as because this
10750,11-14,18:24,we have have only one admin okay it belongs to one network so no policy
10751,11-14,18:30,decision is needed no we do not need to consider any policy for intro as
10752,11-14,18:37,uh if you consider the scale okay the hierarchical routine saves the
10753,11-14,18:42,table size reduce reduce the update traffic okay because when we have hierarchical
10754,11-14,18:51,routine we can do the routing within a small region we don't need to do the rocking uh for the entire network then
10755,11-14,18:59,this can for sure see this table size okay performance wise for intro as it can
10756,11-14,19:06,focus on only performance because it doesn't need to consider policy but for
10757,11-14,19:12,enter es okay we need to follow uh for we need to firstly focus on policy and
10758,11-14,19:19,then think about performance so policies may dominate over the performance okay
10759,11-14,19:25,so those are the differences between ensure and interest rapping
10760,11-14,19:32,so the last thing in this chapter is about broadcast in multicast and we we
10761,11-14,19:39,will only talk about the broadcasting okay so what is broadcasting we have
10762,11-14,19:44,mentioned before uh actually when we talk about the um for example dhcp okay we used
10763,11-14,19:51,broadcasting so broadcasting basically means deliver the package from the source to all the other nodes
10764,11-14,19:59,okay um and you can see because we want to deliver the package to all other nodes
10765,11-14,20:06,we for sure we we will need to do some duplication right so you can say one way
10766,11-14,20:12,to do the duplication is to do the duplication as a source so for example if r1 want to send all the package the
10767,11-14,20:21,package to all the other nodes r2r3 and r4 then at r1 we can duplicate this
10768,11-14,20:28,packet for three times and let's send this this through
10769,11-14,20:33,duplications to uh r2 after right now four this is one way the other way is we
10770,11-14,20:39,do a a network duplication that means so for example r1
10771,11-14,20:46,uh we'll send it to r2 okay then r2 can duplicate and then send
10772,11-14,20:52,it to r3 and r4 okay but actually for this kind of uh in
10773,11-14,20:59,our duplication we have some problems the problem is that we may have flooding
10774,11-14,21:04,happening you think about this so for example r1 send it to r2
10775,11-14,21:10,okay r2 receives this wheel and the art will send this to r3 and r4 okay when r3
10776,11-14,21:19,receives this after we will think oh okay i need to forward it to our
10777,11-14,21:24,neighbor so arthur will send it to r2 and also r4 okay similarly r4 will send it to r2 and
10778,11-14,21:33,r3 okay then r2 will also think oh okay i
10779,11-14,21:39,received two more packets one from author another one from r4 so r2 will
10780,11-14,21:46,continue to broadcast again so it's never stop okay it never stops that's the problem
10781,11-14,21:52,this for this problem we call it flooding okay to resolve this problem one way is
10782,11-14,21:58,that we can do controlled flooding control variety basically means the node only broadcast the packets if it hasn't
10783,11-14,22:07,broadcast the same package before okay for example if r2 receives this package
10784,11-14,22:14,again from author and r4 the r2 will check and say oh okay i have already
10785,11-14,22:19,broadcasted this package before so i don't need to broadcast it again so that
10786,11-14,22:25,is uh how we do controlled flooding although control flooding is is effective but still you can see there
10787,11-14,22:32,there is some actual work right so there is some redundant work for example uh
10788,11-14,22:38,when r2 flooded to i mean send it to r3 and r4 author is sending to r4
10789,11-14,22:46,okay and alpha is sending it to author and they both sent the package to r2 so
10790,11-14,22:53,those work are not necessary anymore why because author and alpha have already
10791,11-14,23:00,received a copy from r2 okay so as you can see
10792,11-14,23:06,as again although controlled flooding can control the flooding but still we
10793,11-14,23:12,have already done some redundant work okay so then people begin to think oh what is
10794,11-14,23:19,a better way to do the broadcasting so a battery is using spanning tree
10795,11-14,23:26,you feel spanning tree then no redundant packets can be received by any node okay
10796,11-14,23:32,so what is a spanning tree for example now we have already constructed to uh
10797,11-14,23:38,constructed one spanning tree okay if you follow this uh
10798,11-14,23:43,both lines okay so this is a network and the border
10799,11-14,23:50,lines has formed a monitoring okay and now if the broadcast is
10800,11-14,23:58,initially at it at a that means if a is the source okay a can then send this
10801,11-14,24:05,package following the spanning tree so that means a will send it to save
10802,11-14,24:11,and also to be okay so see we are forwarded to f and e
10803,11-14,24:19,but say we are not send it to b why because this link is not part of the
10804,11-14,24:27,spanning tree okay and then b we are forward to d
10805,11-14,24:33,again b will not send it to c because this is not part of the stem spanish bc
10806,11-14,24:40,is not part of the spanish tree okay and when d received this d will 40 is
10807,11-14,24:46,only 2g they will not forward this to e because
10808,11-14,24:51,the link d e is not on the spanish tree okay similarly when f and e receives the
10809,11-14,24:59,packet they will stop there they will not forward the package to each other because the link between f and e is not
10810,11-14,25:07,part of the spanning tree that is the broadcast initiative at a if
10811,11-14,25:13,the broadcast is initiated at d we do the same thing okay we follow spanning
10812,11-14,25:19,tree send it to the neighbors b and g not here and b will afford it to a
10813,11-14,25:27,area forward to c and cvo forwarding to f and e but not too big
10814,11-14,25:34,okay f and e will not send to each other okay so as you can see we only follow
10815,11-14,25:41,the spanning tree to forward the package then in this case we will not have any
10816,11-14,25:47,flooding and we don't need to worry about redundant package received by the node okay
10817,11-14,25:53,and then you may ask how can we create a spanish tree okay here we are using a
10818,11-14,26:00,spanning tree directly but how can we create a spanning tree so
10819,11-14,26:07,it's actually very easy first you need to choose a center node
10820,11-14,26:12,and then each node each other node will send a unique const join message to to
10821,11-14,26:20,the center node okay as you can see because this is unicast john message this is
10822,11-14,26:27,assume we assume this message is sent to the center node but the message will be
10823,11-14,26:33,forwarded okay trying to be forwarded to the to the center node however the message is
10824,11-14,26:39,forwarded until it arrives at a note already belonging to the spanning tree
10825,11-14,26:45,if it already if that nose already belongs to a spanning tree then we don't need to forward again
10826,11-14,26:52,okay so you are probably still a little bit confused but let's look at an example then you will get that
10827,11-14,26:58,in this example can we choose a center of e
10828,11-14,27:04,okay central we and then any node okay let's start with f f will send a uni cost draw a message
10829,11-14,27:14,to the center node which is e okay you say hey can i join you email say yes for
10830,11-14,27:20,sure you can join me okay then now um
10831,11-14,27:26,e become part i have to become part of the spanish tree okay then the other
10832,11-14,27:33,another node let's see again any other note okay let's see now b is trying to
10833,11-14,27:38,join e okay b is trying to join e b will send a message to e and this message is
10834,11-14,27:46,forwarded to d first and then d for this match is 3.
10835,11-14,27:53,okay um so finally they reach the e and then
10836,11-14,27:58,b d and d e become part of the spanish
10837,11-14,28:04,okay next one maybe a is trying to join a will say hey can i join you
10838,11-14,28:11,okay so anyway i'll send the message okay of course a can send the message to
10839,11-14,28:19,c okay and then c will c can reach e in
10840,11-14,28:24,any enemy okay but a may also send the message to b here in this example it is
10841,11-14,28:30,sending the message to b and the b is already part of the spanning trip so should we forward the message again we
10842,11-14,28:36,do not need okay then a is now part of the spanning tree we continue and you
10843,11-14,28:43,can see c is asking to join and c is now part of the expanding tree and g is
10844,11-14,28:49,asking to join and g reaches d so d is already part of the expanding tree so we
10845,11-14,28:55,can stop then here now we have one constructed
10846,11-14,29:00,spanning tree okay and pay attention the spending tree may
10847,11-14,29:06,be very different if you for if you follow different orders or even if you
10848,11-14,29:12,follow the same order sometimes because you make different decisions uh for forwarding then the spanish tree
10849,11-14,29:19,can be totally different for example even if we do we do the same let's say okay here i have a
10850,11-14,29:26,b c d j
10851,11-14,29:32,still we have e and f
10852,11-14,29:44,okay we are looking at the same structure
10853,11-14,29:56,foreign and now let's follow the same order let's see
10854,11-14,30:01,um sorry let's follow the same order and see we
10855,11-14,30:07,can generate this a different spanning tree okay
10856,11-14,30:13,firstly let's see firstly uh let's see still do f okay f will join e
10857,11-14,30:21,doing this okay the second one we can do b and we can do something else okay of
10858,11-14,30:28,course we can do something else you don't need to to be but here i just want to show you even if you follow the same
10859,11-14,30:34,order sometimes you can construct a totally different spanning tree okay so then b mail say okay can i join you
10860,11-14,30:41,this message this message may be forwarded to d maybe 40 to a maybe
10861,11-14,30:47,forward it to c because b has three neighbors okay let's assume now d is for
10862,11-14,30:53,this message to c okay and same here for this message to
10863,11-14,30:59,to e right or see me forward this message to f or even a
10864,11-14,31:04,okay so let's assume now maybe c had forward this message to f
10865,11-14,31:10,okay then now f is already part of the spanning tree so it doesn't need to continue anymore now b c f e are part of
10866,11-14,31:19,the spanish tree okay then the next one may be uh let's say a is trying to join
10867,11-14,31:26,ama for this message to either b or c because it has two neighbors so a for
10868,11-14,31:32,example now we make a different decision a is trying to send this to c because c
10869,11-14,31:37,is already part of the spanning tree okay so now we have uh we have a joining the this this tree
10870,11-14,31:46,okay then the next one uh let's say maybe um maybe d is trying to join okay if d
10871,11-14,31:55,is trying to join d can either join from uh the consonants message to e or b or g
10872,11-14,32:03,whatever way okay so let's say maybe these for only these two e
10873,11-14,32:08,okay of course it can also afford this to be okay so now d is a part and then j
10874,11-14,32:17,for this 2d and then because d is the only neighbor for g so now you can see
10875,11-14,32:24,the the spanish entry we constructed is very different from the one constructed
10876,11-14,32:29,in the slides before okay although they are different but
10877,11-14,32:35,this this they are all spanning trees and they can all complete the task of
10878,11-14,32:41,broadcasting without redundant packets okay so keep this in mind
10879,11-14,32:47,spanning tree is not unique okay it's not unique you may have very different answers even for the same
10880,11-14,32:54,network structure so this is all about this chapter we are
10881,11-14,33:01,done with chapter four
10882,11-16,0:06,for this chapter we will mainly discuss the the second lowest layer link layer
10883,11-16,0:12,so we will try to understand the error detection correction at link layer we
10884,11-16,0:19,will try to understand the multiple access uh indicator because multiple access is a is a very important problem
10885,11-16,0:26,in nuclear okay we will also talk about the ad addressing for link layer
10886,11-16,0:31,we also talk about the ethernet and vlans okay so those are all the things
10887,11-16,0:37,we will discuss um the need for the link virtualization
10888,11-16,0:42,this part we will not discuss okay this product we will skip um and this part the the data center
10889,11-16,0:51,networking is 5.6 is it's a very quick thing so we can finish it very soon uh
10890,11-16,0:57,5.7 is very important this video has this chapter this section basically summarize what we have learned from the
10891,11-16,1:04,very beginning of this semester okay it's basically uh provides our overview
10892,11-16,1:10,of all the layers tuning clear okay so using one scenario and then we want to
10893,11-16,1:16,uh i really want you to understand this part okay so now let's first we look at the link
10894,11-16,1:23,layer terminologies at link layer for the hosts and launchers we call them as
10895,11-16,1:29,nodes okay the communication channels that connect the adjacent nodes along the
10896,11-16,1:35,communication path we call them as links you are already very familiar with those right we have wider links wireless links
10897,11-16,1:43,and we may have the lines connecting uh the different devices right for the
10898,11-16,1:50,layer 2 packet okay layer 2 packet we call it as a frame
10899,11-16,1:55,okay if you recall what we have learned from the previous layer the application layer we call it a
10900,11-16,2:03,message and then transport layer we call it a segment okay
10901,11-16,2:08,um the network layer we call it a datagram link layer we call it a frame okay this frame encapsulates the network
10902,11-16,2:16,layer of this ground so basically um if you remember what we have learned
10903,11-16,2:23,before okay so then a message is encapsulated
10904,11-16,2:32,with a transport layer header when it comes to the network layer
10905,11-16,2:41,we are adding network layer header we call this as a datagram right
10906,11-16,2:46,so this entire thing is called d this enticing is called segments okay
10907,11-16,3:03,and then now we are adding one more layer one more header to the datagram
10908,11-16,3:10,okay we call this as a frame
10909,11-16,3:15,okay so and pay attention some of you may ask what is the difference between link layer and the network layer
10910,11-16,3:22,pay attention network layer is dealing with um the network
10911,11-16,3:28,um so how i should say for example we are dealing with the source and the destination and we are i think we are
10912,11-16,3:35,discussing what is the best path to reach a destination from the source okay
10913,11-16,3:41,so that we may choose different paths between the source and destination
10914,11-16,3:46,link layer is different link layer do not care about the path the the shortest
10915,11-16,3:53,path or whatever okay uh it has the responsibility of transferring the datagram from one node to the physically
10916,11-16,4:02,adjacent node over a link that means it doesn't care about the path okay it only
10917,11-16,4:10,cares about the neighbors so i only deal with how i can deliver this packet to my
10918,11-16,4:16,neighbors to my physically additionals i do not care what is the shortest path what is the the best least cost path
10919,11-16,4:24,okay so that is the major difference between uh the network layer and the
10920,11-16,4:30,link layer okay um
10921,11-16,4:35,so the datagram transferred by different links um different link types may use
10922,11-16,4:42,different type of protocols okay for example the ethernet if you're we are using a wider links we we should use
10923,11-16,4:49,ethernet as the protocol okay and then if we are using wi-fi we
10924,11-16,4:55,may follow the 880211 protocol okay so then you can see
10925,11-16,5:02,um on the same path from the social definition we may use different link
10926,11-16,5:07,layer protocols determined depending on what kind of links are used
10927,11-16,5:13,on that path okay and each link protocol provides different services
10928,11-16,5:19,okay so if we use the transportation analogy if we are considering a trip
10929,11-16,5:24,from princeton to lazane uh then we may take for example limo from princeton to
10930,11-16,5:31,jfk okay to to the airport and from airport to to another location we may
10931,11-16,5:38,use an airplane and from the other location to the nation when we was trained so then you can see we can take
10932,11-16,5:45,different matters different uh travel or i should
10933,11-16,5:51,say um transportation modes okay so then in
10934,11-16,5:57,this analogy the tourist is a datagram okay we have different com communication
10935,11-16,6:04,links okay then the transport segment like from princeton to jfk is one
10936,11-16,6:09,segment different transportation transport segments are different communication links then the
10937,11-16,6:16,transportation transportation mode is basically the link layer protocol okay
10938,11-16,6:21,we for example we may take bus we may take a plane we may take three they are like different link layer protocols and
10939,11-16,6:29,then the travel agent is actually the right calcium the routing
10940,11-16,6:35,algorithm is telling you what is the least cost path okay what is the best
10941,11-16,6:42,part but regarding one kind of uh transportation method you are using it
10942,11-16,6:49,is determined by the link layer okay so then now let's look at the link layer
10943,11-16,6:57,surface services okay for link layer basically what we do is uh as as i said
10944,11-16,7:03,before we encapsulate the datagram into frame okay we add the link layer header
10945,11-16,7:10,and trailer okay then we also need to deal with the channel access if this is
10946,11-16,7:17,shared media so you think about this for example if you are using wi-fi okay then when we
10947,11-16,7:23,have multiple devices sharing the same wi-fi okay we are sharing the air
10948,11-16,7:29,basically then in this case we may have competitions between those devices they
10949,11-16,7:34,may all want to send something okay but then how can we control the access problem okay who which one can access uh
10950,11-16,7:43,the channel okay so that is uh that is uh diode
10951,11-16,7:49,um by the link layer and then the mac addresses a mac address is used in frame
10952,11-16,7:56,headers uh to identifying the source and destination address this is different
10953,11-16,8:01,from the ip address okay so i think you have already heard about
10954,11-16,8:07,mac address and we will learn more about this okay um
10955,11-16,8:12,and we also need to think about the reliable delivery between adjacent nodes we have learned something about this in
10956,11-16,8:20,the transport layer but um we also need to consider this in the
10957,11-16,8:25,link layer okay so unique layer if you are using for example some
10958,11-16,8:30,um low bit error link then you don't need to consider a lot about the reliability especially if you are using
10959,11-16,8:37,fiber for example we know fiber has very low bit error rate okay but if you are
10960,11-16,8:45,using like wireless links this has a this type of links has a very high error
10961,11-16,8:52,reads then in this case we need to really consider how to ensure both the
10962,11-16,8:58,link level reliability and the end to end reliability so you may think what are the difference
10963,11-16,9:04,between link level reliability and end-to-end reliability so link level basically means we want to
10964,11-16,9:10,collect correct errors as soon as possible okay so for example from one node to the neighbor
10965,11-16,9:17,okay we want to know the error and correct it as soon as possible if you if
10966,11-16,9:23,we do only end to end reliability then that means from source to the destination okay then this is a long way
10967,11-16,9:31,from source to the destination in this case when we find the error it may be
10968,11-16,9:36,too late already okay we have to go back to the source again to to send the feedback and so we maybe do resending
10969,11-16,9:44,etc so it's not as efficient as the link level reliability okay
10970,11-16,9:49,that's the major difference um for link layer okay link layer may
10971,11-16,9:56,also do the i mean the services we expect is it may also do flow control
10972,11-16,10:02,which means the pacing between adjacent sending and receiving notes we don't want to overwhelm the receiving notes
10973,11-16,10:09,okay and we may also want to do the error detection so the arrows may be caused by the
10974,11-16,10:16,signal attenuation or some noise okay the receiver can detect the presence of
10975,11-16,10:23,errors and then provided feedback to the sender for real transformation or simply drop the frame
10976,11-16,10:30,okay so some of the receivers can also do error correction okay which means we can
10977,11-16,10:38,directly detect the errors and crack the bit errors on our own then in this case
10978,11-16,10:43,we don't need to border the sender okay and um the communication can be half
10979,11-16,10:49,duplexed or full duplex so with half duplex the nodes at both
10980,11-16,10:54,ends of link can transmit but not at the same time okay
10981,11-16,11:00,so you may ask where is the link layer implemented it is actually implemented
10982,11-16,11:06,in each and every host in something called the nick card
10983,11-16,11:12,okay or we call it the network adapter or network interface card
10984,11-16,11:19,okay um so so for example the computers will
10985,11-16,11:25,know it may have the ethernet card 80211 card okay so those those cards are
10986,11-16,11:32,used the network adapter card are used to implement the link layer okay so this
10987,11-16,11:38,is a this card is usually attached to the host the system to the computer
10988,11-16,11:43,system bus okay it is actually a combination of the
10989,11-16,11:49,hardware software and also the firmware as you can see here is the bus okay and then we have a cpu connected to
10990,11-16,11:57,it and the memory connect to the bus also this uh network adapter card
10991,11-16,12:02,connected to that okay and you can see uh for cpu it's it is uh
10992,11-16,12:10,it involves several layers application layer to link layer and then the network
10993,11-16,12:16,adapter card or the new card is only dealing with the physical layer and the link layer okay
10994,11-16,12:24,so at the standing side and there's a new side when we receive a datagram from
10995,11-16,12:29,the cpu okay from upper layer then we encapsulate this datagram in a frame
10996,11-16,12:37,something called frame okay we also add the arrow checking bees okay the rdt the
10997,11-16,12:45,flow control etc and then this this gram is sent to the receiving host which is usually the
10998,11-16,12:52,neighbor okay the receiving house will look for errors do rdt
10999,11-16,12:59,um which is reliability transfer okay um and uh then extract the datagram and
11000,11-16,13:06,pass this datagram to the up layer at the receiving side so you can see this diagram is finally
11001,11-16,13:12,passed it to the app layer for uh more um actions okay so this is a uh the link
11002,11-16,13:21,layer the basics for link layer and 5.2 is about error detection and
11003,11-16,13:28,correction as i mentioned uh error detection and correction is a very important part in nuclear actually
11004,11-16,13:34,so for arrow detection and correction we usually have some beats in the frame
11005,11-16,13:44,okay for those pieces we call them as ed saybs keep this in mind
11006,11-16,13:50,edc bits okay those adcbs are usually attached to
11007,11-16,13:57,the datagram for error detection and correction okay
11008,11-16,14:02,so for example here we have the data we have a datagram
11009,11-16,14:08,okay and we have the data which is represented with d
11010,11-16,14:14,and then edc the error detection and the correction bits are attached
11011,11-16,14:20,to the data okay then this entire thing is sent
11012,11-16,14:26,through a bit arrow prone link then later when the receiver side
11013,11-16,14:32,received this okay it will have the d prime and edc prime
11014,11-16,14:38,so then it will use the edc bits to check if all the bits in the d
11015,11-16,14:46,prime is okay if it is okay no arrows are detected
11016,11-16,14:52,then this datagram will be passed to up layer but if this is not okay if we
11017,11-16,14:58,detect some errors then we will take some other action for example we may notify the sender to resend it again or
11018,11-16,15:06,we may drop the frame okay so let's now look at a very simple
11019,11-16,15:13,example this very simple example is uh the single bit parity okay so character
11020,11-16,15:21,checking is actually very easy way to do the error attacking and the detection
11021,11-16,15:26,although it's not very reliable but still it's one way okay so now you can
11022,11-16,15:31,see we have data this is a the d part
11023,11-16,15:41,and this is the edc part okay we can do for example all the bits old parity
11024,11-16,15:48,checking or even purchase hacking okay so if we do all the party checking
11025,11-16,15:54,okay uh we can say okay the number of ones should be an odd number
11026,11-16,16:01,of ones should be old number you can count for example one two three four
11027,11-16,16:07,five six seven eight nine okay this is uh odd number nine is odd
11028,11-16,16:14,number then in this case we do we for the bit party uh bit or the edc bit we put zero
11029,11-16,16:23,now the total number of ones is 9 is old number
11030,11-16,16:29,okay so if we are doing even project checking then we will need to make the
11031,11-16,16:35,number of ones a even number so if we are doing the same data
11032,11-16,16:41,this is odd if the same data
11033,11-16,16:47,then here the party beat should be one okay to make the number of ones as even
11034,11-16,16:55,number okay then for single bit part checking we can detect the arrows very easily so
11035,11-16,17:03,for example if one day you you notice this number one is chained to zero okay
11036,11-16,17:08,if you count number ones it is a eight number one is it is a even number
11037,11-16,17:15,then you can easily tell oh there is error in the data because the number of ones is an even number
11038,11-16,17:22,what we are doing now is actually odd part checking okay we are looking at the
11039,11-16,17:27,old parachute you know the even parallel checking this is how you can detect the errors but sometimes this single bit
11040,11-16,17:34,part checking may not work because what especially if you have two
11041,11-16,17:41,or all number or even number of bits flipping at the same time for example if
11042,11-16,17:47,you have this one flipped to zero and also this one click
11043,11-16,17:52,to zero okay then if you count the number ones now it's seven seven is an odd number so
11044,11-16,18:00,it is uh uh you may think oh there's no error but actually we have two bits of
11045,11-16,18:06,error okay that is the problem um
11046,11-16,18:12,and you can also do a two-dimensional error two-dimensional bit priority
11047,11-16,18:18,checking so if you do two dimensional basically you are you are doing the
11048,11-16,18:24,price checking in both the rows and the columns for example now
11049,11-16,18:29,you can say we are doing this is doing actually even project checking okay so
11050,11-16,18:34,you can say uh this this is the data one zero one zero one is the data they are
11051,11-16,18:40,all this data okay and then if you count number of ones for each row you have one
11052,11-16,18:46,two three four so if fortunate for data you have only one two three ones this is
11053,11-16,18:51,all the number so that's why we put one here and this is one two three four so we
11054,11-16,18:57,have four ones so we put zero here and you have one two three this is uh
11055,11-16,19:04,uh all number again so you put one here so if you look at each column
11056,11-16,19:10,each column the one two okay or the uh even number we put zero one two we put
11057,11-16,19:16,zero one two three odd number we put one to make it even and one two zero okay one two uh sorry
11058,11-16,19:27,one so we add one to make it even so this is how we uh do the beat party
11059,11-16,19:34,uh in two-dimensional okay we put the data into rows and then we do the price
11060,11-16,19:41,checking for each for all the rows and the uh columns okay if we have something
11061,11-16,19:46,wrong okay so for example if this is this bit flipped to zero then you can easily
11062,11-16,19:53,detect the error because when you count the numbers you can see one two three four this is fine even one two three
11063,11-16,20:00,this column has a problem because this is odd okay and then one two three four
11064,11-16,20:06,sorry this row has a problem okay this row has no problem one two three four is
11065,11-16,20:12,even this row is fine then we look at each columns so one two even is fine one
11066,11-16,20:18,this is uh not even this is odd so we see this column has a problem
11067,11-16,20:24,and then one two three four even one two even one two even okay so finally then
11068,11-16,20:30,you can see oh we are able to find out the beat the arrow bit okay so we know
11069,11-16,20:36,this error this bit has arrow why because it this speed should belong to this row
11070,11-16,20:42,and this column then now we can do error correction directly we can change this 0 to 1. this
11071,11-16,20:50,is how we do arrow correction okay um of course again this may not be
11072,11-16,20:56,reliable especially when you have more piece flipping at the same time okay
11073,11-16,21:03,then you may not be able to detect arrows and crack the errors no matter single pair checking or two-dimensional
11074,11-16,21:10,preparing checking they they both have problems
11075,11-16,21:15,um the problem is that when we have multiple multiple bits flipping at the same time then uh the bit parent
11076,11-16,21:23,checking may not work very well okay and they may not be reliable for single
11077,11-16,21:29,apparently single people chain for example if you have two bits or four bits or eight or any even number of
11078,11-16,21:36,beats sleeping at the same time then you cannot detect the errors right uh
11079,11-16,21:43,similar for a two-dimensional beat party checking for two-dimensional b parachuting sometimes you if you have to
11080,11-16,21:49,be sleeping at the same time then uh you cannot detect errors for that
11081,11-16,21:57,specific column or specific row okay so before we have also learned another
11082,11-16,22:04,different way of error checking i think you still remember it's called checksum
11083,11-16,22:09,right so the goal of checksum is also to tell the errors in the transmitted
11084,11-16,22:15,packet um so checksum is usually used at the
11085,11-16,22:20,transport layer okay basically the center will change the segment contents
11086,11-16,22:26,as a sequence of 16 beat integers then we check that we add
11087,11-16,22:32,those um 16-bit integers together to calculate
11088,11-16,22:38,to check them and then sender will put this checksum value into a checksum field the receiver will when the
11089,11-16,22:46,receiver received the checks and the receiver will basically um check and we'll do the same same
11090,11-16,22:53,computation following the way that sandra has used okay then if
11091,11-16,22:59,um receiver can get the same results we said no error okay if if
11092,11-16,23:04,um the there are some differences between the checksum from sender and the
11093,11-16,23:11,checksum calculated by the receiver then we say oh there is a error detected okay
11094,11-16,23:17,so that is the checksum and then for a link layer okay for link layer
11095,11-16,23:25,a more powerful way to do error detection is using the psycholic
11096,11-16,23:32,redundancy checking so this is more much much more reliable than the one we
11097,11-16,23:40,learned before the beat parity checking okay um so generally if you look at the uh
11098,11-16,23:47,cdc okay cyclic through dentist check it's the same thing we still firstly we
11099,11-16,23:53,need to have data okay and then we need to have the um
11100,11-16,23:59,aerobics so here data you can see uh it's it's it is represented with d okay
11101,11-16,24:05,uh we so for example we may have db so small d small d beats of data to be sent
11102,11-16,24:12,okay and then uh for the crc bits okay
11103,11-16,24:18,it is uh represented with the capital r so the crc bits are the cyclic redness
11104,11-16,24:25,check beats okay so you may have a small arbits of crcps okay so anyway you can
11105,11-16,24:33,see it's still composed of both data and the edc bits okay do you still remember
11106,11-16,24:40,the error so here you can see uh this is like the general principle for error
11107,11-16,24:46,detection right for arrow detection we firstly we have the data and then we
11108,11-16,24:51,have the error detection and correction bits edc bits okay then this this entire
11109,11-16,24:59,thing will be sent through the bit error prone link we get d prime and edc prime then we
11110,11-16,25:05,have some way to verify if the data is fine or not okay
11111,11-16,25:11,so then in heritage hacking um method the part the the adcbs are
11112,11-16,25:18,just the disparity bits so very easy then for the cyclic redundance check
11113,11-16,25:25,method the edc beats are those crc bits those capital r's okay
11114,11-16,25:33,so now we we can view the data
11115,11-16,25:38,we can view the database d as a binary number okay
11116,11-16,25:44,um then you may ask how can we choose the crcps how can we determine these rc bits okay
11117,11-16,25:52,so let's look at this we need to before
11118,11-16,25:57,we need to determine the r capital we need to firstly choose something called
11119,11-16,26:03,generator g okay this g is is more r plus one bit
11120,11-16,26:11,okay that means if your error checking and detection beats
11121,11-16,26:17,has small rbs then the generator has one more bit
11122,11-16,26:22,so if this is more or equal to third then the generator has four bits okay so
11123,11-16,26:28,what is this generator used for this generator is shared by the sender
11124,11-16,26:34,and the receiver okay so basically the center will choose
11125,11-16,26:40,um small r small rcrc bits okay and then determine this is a big r
11126,11-16,26:49,use that to determine the uh big r okay so sorry basically sorry again so um
11127,11-16,26:57,basically the sender and the receiver will use this g to calculate this r okay
11128,11-16,27:05,their relationship is that g has one more bit than the big r
11129,11-16,27:12,okay so now the goal for the crc is that
11130,11-16,27:17,we need to choose our small r cbs which we need to choose a
11131,11-16,27:24,big r okay so that this entire thing this data
11132,11-16,27:31,plus this big r can be divided by big g
11133,11-16,27:40,okay so it's it's a how should i say it's a actually it's a um very
11134,11-16,27:46,straightforward thing okay generally what we need to do is we need to choose a generator g this generator is shared
11135,11-16,27:55,by the sender and the receiver at the same time okay so the sender will use this j
11136,11-16,28:03,generator to determine these are
11137,11-16,28:08,okay and make sure this entire thing
11138,11-16,28:14,is divided by can be divided by generator
11139,11-16,28:20,okay and it has a no remainder okay then when the sender then then the
11140,11-16,28:27,sender will send this entire thing d plus r to the receiver when the receiver
11141,11-16,28:35,receives this entire packet the receiver will verify by doing this entire thing
11142,11-16,28:43,divided by the generator because we i just told you the generator is shared by
11143,11-16,28:48,the central and receiver right so receiver also know the generator then the receiver will
11144,11-16,28:54,use this entire thing to divide by the generator if there is no remainder
11145,11-16,29:00,okay if there is no remainder or at the remainder sorry i should say the remainder is zero okay then that means
11146,11-16,29:09,no error is detected but if the remainder is not zero then we
11147,11-16,29:15,say the error is directed or detected okay so this is the crc algorithm
11148,11-16,29:23,um then how can we how can we represent this entire thing okay so in binary in
11149,11-16,29:31,binary if you want to represent this entire thing what you need to do is d
11150,11-16,29:37,times 2 because this is binary so d times 2 2 r because we have rbs xor is
11151,11-16,29:46,like the plus okay it's like e um in
11152,11-16,29:51,decimals like plus so because we learned we learned
11153,11-16,29:56,um for example 0xor 0 equals to
11154,11-16,30:01,uh zero one xor one equal to zero right
11155,11-16,30:10,so uh zero x over one equal to one
11156,11-16,30:19,one x over zero equals to one so you can see
11157,11-16,30:25,um it's like decimal plus okay it's like decimal plus in in binary so for example
11158,11-16,30:31,in decimal we can say
11159,11-16,30:48,so this number this number in this entire number this entire number we call
11160,11-16,30:53,it 68 543 right so now if we represent this if
11161,11-16,31:00,this is a two bits this is three bits
11162,11-16,31:08,okay so what we can do is we can use if we want to represent this number we
11163,11-16,31:14,can use 685 times 10 to
11164,11-16,31:20,2 okay plus 43.
11165,11-16,31:25,okay 685 times 10 to 2 plus 43. then we can
11166,11-16,31:32,represent this entire number with a formula like this okay so it's
11167,11-16,31:37,this is the same thing in binary we can use this
11168,11-16,31:42,d times 2 2r okay here if r equals 2 this is 2 to 2
11169,11-16,31:49,if r equal to 3 is 2 to 3. xor the
11170,11-16,31:54,uh the r okay so this is the mathematical formula then as we said as we said our goal is
11171,11-16,32:03,that this entire thing this entire thing can be divided by a
11172,11-16,32:10,generator j okay so we want this entire thing
11173,11-16,32:17,to be divided by a generator j okay so it's a n times j
11174,11-16,32:26,then this is equivalent to d times 2 to r equal to n g x o r r so
11175,11-16,32:36,basically we can remove we can move this to the right
11176,11-16,32:41,okay so that's because we know for xor is where x has a very interesting
11177,11-16,32:46,feature that is foreign
11178,11-16,33:10,okay so that's why we can do we can do um the second formula here
11179,11-16,33:17,okay but basically move the x or r to the right and this second formula is
11180,11-16,33:23,also equivalent two this
11181,11-16,33:30,okay that means if we if that means we can do white
11182,11-16,33:36,this d times 2 to r by g
11183,11-16,33:42,okay and then the remainder is r
11184,11-16,33:48,okay then the remainder is r so you may also why do you do this because you think about this our goal our goal is to
11185,11-16,33:56,make this entire thing can be divided by j okay so our goal is that we want to
11186,11-16,34:03,choose a big r we want to choose the edc bits or crcps
11187,11-16,34:10,so that this entire d and r package can be divided by the generator
11188,11-16,34:18,j okay so then how can we calculate this r we can calculate this r use this method
11189,11-16,34:26,okay use this formula d times 2 to r divided by g and we get the remainder
11190,11-16,34:33,okay so for example let's look at the example on the right now we have data one zero
11191,11-16,34:40,one one one zero this is the data and we know
11192,11-16,34:48,r equals to thirds more r equal to third that means here
11193,11-16,34:53,here we have three bits and the arrow bits okay arrow checking and detection bits
11194,11-16,34:58,we have three bits so now what we do is we use d
11195,11-16,35:05,times 2 to r okay that's basically means okay we use d and we add three zeros
11196,11-16,35:12,that is two to r right then this entire thing is divided by g
11197,11-16,35:19,okay this j here the j is chosen randomly by the center and receiver
11198,11-16,35:25,okay so then we use this entire thing to divide by j and then when we get the
11199,11-16,35:31,remainder the remainder is r okay so how do we do calculation in binary we'll do
11200,11-16,35:37,the calculation like this so we we get one and one we get one zero
11201,11-16,35:43,zero one here we do the xor okay binary so one x over one is zero one x or a
11202,11-16,35:51,zero equal to one so we have one zero one and then we have the zero falling
11203,11-16,35:56,down okay um
11204,11-16,36:03,let's see yeah one oh wait for story we unfortunately have one following though we personally have one following down
11205,11-16,36:10,and then we do zero here we have zero zero zero okay
11206,11-16,36:15,then now we do x or again at y x or a zero equal to one
11207,11-16,36:21,one x o r zero equal to one that's zero x or zero equal to zero okay then this
11208,11-16,36:30,zero now can fall fall down okay then we do we can do one
11209,11-16,36:35,so then we have one zero zero one now we do x over again
11210,11-16,36:41,you can see zero x over one is one one x or zero is one then we have one one and
11211,11-16,36:49,then zero following down so we continue until we finish the division now we get
11212,11-16,36:56,x we can we get this zero one one so then these three bits
11213,11-16,37:02,are the arby's okay are the arrow detection and checking bits okay
11214,11-16,37:09,so that basically means
11215,11-16,37:15,originally for the data the data is this
11216,11-16,37:24,one zero one one one
11217,11-16,37:29,zero okay this is the data and then we need to calculate the r how
11218,11-16,37:36,do we calculate that we use d times 2 to r okay divided by the generator j the
11219,11-16,37:44,generator is a real generator is used to generate the remainder so then we get the remainder of 0 1 1
11220,11-16,37:52,okay then this is a remainder 0 1 1 is the r then now the center will ascend this
11221,11-16,37:59,entire thing to the receiver the receiver will use one zero one one one zero zero one one
11222,11-16,38:06,to divide to be divided by the generator j one zero zero one
11223,11-16,38:12,if there is no remainder no error if there is a remainder zero a non-zero
11224,11-16,38:18,remainder then we see there is error okay so that is how crc is used i know
11225,11-16,38:24,it's a bit uh complicated um so if you do not understand how this is
11226,11-16,38:32,calculated it's totally fine but i want you to understand how this r is is
11227,11-16,38:40,calculated okay so i want you to understand the left part the right part
11228,11-16,38:46,is fine okay any questions
11229,11-18,0:08,all right okay so the next part is the multiple access protocols
11230,11-18,0:14,multiple access protocols is a very important part in this chapter and we we
11231,11-18,0:21,will look at that so um
11232,11-18,0:26,we we usually have two type of links in link layer one type is called the point
11233,11-18,0:33,to point link okay point to point link um it's like it's like the telephone line
11234,11-18,0:41,between two people so this is not shared to anybody not shared with anybody so
11235,11-18,0:47,then this is like a reserved okay you don't need to consider about the sharing part but the second type of link is is
11236,11-18,0:55,the sh is uh the shared type of link or we call it broadcast type of link okay
11237,11-18,1:02,so this is used a lot actually for example we may use this in the ethernet
11238,11-18,1:09,in the old style internet okay um although now we do not use it very
11239,11-18,1:16,often but you can see this problem indeed exists before okay also for wireless okay we may also
11240,11-18,1:26,have different devices sharing the same media basically the air right sharing
11241,11-18,1:32,the same media to um commute and we may also have the satellites
11242,11-18,1:38,okay um the different base stations sharing the also the space okay to communicate
11243,11-18,1:46,with the satellite so this kind of sharing is like a people staying in the
11244,11-18,1:52,same room for a party or whatever okay we are sharing the air okay so everybody
11245,11-18,1:59,want to say something everyone probably want to send out a message okay then in
11246,11-18,2:05,this case we may have the competition problem okay if everybody is saying something
11247,11-18,2:11,can we hear each other clearly we cannot okay so that is called the multiple
11248,11-18,2:16,access problem that means when they are sharing the same media
11249,11-18,2:21,how do we ensure the quality of communication
11250,11-18,2:27,so if we have a single shared broadcast channel and we have two or more simultaneous
11251,11-18,2:35,transmissions by the nodes okay that means if we have nodes who want to communicate at the same time
11252,11-18,2:43,then we may have interference okay so sometimes one note may receive
11253,11-18,2:51,two or more signals at the same time then this is called clear
11254,11-18,2:56,it's like when you are standing in a party you you are listening you may receiving
11255,11-18,3:03,you may hearing two people saying something at the same time
11256,11-18,3:10,then in this case your you you can you may not be able to process the the
11257,11-18,3:15,information okay it's the same thing if one node receives two or more signals at the same
11258,11-18,3:22,time then this is a calculator okay so then in this case we need to
11259,11-18,3:28,have some kind of protocol called multiple access protocol okay multibox says protocol is a kind of
11260,11-18,3:35,distributed algorithm that is used to determine how the nodes can share the
11261,11-18,3:40,channel okay basically it's like um if we are in a party then we can say
11262,11-18,3:47,oh each time everyone uh each time we can have only one person saying
11263,11-18,3:54,something okay if you want to say something you need to raise your hand it's like in a
11264,11-18,4:00,classroom for example okay so this kind of album is called the multiplicious
11265,11-18,4:05,protocol is used to to control the communication um in the in one channel okay so the
11266,11-18,4:14,communication about the channel sharing must use the channel itself okay
11267,11-18,4:20,um so we do not have like another channel for coordination we do not have another
11268,11-18,4:26,channel say oh okay we use another channel to coordinate and then use this channel to communicate it's not possible
11269,11-18,4:33,so basically including the even for the channel
11270,11-18,4:38,sharing the communication about channel sharing itself also need to use the channel okay also
11271,11-18,4:45,used to use the channel itself um so then what is an ideal multiple
11272,11-18,4:52,access protocol our dla our dla we if we have a
11273,11-18,4:58,broadcast channel of read r rbps beats per second okay so then the
11274,11-18,5:05,ideal situation is that firstly well one node wants to transmit
11275,11-18,5:12,okay if only one node wants to transmit then of course it can send attribute r
11276,11-18,5:18,that means it can utilize the maximum rate okay do whatever he or she wants to do
11277,11-18,5:24,okay so one but when we have m nodes
11278,11-18,5:30,who all wants to transmit then in this case each note can send at
11279,11-18,5:36,an average rate of r divided by m okay that's that means we share
11280,11-18,5:41,okay and also we want this multiple access
11281,11-18,5:47,protocol to be fully decentralized that means we do not need any special node to
11282,11-18,5:53,code in the transmissions okay because if we have some node to coordinate then
11283,11-18,5:58,we may have like single point of failure if this node is down then this entire algorithm cannot work okay uh the second
11284,11-18,6:06,thing is we do not need any synchronization or clocks or slots or etc because we we all know
11285,11-18,6:12,synchronization is actually very difficult okay and then the fourth sim
11286,11-18,6:19,criteria is that this protocol should be very simple so these are the like what we are
11287,11-18,6:29,expecting for the protocol what we hope that we can help right but in reality in
11288,11-18,6:35,reality we may face some problems okay um generally we have three broad classes
11289,11-18,6:42,of uh mac protocols multiprocess protocols
11290,11-18,6:48,um so first type is called channel petitioning we actually learned about this before uh channel partitioning
11291,11-18,6:55,basically means we can divide the channel into smaller pieces in terms of
11292,11-18,7:02,time or frequency or code etc okay
11293,11-18,7:07,um so for example before we learned fdma
11294,11-18,7:17,tdma okay so those are all china channel partitioning protocols and the second
11295,11-18,7:23,type of protocol are called random access protocol so random access means the channel is
11296,11-18,7:31,not divided and we like we may allow clearance happening okay the thing is when we have
11297,11-18,7:38,clearance how can we recover from clearance that's the most important thing
11298,11-18,7:44,the third type is called taking turns taking turns basically means the notes
11299,11-18,7:49,take turns but knows with more to send can take longer turns okay so those are
11300,11-18,7:56,the three types and now we want to look at each type okay so the first type as i
11301,11-18,8:02,said tdma tdma is the time division multiple access okay so we need to
11302,11-18,8:09,divide the time into um into different time slots demanded
11303,11-18,8:16,yes divide the time into different time slots then basically the nodes can access to the channel in runs it's like
11304,11-18,8:24,runs okay so each station gets a fixed length of slot in each round
11305,11-18,8:32,um so for example now we can divide this into six
11306,11-18,8:38,slots for six notes or six stations okay then for example station one will
11307,11-18,8:45,use the first time slot station two will do the second time slot as you can see
11308,11-18,8:50,if we have one station who doesn't want to send anything then
11309,11-18,8:57,the time slots dedicated to that station will go idle
11310,11-18,9:03,okay so basically means i use slots go either
11311,11-18,9:08,um so the problem is that we may have for example here we have one three and a
11312,11-18,9:14,four sending the packets but slots two five six are idle okay so this in this
11313,11-18,9:20,case where as you learned before we may have the waste of time okay and similar
11314,11-18,9:25,things for fdma for fdma it means frequency division multiplexes we do one
11315,11-18,9:32,channel into different frequencies okay
11316,11-18,9:38,and then for example if we have six channels we have six stations we can
11317,11-18,9:44,have six channels okay or even more okay
11318,11-18,9:49,um but anyway again uh now you can see this uh station one may use
11319,11-18,9:57,this frequency station through music this one station four moves this one okay again there may be some
11320,11-18,10:07,um frequencies that goes idle frequency bands go idle okay so that is fdma
11321,11-18,10:17,um that's the first type called channel partitioning the second type is called random access protocol
11322,11-18,10:26,so in random access protocol um when the nodes wants to send a
11323,11-18,10:34,package then it can directly send it out at a full read r
11324,11-18,10:39,okay there is no like coordination among the notes
11325,11-18,10:44,um when we have two or more nodes transmitting at the same time
11326,11-18,10:50,okay that'll cause a node may receive the receiver may receive like multiple
11327,11-18,10:55,signals at the same time then in this case we have clearance okay so basically the random access mac
11328,11-18,11:02,protocols will need to specify how to detect the clearance and how to
11329,11-18,11:09,recover from clearance so these are some of the examples for
11330,11-18,11:15,mac protocols for random access mac protocols so lots of the aloha aloha
11331,11-18,11:21,um csma csma cd and csmsa so then we will look at this okay so the first
11332,11-18,11:28,thing let's look at the slotted aloha for slot in the aloha we assume all the
11333,11-18,11:35,frames have the same size l bits okay and then we divide the time into equal
11334,11-18,11:43,side slots so pay attention here although we are also dividing the time but this is no
11335,11-18,11:49,time not time division it's it is different okay later if i learned
11336,11-18,11:54,um so generally we divide the time into equal size slots each slot is l over r
11337,11-18,12:02,seconds i think you are very familiar with this lor right so what is this this is a this
11338,11-18,12:08,is the transmission delay right so that means if we have lps okay
11339,11-18,12:14,then this can be divided by uh the transmission rate r okay then for one
11340,11-18,12:21,packet if we want to fully center this out fully push this out to the link it
11341,11-18,12:27,takes air over our seconds okay so we will divide the time
11342,11-18,12:33,equally each time slot is lor and then we have a requirement
11343,11-18,12:40,the requirement is that if a node wants to transmit
11344,11-18,12:46,a package that knows the node has to start only at the slot beginning
11345,11-18,12:54,okay the nodes are those nodes are also synchronized only start at a slot
11346,11-18,13:00,beginning means you cannot simply start in the middle of a slot okay so if we
11347,11-18,13:06,have two or more nodes transmit in the slots then all the nodes can detect the delay clear so then the operation is
11348,11-18,13:13,like this when we when the node obtains a fresh frame then this node will need to wait until
11349,11-18,13:22,the beginning of the next slot there's no cleaning then the node can send the
11350,11-18,13:29,new frame in the next slot if there is clearance the node will need to
11351,11-18,13:35,re-transmit this frame in each subsequent slot with a probability p and
11352,11-18,13:42,t of success okay so what does this mean this means okay if there is no clearance
11353,11-18,13:48,i can directly send it out in the next slot but if there is a clearance okay
11354,11-18,13:54,then i may try again in the uh second time slot
11355,11-18,14:02,or in a third time slot or in a fourth time slot and to your success okay so
11356,11-18,14:09,for each time slot i may try i may try so what is the probability of trying
11357,11-18,14:15,probably is p okay i know you are you still you probably
11358,11-18,14:22,still feel confused but let's now look an example and then you will feel better okay so for example
11359,11-18,14:29,here you can see we already winding the time okay into different time slots okay each
11360,11-18,14:38,time slot is uh lor
11361,11-18,14:43,now we may have node one who wants to send at this time slot
11362,11-18,14:52,this time slot this one and also this one
11363,11-18,14:57,okay so another two may also want to send nother may also want to send and
11364,11-18,15:03,then you can see we may have clearance for example in the first time slot
11365,11-18,15:13,not 102 and also they all want to transmit then this one is a clear
11366,11-18,15:20,so then you you can look at the this third time slot
11367,11-18,15:26,for third one we also have a clearance
11368,11-18,15:31,okay this one is a success here
11369,11-18,15:38,another cleaner and then this wine success this one's success
11370,11-18,15:43,okay then you can see um the good thing of all the pearls of
11371,11-18,15:49,slotting allah is that a single active node can continuously transmit at four
11372,11-18,15:57,root of r okay add four reads out the channel
11373,11-18,16:03,and this is a highly decentralized because we do not have any nose coordinating okay we only need the slots
11374,11-18,16:12,in the nose to be synced okay
11375,11-18,16:18,and this is also very simple but the console slotted aloha is that we
11376,11-18,16:25,have clearance okay we may have whisking slots okay a lot of clearance actually you can
11377,11-18,16:31,see here we have uh three slots they have clearance okay and we only have
11378,11-18,16:38,three slots success so the in this example the successful
11379,11-18,16:44,read is like only 50 percent okay and we also have a lot of idol
11380,11-18,16:49,slots okay um and also the nodes must be able to
11381,11-18,16:55,tell the clearance as soon as possible okay um otherwise it's just a width of uh i
11382,11-18,17:03,would say a whistle power okay or waste of time because we know if
11383,11-18,17:08,um there is clearly even if you you if you still continue to transmit data it
11384,11-18,17:14,will finally fail right and also we need the synchronization of
11385,11-18,17:20,the clocks so that those are all the um disadvantages of the slotted aloha
11386,11-18,17:27,and you may you may be curious about the efficiency for slotted aloha okay uh the
11387,11-18,17:33,efficiency okay is is basically means the long run fraction of the successful
11388,11-18,17:40,slots okay that means if we have many nodes
11389,11-18,17:46,all have all of those nodes have many frames to send then what is the
11390,11-18,17:53,fraction of successful slots in the long run okay suppose we have nodes
11391,11-18,18:01,with many frames to send each transmits in slot with the
11392,11-18,18:06,probability p now we want to calculate the efficiency okay so now pay attention
11393,11-18,18:12,we have unknowns okay we have nodes and we all want to send frames okay i
11394,11-18,18:20,would say nothing the old ones to the many of them have streamed to to send
11395,11-18,18:26,and each each transmits in slot with the probability option
11396,11-18,18:33,that means in this time slot okay each node has a probability of p
11397,11-18,18:43,to send a frame okay then if we want to ensure
11398,11-18,18:50,that a node is successful okay and we want to ensure
11399,11-18,18:55,a given node has a success in a slot that means for example
11400,11-18,19:02,if we look at only this time slot okay then for this given node
11401,11-18,19:10,if we want we we know that in this time slot we may have multiple nodes right
11402,11-18,19:16,not one two three and even more okay so let's now look at a node i
11403,11-18,19:25,for this node i if we want this node i to be successful then we we know the
11404,11-18,19:32,probability for this node i to send is p
11405,11-18,19:38,foreign ty for this node i to send a frame is p
11406,11-18,19:43,okay and we want p to happen okay and at the same time we want to
11407,11-18,19:52,ensure all the other nodes are silent all the other nodes they should not send
11408,11-18,19:59,anything so how do we ensure they do not send anything that means
11409,11-18,20:06,we need to have if they do not send then the probability for not sending is y
11410,11-18,20:12,minus p probability for not sending is one minus p if we want to ensure n minus 1 notes
11411,11-18,20:21,all being this all being silent at the same time then it is 1 minus p to the
11412,11-18,20:27,power of n minus one okay so that is
11413,11-18,20:33,the probability for node i to be successful of sending but now we need to
11414,11-18,20:38,consider um we don't care if this is not i or not the j or node node x node c right so
11415,11-18,20:46,that if we have unknowns as long as one of them is successful then we are happy
11416,11-18,20:52,okay so that's why for and notes
11417,11-18,20:58,if any of them is successful then the probability is n times
11418,11-18,21:06,p times 1 minus p to the power of n minus one okay so that is actually the
11419,11-18,21:13,probability for any node to be successful
11420,11-18,21:19,okay then we need to find uh we need to know you may you may want to know what is the
11421,11-18,21:26,what is the number for this okay so if we have a lot who knows
11422,11-18,21:32,and um that means if n goes to infinity
11423,11-18,21:40,okay so then this entire thing will becomes 1 over e
11424,11-18,21:47,this is about 0.37 okay so that means for slotted aloha for
11425,11-18,21:57,slotted aloha uh the channel used for useful transmissions
11426,11-18,22:03,is um at best okay uh the reit is uh we can
11427,11-18,22:10,use only about 37 percent of the time okay you can see the efficiency is
11428,11-18,22:16,actually very low very low that's why slotted aloha is like it's um
11429,11-18,22:22,i would say in terms of efficiency this is not a good choice for a mic box set
11430,11-18,22:27,protocol okay and the second type of aloha is uh pure uh or we call it
11431,11-18,22:35,um pure aloha or and slotted aloha okay so for an slotted aloha for unsoluted
11432,11-18,22:43,aloha basically the node can start at any time the transmission cannot can
11433,11-18,22:51,start at any time it doesn't need to wait until the beginning of a slot so there is no time slot okay it can start
11434,11-18,22:58,from any time and then as you can see the probability for collision actually
11435,11-18,23:04,increases right why because you can see if this is the node i we want this one
11436,11-18,23:10,to be to be successful right if we want this one to be successful
11437,11-18,23:15,then we need to ensure nobody is sending in this time frame
11438,11-18,23:21,because if any node is starting in this time frame then it will likely hear me
11439,11-18,23:30,how clearing okay it will likely use the time for by by node i
11440,11-18,23:37,okay and we also need to ensure nobody is starting in this time slot because
11441,11-18,23:43,you can see if this purple one starts here then we will have cleaner here
11442,11-18,23:49,okay so because there is no time slots so it's easier to have clearance
11443,11-18,23:56,okay so you may ask them what is the probability what is the efficiency for pure aloha for and slot in aloha
11444,11-18,24:03,so for unsoluted aloha we need to ensure this one to be successful
11445,11-18,24:09,then the probability is p and we need to ensure nobody is sending
11446,11-18,24:16,here then the probability is 1 minus p to the power of n minus 1.
11447,11-18,24:26,and we also need to ensure nobody is sending in this time frame
11448,11-18,24:32,so then that is again 1 minus p to the power of n minus one
11449,11-18,24:38,so in total this is actually p
11450,11-18,24:48,okay this is the p times y minus p to
11451,11-18,24:53,the power of 2 and minus one okay and again this is just for i node i
11452,11-18,24:59,if we we doesn't care which node then this is n okay so the total for any node to be
11453,11-18,25:07,success this is n times p times m y minus 1 to the power of 2 and minus one
11454,11-18,25:13,so if this goes infinity if this gets go to infinity then it's about one over two
11455,11-18,25:21,e so that is uh the equation is about half of slotted aloha
11456,11-18,25:26,so now by calculation you know the pure aloha actually has an even lower efficiency than slotted aloha
11457,11-18,25:34,okay i don't expect you to remember to know
11458,11-18,25:39,how you do the calculation of probability etc don't worry about that i will not give you the test
11459,11-18,25:45,on those but what you need to know is um
11460,11-18,25:51,the concluding the conclusion is that
11461,11-18,25:58,has actually worse efficiency than slotted aloha for both types we do not
11462,11-18,26:04,have any like coordinator or something like that okay uh and we know because
11463,11-18,26:10,the efficiencies is not very good so we we are thinking are there any other ways
11464,11-18,26:15,for us to deal with this multi-access problem so one way we can use is called uh csma
11465,11-18,26:24,the full name is carrier sense multiple access uh the difference between csma
11466,11-18,26:31,and sloged aloha or aloha is that um for csm ma we always listen before
11467,11-18,26:40,transmit okay that means if a channel is sensed idle then this uh station or this
11468,11-18,26:49,node can transmit the entire frame if the channel is sensed busy then we can
11469,11-18,26:56,this station will defer the transmission so it's very similar to the human
11470,11-18,27:02,conversation right so in human transition we don't want to interrupt others
11471,11-18,27:08,um that means when you want to say something for example if it is in our class okay we
11472,11-18,27:14,are in a let's imagine we are in a classroom setting then uh if you want to
11473,11-18,27:19,say something you need to first listen to others and listen to the channels if if there is anybody else saying or
11474,11-18,27:27,speaking then if there are there is nobody speaking that you can speak if there are somebody else speaking then
11475,11-18,27:34,you need to wait until they finish okay so that is like the the basic uh
11476,11-18,27:40,principle of csma um then you think about this
11477,11-18,27:46,it it sounds like csma is perfect right um but do we still have calculations can
11478,11-18,27:52,we still have clearance the answer is uh yes we we can still have clearance okay so for example for
11479,11-18,28:01,example um when you start to say something okay you you may have sensed oh okay this is
11480,11-18,28:07,idle okay this channel is idle then you start to speak okay but at the same time
11481,11-18,28:13,somebody else may also send this idol and uh he or she starts to speak so you may
11482,11-18,28:20,start at the same time okay uh that is one reason that we may
11483,11-18,28:25,have clear okay so the same thing two notes may start transmitting at the same time because they both sense that the idol so
11484,11-18,28:33,since the channel idle um but there is also a second reason a
11485,11-18,28:39,second reason um is that this nose this nose may be
11486,11-18,28:46,far away from each other okay and the signal propagation actually takes time
11487,11-18,28:54,so when the node sends that the channel is idle okay
11488,11-18,28:59,the channel may not be idle actually okay it's just the signal is still propagating it hasn't arrived at this
11489,11-18,29:08,node yet okay it's like um
11490,11-18,29:14,for for example you and your friends okay you are far away from each other
11491,11-18,29:19,you shout to each other and the sound takes time to propagate
11492,11-18,29:24,okay you may sense the idol but actually it's just the uh the the the voice or
11493,11-18,29:32,the sound from your friend hasn't reached it at you yet okay uh that is
11494,11-18,29:37,another reason why the collision is still occur okay
11495,11-18,29:42,basically propagation delay means two nodes may not hear each other's transmission okay
11496,11-18,29:50,so now let's look at uh example here we have four computers okay and this is the
11497,11-18,29:56,special layout of nodes we have t0 at t0 this note stars to uh send out the
11498,11-18,30:06,packet okay and pay attention this is the time okay and then the the
11499,11-18,30:15,um package or the signal will propagate to both directions as
11500,11-18,30:23,the time goes by okay so then we can see uh you can see here the signal is
11501,11-18,30:29,propagating in this way to both directions as time increase
11502,11-18,30:36,okay and at this time you can see uh this computer
11503,11-18,30:42,this was may sense that may sense the channel is idle
11504,11-18,30:48,okay and then this computer may say okay uh the channel is idle i can start
11505,11-18,30:54,transmitting my package so this computer will start transmitting okay it the
11506,11-18,31:02,reason it sends the idle is because the signal is it's just appropriate to hear at t1 it hasn't reached this
11507,11-18,31:12,that's the reason why this computer sends the item okay so then you can say they continue
11508,11-18,31:19,they continue and then at this point at this point this two
11509,11-18,31:25,signals meet each other at this point at this special notes okay and they
11510,11-18,31:32,continue again at this time actually both these two computers hasn't haven't
11511,11-18,31:37,realized but clearly they haven't sensed the screen yet because a signal didn't
11512,11-18,31:43,reach them yet okay the other side teaches them yet so then we continue and
11513,11-18,31:50,you can see finally finally
11514,11-18,31:56,at this point okay at this point let's give them some
11515,11-18,32:03,name a b c d okay at this point computer b sends to
11516,11-18,32:09,the calendar why because you can see it is the transmitting the signal the packet at
11517,11-18,32:17,the same time it is actually receiving a signal from
11518,11-18,32:23,computer d right so you can see at this point okay at this point computer d now
11519,11-18,32:30,sends the declaration because again while it is translating the packet it is
11520,11-18,32:36,also receiving uh the signal from computer b okay so
11521,11-18,32:42,then in this case you can see um if they do not stop okay they will just continue transmit transmission okay
11522,11-18,32:50,both b and d are still continued transmission and this in this case then we can see
11523,11-18,32:57,it's actually a visa of time and energy right uh the entire package transmission
11524,11-18,33:03,time is actually listed okay this is the csma
11525,11-18,33:09,um method okay you can see finally the completed their transmission okay but we know it
11526,11-18,33:17,is a waste of time and energy because uh the both transmissions are failures okay
11527,11-18,33:26,um so then we want to improve the csma method okay because csma we know when
11528,11-18,33:35,they detect after they detect the collision ideally they should stop right because
11529,11-18,33:41,there's no reason to continue if they continue it's just a waste of time because we know it's already a failure
11530,11-18,33:47,right um that's why we now have a included
11531,11-18,33:52,version of csma that is csma cd csma with collision detection okay so
11532,11-18,34:01,csmicd uh in in this uh the clearance will be detected within a very short
11533,11-18,34:07,time period okay when we detected the when we detect the clarion that we will
11534,11-18,34:13,abort the transmission immediately okay because there is no reason to
11535,11-18,34:19,continue or because we after we find the clearance okay
11536,11-18,34:26,um so this cleaning detection you need to know is very easy to detect in wired
11537,11-18,34:31,lens okay um because we can easily mirror the signal strength we can compare the
11538,11-18,34:37,transmitted and received signals but it may be very difficult to detect
11539,11-18,34:44,collision in the wireless lens the reason is because when this node is
11540,11-18,34:49,sending the packet okay the signal is usually very
11541,11-18,34:56,strong it's much stronger than the uh the signal that it is receiving
11542,11-18,35:03,okay so then in this case the received signal strength may be overwhelmed by the local transmission student then you
11543,11-18,35:11,cannot detect the calculator okay so that is uh the csmacd and you can see
11544,11-18,35:17,then you can see here okay here
11545,11-18,35:23,um again we have a b c d here a b you can say b detector
11546,11-18,35:30,clearance and then it takes a little bit time to abort this transmission similarly d detects the cleaner at this
11547,11-18,35:38,point and it takes some time to abort this transmission okay so then in this
11548,11-18,35:44,case we actually save at least receives the time and energy after collision is
11549,11-18,35:50,detected okay um so this is the ethernet csma cd
11550,11-18,35:57,algorithm first step when nick received the datagram from the network layer it will
11551,11-18,36:03,firstly create a frame and then if the nick senses channel idle it will start the
11552,11-18,36:10,frame transmission so if it sends the channel busy then we
11553,11-18,36:16,will wait until the channel is uh idle okay uh if nick transmits entire frame
11554,11-18,36:23,without detecting another transmission then we are done okay this this is done
11555,11-18,36:28,with the frame it's a successful transmission however it needs detects
11556,11-18,36:34,another transmission while transmitting it will need to abort and then send a
11557,11-18,36:41,jam signal okay after a boarding nick will enter a
11558,11-18,36:48,very special phase that cause binary back off okay what does this mean as we
11559,11-18,36:53,can imagine when when the first transmission failed we will try again right but when should we try
11560,11-18,37:00,you should be trying again immediately that's probably not a good idea right
11561,11-18,37:05,because maybe the other transmission hasn't finished yet okay so that usually what how do we
11562,11-18,37:13,decide when to transmit again when to do the real transmission we use the binary
11563,11-18,37:19,back off so this means after the amp clearing
11564,11-18,37:25,nick choose a number k
11565,11-18,37:30,randomly from 0 to 2 to m minus 1.
11566,11-18,37:36,so this for example if m equals to 3 okay that means nick will choose a
11567,11-18,37:45,number randomly from 0 to 7. okay and then it will wait for k times
11568,11-18,37:55,512 bit times and then do the real transmission again then as you can imagine as m is getting
11569,11-18,38:03,bigger then this number this this range is getting bigger
11570,11-18,38:08,right then very likely this number k will be bigger because it's chosen
11571,11-18,38:16,randomly okay then it has a probability of getting choosing a bigger k
11572,11-18,38:23,like choosing a bigger king and then nick will wait for longer time
11573,11-18,38:31,to do the real transmission okay so then this is what we call as binary back off
11574,11-18,38:37,it's the general idea is basically um if we have more clearance then we
11575,11-18,38:43,usually will be a bit longer to re-transmitter again but this is not 100
11576,11-18,38:49,guaranteed with i mean weekend language is not 100 guaranteed because we are
11577,11-18,38:54,choosing a random number from this range okay from this range
11578,11-18,39:01,um that means we get we still give opportunities for them to re-transmit immediately so um
11579,11-18,39:09,you may ask what is the efficiency for
11580,11-18,39:14,um for csmacd okay
11581,11-18,39:21,something is wrong with this i think
11582,11-18,39:27,okay so the efficiency is actually determined
11583,11-18,39:32,by this tea prop which is the maximum
11584,11-18,39:40,corporation delay between two nodes inland okay and then t transmission the
11585,11-18,39:46,time to transmit the maximum size frame okay
11586,11-18,39:52,um so basically efficiency equal to i don't know what happened but the this
11587,11-18,39:58,efficiency equals to 1 over 1 minus
11588,11-18,40:05,5 times t prop divided by t transmission okay
11589,11-18,40:11,so basically um
11590,11-18,40:16,if if this propagation delay goes to zero okay then you can see the efficiency
11591,11-18,40:26,efficiency will go to one okay because it's equal to one my over one minus zero
11592,11-18,40:33,that is uh almost that that is a one okay so that means if this true nose can
11593,11-18,40:40,hear each other immediately okay immediately then we can have a very
11594,11-18,40:46,high efficiency we do not have a lot of clearance that's uh that's why okay or
11595,11-18,40:52,if the time to transmit goes to infinity
11596,11-18,40:57,okay if this goes to infinity then um this efficiency this entire this
11597,11-18,41:04,number is equals to zero and then this efficient is also going to one that
11598,11-18,41:11,means here for the transmission time takes forever okay that means they can never finish
11599,11-18,41:18,transmission okay the signals are all uh kept at each node
11600,11-18,41:25,um and then in this case efficiency is also one okay so this is a like uh the
11601,11-18,41:31,formula for defining the efficiency but anyway so this we can see efficiency
11602,11-18,41:37,this csmacd actually has a much better performance than aloha okay it is simple
11603,11-18,41:44,shape and also decentralized so that's why csma cd is very widely used okay
11604,11-18,41:52,uh so far we have talked about the channel partitioning mac protocols first time uh that type we know we learned as
11605,11-18,42:01,a ftdma fdma okay second type is the
11606,11-18,42:06,random access map protocols we learned slotted aloha pure aloha we also learned
11607,11-18,42:13,csma and csmacd okay that is the second type uh the third type is the taking turns
11608,11-18,42:21,protocol taking turns is actually um
11609,11-18,42:26,is a is a like a combination of china partitioning and the random access okay
11610,11-18,42:33,the the idea
11611,11-21,0:04,just okay uh so far we have talked about the
11612,11-21,0:09,channel partitioning mac protocols first time uh that type we know we learned as
11613,11-21,0:15,a ftdma fdma okay second type is the
11614,11-21,0:20,random access map protocols we learned slotted aloha pure aloha we also learned
11615,11-21,0:27,csma and csma cd okay that is the second type uh the third type is the taking turns
11616,11-21,0:35,protocol taking turns is actually um
11617,11-21,0:40,is a is a like a combination of channel partitioning and the random access okay
11618,11-21,0:47,the the idea is also very easy for example here we can say we have a master
11619,11-21,0:54,node and a number of sleeve nodes okay but masternodes is like the coordinator
11620,11-21,0:59,in the in the middle so the masternodes will invite the cliff the slim nodes to
11621,11-21,1:05,transmit in turn okay so for example master will say hey do
11622,11-21,1:11,you have data to send then the first node we'll see i have data then it will answer the second one and say if you
11623,11-21,1:18,have what data to send okay second one may say no okay the third one say i have data so it's like that uh so basically
11624,11-21,1:26,the master will invite every every uh sleeve node to transmit in turn okay the
11625,11-21,1:34,concern for this kind of mac protocol is that firstly we have the polling
11626,11-21,1:40,overhead okay the polling it it has hot cost okay
11627,11-21,1:46,secondly we may have latency okay because every time you need to ask
11628,11-21,1:53,um uh you need to you need to ask if the computer has data to send okay uh it
11629,11-21,1:59,takes time the third concern is the single point of failure as you can imagine if the master is down then
11630,11-21,2:07,basically this mac protocol will not work okay so nobody can send it out that
11631,11-21,2:13,is uh those are the concerns for this uh polling protocol okay
11632,11-21,2:22,um the second type of taking turns is called token party token passing
11633,11-21,2:28,um the the reason what you talk about passing is that we want to remove this
11634,11-21,2:33,uh master this coordinator okay so in token passing we do not have any
11635,11-21,2:39,coordinator uh basically we have a control token that is passed from one
11636,11-21,2:45,node to the next node sequentially and then they take turns to send it out for
11637,11-21,2:50,example you can see but this one has nothing to send the token is passed to the next one
11638,11-21,2:57,and this one has data to send out okay and the next uh then we can
11639,11-21,3:03,continue uh if you if you think about this uh actually token cutting also have
11640,11-21,3:08,several drawbacks firstly we need to have a token okay token has overhead
11641,11-21,3:14,secondly latency problem the same thing okay so every time we need to uh firstly
11642,11-21,3:20,use the token to ask and then we can send uh the third thing the third one is the
11643,11-21,3:27,single point of failure again but this time it is uh uh not the
11644,11-21,3:33,um the single point of failure is not about the masternode it's actually about the token if for some reason the token
11645,11-21,3:40,is lost okay then this again this for this entire uh loop on every network
11646,11-21,3:47,nobody can send the data out okay
11647,11-21,3:52,so this is a keyboard access network this is a real network okay let's look
11648,11-21,3:59,at the structure and see what what will happen so firstly this is the cable hand and
11649,11-21,4:07,okay and we have the keyboard modem termination system these are all the
11650,11-21,4:14,home networks okay this is one a big a big one uh and for each home network you can see
11651,11-21,4:20,we have splitter and the cable model okay we know the cable modem is
11652,11-21,4:27,basically used to convert the signals from uh from the audio signals or cable
11653,11-21,4:35,signals to the digital signal right to for the conversion and splitter is used
11654,11-21,4:40,to to split the different type of signals um and actually for this entire
11655,11-21,4:47,structure as you can see we have the multiple access problem okay for the downstream
11656,11-21,4:54,for the downstream uh we basically we can say oh okay we have different type
11657,11-21,5:00,of signals for example we have internet frames we have tv channels we have also
11658,11-21,5:06,the um maybe control signals etc okay so all
11659,11-21,5:12,those different type of signals can be transmitted at different type of frequencies
11660,11-21,5:19,okay different frequencies so this is a like fdma right so this is a like
11661,11-21,5:26,channel partitioning okay and then for the upstream for the
11662,11-21,5:32,upstream um signals we have competitions because
11663,11-21,5:38,many home networks okay some of the home networks they they all want to synapse
11664,11-21,5:44,the signal they all want to send the signals to um the cable hand ends okay then they
11665,11-21,5:51,have computation um which is what we call as a multi-process problem okay then in this
11666,11-21,5:59,case okay in this case we may have different signals transmitted at different
11667,11-21,6:06,frequencies in different time slots okay so here we use both of the
11668,11-21,6:11,frequency dividend and also uh time difference okay
11669,11-21,6:18,um so you can see for downstream it's easy for upstream downstream because we
11670,11-21,6:23,are just doing the broadcast channels for upstream then all the users contend
11671,11-21,6:29,for certain upstream channel time slots okay so what is a really happening
11672,11-21,6:35,actually is that um
11673,11-21,6:40,so for um we what we do is we use fdm over
11674,11-21,6:48,upstream downstream uh frequency channels this for this one we already know right
11675,11-21,6:54,and then for um
11676,11-21,6:59,and therefore upstream for upstream uh
11677,11-21,7:04,uh data okay so for upstream transmission what we do is we actually
11678,11-21,7:10,firstly uh you apply okay we apply uh
11679,11-21,7:16,and say hey for example this this is home network will say hey i want to send something out okay uh what can i do okay
11680,11-21,7:25,then it will send some requests to the keyboard hands okay the cable
11681,11-21,7:33,headings will assign some of the slots assign some slots in the downstream map
11682,11-21,7:42,frame so basically it will tell this home network say hey you can use this
11683,11-21,7:48,time interval from t1 to t2 okay then later uh this home network can
11684,11-21,7:55,use uh the time from t1 to t2 to um uh up to upload data okay to to do
11685,11-21,8:04,upstream transmission so it is like that okay
11686,11-21,8:11,and then the request for upstream slots is actually transmitted
11687,11-21,8:18,um using random access okay using random access so you can see in reality the real network is like a
11688,11-21,8:26,combination of different methods fdma tdma and we also use the random access
11689,11-21,8:33,okay like for random access again we have different uh types like it's aloha
11690,11-21,8:40,it's not in aloha pure aloha csma csm scd etc okay
11691,11-21,8:46,so basically the general the general idea is the first lay you request you
11692,11-21,8:52,make a request for time slots okay so this request is
11693,11-21,8:58,made by using random access and then um the time interval will be assigned
11694,11-21,9:05,using the downstream channel to this home computer home network and the home network then can upload uh or send up
11695,11-21,9:14,upstream data using the time slot assigned okay so
11696,11-21,9:21,that is uh the general idea um and i
11697,11-21,9:27,to summarize what we have learned we basically learned these three different types of mac protocols and i really want
11698,11-21,9:34,you to um remember all of this okay and there are features you should understand we
11699,11-21,9:40,will definitely um have questions about mac in the final exam okay
11700,11-21,9:48,all right so the next thing we are going to discuss today is the land
11701,11-21,9:53,okay uh for land we will firstly look at the mac address
11702,11-21,9:59,okay mac address we we have learned ip address we know ip address is 32-bit
11703,11-21,10:05,right so it is the network layer address for interface for the new card okay uh
11704,11-21,10:13,and this is a used for uh basically forwarding and routing
11705,11-21,10:19,um and then for each device we know we all we often we mention a mac address mac address but do you really know what
11706,11-21,10:26,is a mac address so the functionality for mac address is
11707,11-21,10:33,actually to um get frame locally from one interface to another physically
11708,11-21,10:42,connected interface okay so that means mac address is actually used mainly for
11709,11-21,10:49,the local area network okay between the neighbors between the direct neighbors
11710,11-21,10:55,okay and a mac address is 48 bit okay this is a burn into the neck roll
11711,11-21,11:04,um and uh sometimes we can use salt water to set up the mac address but most of
11712,11-21,11:10,the time for most of most of mac addresses they are just burning them and
11713,11-21,11:16,i think um usually we do not change the mac address okay
11714,11-21,11:21,and if you look at the mac address again as i said it's a 48 bit so then we can
11715,11-21,11:27,represent this with the hex decimal here each letter or each number
11716,11-21,11:34,represents four bits okay so four b so that means we have for
11717,11-21,11:39,this entire mac address it has one two three four five six seven eight nine ten
11718,11-21,11:44,eleven twelve we should have twelve letter or uh number has this more
11719,11-21,11:51,lateral number okay um and pay attention
11720,11-21,11:57,the ipv6 okay the ipv6 the ip address
11721,11-21,12:04,is also representing the e hex decimal okay
11722,11-21,12:10,but it's much longer it's 128 bits okay so it's much longer than mac
11723,11-21,12:16,address sometimes uh students say oh why do i see also accessible in your ip address that
11724,11-21,12:25,is because it is using ipv6 okay
11725,11-21,12:30,so now let's look at the lan addresses so basically
11726,11-21,12:36,um this is a lamp and you can see each adapter each new card has its own unique
11727,11-21,12:43,unique mac address okay unique language someone you may ask why we already have
11728,11-21,12:52,the ip address why do we still need a mac address okay what is what is the
11729,11-21,12:58,reason for having a mac address so
11730,11-21,13:03,um the macro address is like it's a very unique it's unique to every adapter so
11731,11-21,13:12,it can be used to uniquely identify each computer each interface and also it is portable
11732,11-21,13:19,you think about this so for example when you take your computer from your
11733,11-21,13:24,home network to campus network the ip address may have changed right
11734,11-21,13:31,but the um the mac address is still the
11735,11-21,13:36,same for a computer is still the same it's not changed so you can see this is a mac address is portable it's just
11736,11-21,13:43,similar to um to to a human if we think about human
11737,11-21,13:50,society everybody has a social security number right and everybody also has a home
11738,11-21,13:56,address when you move from one place to another place your home address can change your
11739,11-21,14:02,postal address can change but your social security number is always with
11740,11-21,14:07,you it's never changed okay so the mac address is like the social security
11741,11-21,14:12,number and the ip address is like the postal address okay mac address is
11742,11-21,14:17,basically used to uniquely identify a interface
11743,11-21,14:25,um you may also ask them how can they ensure the mac address is unique to
11744,11-21,14:31,every device okay um basically the mac address allocation
11745,11-21,14:39,is administrated by ieee and then the manufacturer needs to buy a
11746,11-21,14:47,portion of mac address space to ensure the uniqueness okay it buys a
11747,11-21,14:53,portion of mac address space and then when it's manufactured uh the new card
11748,11-21,15:00,it will assign a unique mac address to each device okay to each me card
11749,11-21,15:06,[music] um so that is the basically the difference between ip address and mac address
11750,11-21,15:14,then now we may have a problem okay you may have a question
11751,11-21,15:21,um so if we already know if we already know the ip address of our computer ip
11752,11-21,15:27,address or y interface how do we know the mac address for that interface
11753,11-21,15:35,the answer is that we can have we can use a protocol called address resolution
11754,11-21,15:40,protocol which is a arp okay and this is a very uh commonly used
11755,11-21,15:48,protocol very useful protocol and please pay attention to this so
11756,11-21,15:54,basically for arp firstly we have arp table okay
11757,11-21,16:00,um each ip node on the land has a table called arp table
11758,11-21,16:07,and then in this erp table we will store the mapping between ip address and mac
11759,11-21,16:13,address of course we also give it the ttl ttm means time to leave
11760,11-21,16:19,um it's basically means how long will this mating be uh
11761,11-21,16:27,effective okay so after ttl then the address mapping will be forgotten
11762,11-21,16:34,so typically the tcl is 20 minutes um
11763,11-21,16:39,so let's look at how this arp protocol worked okay
11764,11-21,16:44,um i think maybe maybe i start with this example and then
11765,11-21,16:50,we come back to explain okay
11766,11-21,16:56,um this is another one okay let's come back
11767,11-21,17:02,to this so firstly firstly if we let's assume let's assume a wants to send a datagram
11768,11-21,17:10,to b and a and b are in the same land this is a very important pay attention
11769,11-21,17:17,a and b are in the same length okay basically means they are not neighbors
11770,11-21,17:23,okay and we know when a sends something to b okay
11771,11-21,17:30,in addition to the ip address actually at the link layer a link layer does not
11772,11-21,17:35,know any ip address link layer means the mac address to deliver a packet
11773,11-21,17:41,okay so that's why if a amount to send something to b a must know b's mac
11774,11-21,17:49,address keep this in mind a must know piece mac
11775,11-21,17:54,address okay but unfortunately this mac address is
11776,11-21,18:00,not ease erp table yet do you remember we said every note
11777,11-21,18:06,has a arp table right the erp table has ip address and the mac address so
11778,11-21,18:12,ideally we should have b's ip address and the b is a mac address
11779,11-21,18:20,here okay but here at the very beginning we a do not have this mac address in its
11780,11-21,18:27,own erp table and what a can do is a can broadcast the arp query
11781,11-21,18:35,to everybody in this line okay to everybody in this land
11782,11-21,18:40,containing this ip address it will basically ask say
11783,11-21,18:46,hey who has this ip address okay
11784,11-21,18:51,then you may ask how can we do the broadcasting actually we mentioned this before i think when we talk about dhcp
11785,11-21,18:58,if we want to do the broadcasting okay the destination mac address should
11786,11-21,19:04,be ff ffff so 12 f's
11787,11-21,19:11,okay 12 apps this is how we do broadcasting okay and all the notes all
11788,11-21,19:18,the notes on this line will receive this nrp query okay it's like if for example if i'm a i
11789,11-21,19:26,do not know b's mac address i only know b's in ip address then i will shout to
11790,11-21,19:32,everybody to all my neighbors asking say hey who has this ip address
11791,11-21,19:38,okay then when b receives the rrp packet b will reply to a with its own mac
11792,11-21,19:46,address okay then this um
11793,11-21,19:52,um this frame is sent to a's mac address directly through unicast because v knows
11794,11-21,19:58,is mac address right then after that a will basically save the
11795,11-21,20:06,this ip to mac address pair in its own id its own arp table
11796,11-21,20:13,okay um until the information becomes out so
11797,11-21,20:18,that that means after that before this expires a can directly send uh the frame
11798,11-21,20:25,to b because a now knows b's mac address okay so that is the general idea of arp
11799,11-21,20:32,if they are if the source and destination are within the same length
11800,11-21,20:37,okay so this uh pay attention arp protocol is plug and play protocol uh
11801,11-21,20:43,they do not need any information from the net network admin okay no need from
11802,11-21,20:49,network enemy um so this is the uh the arp protocol
11803,11-21,20:55,when they are in the same land okay it's very easy just a shout to
11804,11-21,21:01,everybody okay um so then the route into another line is a
11805,11-21,21:09,little bit more complicated let me see let's move let's finish this try to finish this okay
11806,11-21,21:15,if if a and b are not in the same length
11807,11-21,21:21,okay if a and b are not in the same line then a cannot shout anymore
11808,11-21,21:27,because they need to go through a router here okay so when a sharp a can only shout to
11809,11-21,21:34,this length it cannot shelter to the other line it can only shout to its
11810,11-21,21:40,neighbor okay then in this case what can we do if a wants to send something for to b
11811,11-21,21:48,through a router r okay uh now let's assume a knows b's ip
11812,11-21,21:55,address b is the destination and we also assume a knows the ip
11813,11-21,22:02,address of the first hop router are a knows ip address or
11814,11-21,22:11,how could a nodes know um the ip address of first half grams
11815,11-21,22:16,are sorry not this one sorry not this one
11816,11-21,22:21,okay let me see hmm
11817,11-21,22:27,it's actually this one okay this is uh earth's ip address at
11818,11-21,22:34,the at the left side of that okay and isline so how could a know the ip address of
11819,11-21,22:43,first half router are how could a know this ip address
11820,11-21,22:48,the answer is actually dhcp
11821,11-21,22:54,foreign dhcp we said when a new computer
11822,11-21,23:01,a joins a network okay join the network
11823,11-21,23:08,it needs to talk to a dhcp server then the dhcp server will return is ip
11824,11-21,23:14,address and also some other information the other information are
11825,11-21,23:20,info for example the information the ip address about the first half router
11826,11-21,23:25,the ip address or the dns server and the name of the dn server and also the uh
11827,11-21,23:32,the the network mask right so this information are sent
11828,11-21,23:37,to a by the dhcp server okay that's how that's how a get this ip address
11829,11-21,23:45,and third assumption is that we also assume a knows r's mac address
11830,11-21,23:50,how could a know rs mac address the answer is using arp
11831,11-21,23:59,why because we know this adapter is actually within the same length of a right so we
11832,11-21,24:08,just learned if they are in the same length a can simply shout it can simply
11833,11-21,24:13,ask say hey who has this ip address of one zero
11834,11-21,24:20,okay then our out interface will return this mac address to a that's how a gets
11835,11-21,24:27,to know uh arithmetic address so with these three assumptions let's continue
11836,11-21,24:35,okay then now a will create i iptogram with ip source
11837,11-21,24:43,a and destination b okay you can see source is 101.101 destination is two to two
11838,11-21,24:50,okay then when might comes down comes to the lower layer link layer you can see the
11839,11-21,24:57,source address source mac address is is source mac
11840,11-21,25:03,address the destination address however is not b's mac address
11841,11-21,25:09,because because what because we don't know this mac address yet we only know
11842,11-21,25:16,earth's mac address right we know this mac address
11843,11-21,25:21,okay how do we know we assume we already know that right through arp
11844,11-21,25:27,so that's why you can see the mac address here is actually
11845,11-21,25:33,ours mac address pay attention is not a busy mac address okay now this frame is
11846,11-21,25:39,sent from a to r okay and then
11847,11-21,25:45,and then what this art will do is is reverb it will remove the link layer
11848,11-21,25:53,headers okay and then add a new header in this new header the source address
11849,11-21,26:01,the source mac address is now this mac address it's also the other
11850,11-21,26:08,interface okay uh the romans the other interfaces so this mac address is a 1a
11851,11-21,26:14,29b okay the destination address this time is uh b is mac address
11852,11-21,26:23,okay because the router this interface is within the same line as b so of
11853,11-21,26:31,course um this interface can also shout to this uh uh this line and ask hey who has this
11854,11-21,26:39,ip address and i who has this ip address and then b can return its own mac address okay so anyway this mac address
11855,11-21,26:48,ob can be known by this interface that's why you can see uh the mac address
11856,11-21,26:53,definition is actually big okay the source ip source address destination
11857,11-21,26:59,address are not changed it's the same okay so then now this frame can be sent
11858,11-21,27:05,to be okay and then b can remove the link
11859,11-21,27:10,layer headers and pass this to upper load layer okay so that is the arp and
11860,11-21,27:17,you can see when they are within the same length if the source and definitions are in the within the same
11861,11-21,27:22,line then they can simply shout but if they are not in the same line then they have to change the mac address
11862,11-21,27:29,to the router's mac address okay to the router's mac address and
11863,11-21,27:36,then the router will do the forwarding for them since the arp is a very important part i want to quickly review
11864,11-21,27:42,this okay so firstly we learned we learned arp is a red address resolution
11865,11-21,27:48,protocol this is basically used to determine the interface's map address
11866,11-21,27:54,when we know it's ip address okay um so if the source and the destination
11867,11-21,28:01,are in the same land then erp protocol is very easy it's very straightforward so basically the source will say hey uh
11868,11-21,28:09,who has this ip address shouting to everybody we call this as broadcasting right so how do we do the broadcasting
11869,11-21,28:16,we use uh the mac address of ff12x as the mac address right
11870,11-21,28:23,and then uh the the destination who has this ip address will reply with its own
11871,11-21,28:29,mac address and then the source will cache this ip2 mac address pair in its
11872,11-21,28:36,erp table that is the erp protocol when we have a and b in the same line the
11873,11-21,28:43,problem is what if a and b are in different lands okay when they are in
11874,11-21,28:49,different lands we know we cannot shout to each other okay we cannot shout because we have we have to go through a
11875,11-21,28:55,browser first so then in this case we have to assume a no b's ip address how
11876,11-21,29:02,do we know because this definition of course we know this ip address right and then we also assume not any nodes ip
11877,11-21,29:09,address over the first half browser which is uh which is r okay so how do we know that
11878,11-21,29:17,so we learned with we can do this through dhcp right because we learned hcp does not only return dcp is a
11879,11-21,29:25,protocol that is used to return or assign an ip address to a
11880,11-21,29:32,newly joined uh computer right so then we know dhcp does not only return the
11881,11-21,29:40,mat the the new ip address for this new computer new camera it also introduced
11882,11-21,29:46,this newcomer uh the important roles in this network right so like who
11883,11-21,29:54,is the first half launcher what is the ip address or the first hub browser so what is the dns server right
11884,11-21,30:01,and what is the network mask so those information are also returned by dhcp
11885,11-21,30:07,that's how a no a at the ip address our
11886,11-21,30:12,first hub router are okay and you need to pay attention r actually has two
11887,11-21,30:17,interfaces in this in this scenario y interface belongs to the same name with
11888,11-21,30:23,uh a okay the other interface belongs to the same line with b okay so now we
11889,11-21,30:30,assume a node ip address over the first of router are that ip address is the
11890,11-21,30:36,interface belonging to ace line not a business okay pay attention to that and
11891,11-21,30:42,we also assume a knows r as a mac address how do we know more as mac address that is very straightforward
11892,11-21,30:50,because this interface is in the same line as a
11893,11-21,30:56,okay so then we can simply do a erp because they are in the same line erp is very easy a just a shout to everybody
11894,11-21,31:04,and ask hey who has this ip address and then r can reply so
11895,11-21,31:10,um those are the three assumptions with those assumptions and then we can see if
11896,11-21,31:16,we want to send something okay uh we have ip address uh ip source ip address
11897,11-21,31:23,destination ip address and then for the map for the link layer we need to add
11898,11-21,31:28,headers we also need to add the link layer source address and destination address right so basically the source
11899,11-21,31:34,mac address and the source destination mac address and very importantly the source mac
11900,11-21,31:41,address is its mac address but the destination and mac address is not
11901,11-21,31:47,this mac address is actually our mac address that is
11902,11-21,31:52,something you need to pay attention okay that means firstly we forward this package to our to the neighbor r and
11903,11-21,32:01,then r will forward this
11904,11-21,32:06,okay r will basically move this from one side to another side
11905,11-21,32:12,okay from one interface to another interface and then add a new mac source
11906,11-21,32:18,address this time the map source address is replaced with ours
11907,11-21,32:23,um the other in mac address okay this mac address of
11908,11-21,32:29,um of work okay so that is the source address and the destination address
11909,11-21,32:34,destination address destination mac address is this time it can be beats mac address okay can be
11910,11-21,32:42,business mac address and then this uh can be sent to b and finally b will
11911,11-21,32:47,remove those headers nuclear headers and pass this to operate okay so this is the
11912,11-21,32:53,entire process and um we will definitely have this kind of
11913,11-21,32:58,questions on the final exam so for example i may ask you uh in this
11914,11-21,33:03,scenario what is the destination mac address what is the sales mac address okay can you can you give the mac
11915,11-21,33:11,address okay like that
11916,11-23,0:05,the next thing we are going to discuss is uh in ethernet okay ethernet is the
11917,11-23,0:11,dominant wire land technology we are actually still using it right now right
11918,11-23,0:17,um so you can see this is this uh this figure is actually the uh sketch for the
11919,11-23,0:24,ethernet at the very beginning okay um and um over the time we have developed
11920,11-23,0:31,different types of ethernet so firstly we have bus bus type structure okay this
11921,11-23,0:36,is very popular so mid 90s and then gradually we learned okay this this will
11922,11-23,0:42,have some problems because we may we may easily have the multiple access problem
11923,11-23,0:47,we may have the collision uh happening okay so that's why people
11924,11-23,0:52,gradually um switch the bus structure to star kind
11925,11-23,0:58,of structure okay the right side is the star structure in this structure we
11926,11-23,1:03,always have a switch in the middle okay and then uh each computer or each each interface
11927,11-23,1:11,is actually connected directly with the switch okay did not connect with each
11928,11-23,1:16,other um so this is the ethernet frame structure
11929,11-23,1:22,okay so basically the sending adapter encapses the ip datagram in the ethernet
11930,11-23,1:30,frame okay so the iptogram is here in the data it's the payload okay and
11931,11-23,1:38,then we have the preamble preamble is um uh is a very special string of uh bits
11932,11-23,1:48,okay so the it's basically uh seven bytes
11933,11-23,1:54,of this salmon buys a one zero one zero one zero one zero this is one byte right
11934,11-23,2:00,so we repeat this for seven times and then followed by one byte hour one
11935,11-23,2:08,zero one zero one zero one one okay so what is this for this is the use of four
11936,11-23,2:14,pre-m for for synchronization okay for synchronized between the sender and
11937,11-23,2:19,receiver's clock um and then we have the source and
11938,11-23,2:24,destination destination source address okay those addresses are pay attention those are mac addresses okay not ip
11939,11-23,2:32,address because the ip address we know is seeing that ip disk program okay so
11940,11-23,2:37,these are the mac addresses um and we know the mac address is a 48 bits
11941,11-23,2:46,that means uh six byte for each okay and then this field is the type this type
11942,11-23,2:54,indicates the higher layer protocol mostly iep okay uh and then this is the
11943,11-23,3:02,crc crc we have learned that right psycholic redundance checking uh this is
11944,11-23,3:08,a for error detection and error tracking okay
11945,11-23,3:17,um so for ethernet we know uh this is a connectionless connection list doesn't
11946,11-23,3:23,mean we do not need cables to connect them connection isn't here means at the
11947,11-23,3:28,lower layer at link layer we do not need to do any hand shaking to establish a
11948,11-23,3:34,connection no handshaking between the sending and receiving new curves okay
11949,11-23,3:40,and um this is unreliable because
11950,11-23,3:46,um the receiving new card doesn't does not send any sicks or any keys choose to
11951,11-23,3:54,the sending nick okay the data in drops frames recovered only if the initial
11952,11-23,4:00,sender uses a higher layer rdt so you can say
11953,11-23,4:05,um we do not have any reliability uh in
11954,11-23,4:11,um in the in the ethernet protocol okay no reliability if you want to ensure
11955,11-23,4:17,reliability to transfer then you have to re rely on upper layer which are the
11956,11-23,4:22,transport layer okay which is the transport layer and then
11957,11-23,4:28,um the mac protocol here mac is is a means multi-access protocol right
11958,11-23,4:34,multiple search protocol is and slotted csma cd with binary back off
11959,11-23,4:41,csma means we always listen before we send right and cd means clear detection
11960,11-23,4:48,that means when we detect any clearance then we will immediately stop
11961,11-23,4:55,um transmitting the packet okay that is sesame macd and binary back off means
11962,11-23,5:01,what means that we will try to resend with a probability okay resend this uh
11963,11-23,5:07,this one with the probability of this frame um so there are many different ethernet
11964,11-23,5:14,standards actually depending on different links and different physical
11965,11-23,5:20,layer implementations um so you can see uh these are the
11966,11-23,5:26,physical layer if the if we are using physically copper physical year then these are the
11967,11-23,5:34,protocols and then the red color is for fiber physical layer okay different protocols
11968,11-23,5:42,um that's all about the ethernet so the next thing is which
11969,11-23,5:48,is a very important device in link layer
11970,11-23,5:54,um so basically what it does is it it will store and forward ethernet frames
11971,11-23,6:00,is similar to the router which also do a store forwarding ip datagrams right
11972,11-23,6:06,um so the switch will examine the incoming frames mac address and then
11973,11-23,6:12,selectively forward the frame to one or more outgoing links okay so this is a
11974,11-23,6:21,you keep in mind switch always switch always always work with the neighbors
11975,11-23,6:27,the local area networks the the devices can directly connecting to it okay it
11976,11-23,6:33,doesn't care about the other devices that are far away it only cares about
11977,11-23,6:38,the devices that are directly connected to to it okay
11978,11-23,6:45,um and switch is also transparent transparent here means the hosts are
11979,11-23,6:51,unaware of the presence of switches they feel like they are communicating with
11980,11-23,6:56,each other directly but they are going actually going through the switches okay and switches do not need to be
11981,11-23,7:03,configured it is a plug and play it can do self learning so unions which is very
11982,11-23,7:09,straightforward now we can look at this uh this example if we have for example here we have abcd
11983,11-23,7:18,uh sorry abc a prime b prime c prime they are all connected to a switch
11984,11-23,7:25,okay and this is which we all uh buffer the packets now
11985,11-23,7:32,um you can see for example a can send package to a prime and b can send a
11986,11-23,7:39,packet to b prime they can send together okay they can send uh transmit simultaneously there there is no
11987,11-23,7:46,clearance okay there's no cleaner don't worry about completing but if we are using the bus kind of structure then we
11988,11-23,7:53,will have clearance okay and then you may ask how does the switch
11989,11-23,7:59,know that a prime is reachable while this interface 4 and b prime is
11990,11-23,8:06,reachable y interface y how does the switch know that when a switch receives a packet how does the
11991,11-23,8:13,space switch know which outgoing link to send so this is a question this is a question
11992,11-23,8:20,we asked ourselves when we learn about the routing right the routers we know
11993,11-23,8:27,the routers is generating a local forwarding table that local forwarding table is able to
11994,11-23,8:33,decide help decide which auto green link this package should be forwarded to
11995,11-23,8:39,right so for switch for switch it also has some kind of forwarding people
11996,11-23,8:46,but it's different from router for router we know the local forward table is generated by running a routing
11997,11-23,8:53,algorithm right so for switch the local forwarding table the forward table is
11998,11-23,8:59,actually generated through self-learning okay so what does this mean
11999,11-23,9:05,so the switch also has a as i mentioned it also has a table here
12000,11-23,9:10,okay it's very similar to a routine table
12001,11-23,9:16,okay but it generally this table through self-learning self-learning basically
12002,11-23,9:22,means switch will learn which horse can be reached through which interfaces
12003,11-23,9:29,gradually okay um so for example for example let's see
12004,11-23,9:35,now a is sending a frame to a prime you can see the source is a a destination is
12005,11-23,9:44,a prime okay now it will send this one to the switch
12006,11-23,9:51,okay see you can see this packet is actually going through
12007,11-23,9:56,this uh interface one right and then switch will learn oh okay
12008,11-23,10:02,a is sending a frame through interface one so then a is reachable through
12009,11-23,10:10,interface one okay so that is uh that is learned by
12010,11-23,10:15,the switch and put into the switch table and the for each record we also have a
12011,11-23,10:22,ttl sorry for that and then um after that after that we
12012,11-23,10:31,know switch doesn't know how to reach a prime because there is no entry for a prime right so
12013,11-23,10:41,now what can we do what we can do is basically you can say
12014,11-23,10:47,the switch will broadcast this to everyone
12015,11-23,10:52,excluding a okay except a so to everyone and say hey uh i'm going
12016,11-23,11:01,to send this to a prime so who has this definition address of a
12017,11-23,11:07,prime okay then in this case a prime will
12018,11-23,11:12,reply right a prime will see hey that's my mac address and i'm the one uh that should
12019,11-23,11:21,accept this frame so and then a prime will reply to a in
12020,11-23,11:28,this case you can see a the switch learned this again the switch will learn okay a prime is
12021,11-23,11:35,sending this through interface 4. okay so then this will be put into the
12022,11-23,11:41,switch table so gradually switch we'll learn all of the mappings
12023,11-23,11:49,okay and then this time because this frame is going to a do we need to do
12024,11-23,11:55,broadcasting again to everyone we do not right we don't need to because
12025,11-23,12:02,now we already have a's interface mutual interface right we know a can be
12026,11-23,12:09,reached through interface one so then in this case we don't need to do any broadcasting then switch can directly
12027,11-23,12:16,forward this to a this is called selectively send i'm just one link
12028,11-23,12:22,okay um so that is uh that is just the one
12029,11-23,12:29,switch in the situation where we have only one switch but if what if we have a
12030,11-23,12:34,number of switches connecting together okay in this case
12031,11-23,12:39,how can we how can the switch know how how to
12032,11-23,12:44,forward the packet okay so for example if a wants to
12033,11-23,12:50,forward this to g let's see how does s1 know uh
12034,11-23,12:57,how to forward the the the packet so how does s1 know oh i need to forward this
12035,11-23,13:03,to s4 and as for that for this to s3 and then s342j how do we know this path
12036,11-23,13:11,the answer is actually still self learning okay so let me explain how this would work
12037,11-23,13:18,again and we'll see oh i'm sending something to j okay
12038,11-23,13:25,so then it's this this frame will go to s1 s1 will say oh i don't know how to
12039,11-23,13:33,reach j so i have to broadcast it to everybody okay now this frame is
12040,11-23,13:39,broadcast to bc and also s4 okay so as for receives this we know bmc won't
12041,11-23,13:47,reply right because b and c is not j um and then s4 will say oh i do not know
12042,11-23,13:54,how to reach j okay then i have to forward this to everybody so s4 we are
12043,11-23,14:01,basically forward this to s2 and also s3 okay all the switches all the neighbors
12044,11-23,14:07,and s2 will forward this to everybody
12045,11-23,14:12,okay flooded to everybody because at tuesday i don't know who is the how to reach g okay then we know d e and f
12046,11-23,14:20,won't reply after i still received this esther will
12047,11-23,14:25,also forward this to j h and i okay so then in this case j will say oh
12048,11-23,14:32,that is my frame okay then g will form a frame from j
12049,11-23,14:40,to a and send it back okay so now s3 has learned s3 has
12050,11-23,14:48,learned how to reach a through this interface okay so through the interface between s4
12051,11-23,14:56,and s3 so as the reveal say oh okay i just need to send it back to s4
12052,11-23,15:02,okay the s4 has also learned how to reach a from last communication right
12053,11-23,15:09,so s4 will say oh okay if i want to reach a i need to only forward this to
12054,11-23,15:15,this interface and as one of course also knows how to retrieve because they have
12055,11-23,15:20,learned they have the switch table okay so this is uh this is the self
12056,11-23,15:26,learning process and you can see how this um these uh switches learn and in the
12057,11-23,15:33,future whenever we have any package going to a or j they oh no all this
12058,11-23,15:39,which is we all know how to reach most of the levels at least s1 s1 and s3
12059,11-23,15:45,knows how to reach a and j okay of
12060,11-23,15:50,course s2 doesn't know but s2 can also forward this package to s4 and s4
12061,11-23,15:55,already knows right any questions about this self learning
12062,11-23,16:03,okay i hope this process is is from it's a straightforward to you
12063,11-23,16:10,okay so i have explained this so i just um skip this slide
12064,11-23,16:16,okay so as you can see in a real institutional network we usually have
12065,11-23,16:22,multiple switches connecting to each other you can see we may have
12066,11-23,16:28,um one switch here another switch here here we have multiple switches and they are all connected to a much bigger
12067,11-23,16:35,switch and then we may have also have those servers connecting to the switch
12068,11-23,16:40,and finally all this this switch may be connected to the voucher okay do we have
12069,11-23,16:47,multiple routers no we have only one big router to the external network but we
12070,11-23,16:54,may have multiple switches so then this will form one local area network
12071,11-23,17:01,okay so you may ask what is the difference between the ceviche and router this
12072,11-23,17:09,sounds uh familiar right the the this seems to have they seem to have similar
12073,11-23,17:15,functionalities um yes they have some similar similarities they both of them are doing
12074,11-23,17:22,slow and forwarding okay still on the forwarding the routers will
12075,11-23,17:28,um will store the datagrams and forward it the link layer the switch will store
12076,11-23,17:34,the frame and forward it um but they are actually i live different layers voucher is a network
12077,11-23,17:40,layer device okay it will only examine the network
12078,11-23,17:46,layer headers it can only enter the network layer headers the switch is a link layer device okay it examine the
12079,11-23,17:53,link layer headers and both of them have the forwarding tables okay the difference is that the
12080,11-23,18:01,router will compute this forward table through routing algorithms as we have learned for example link state amazon
12081,11-23,18:07,okay um and it relies on ip address to to
12082,11-23,18:14,determine the outgoing link and switch is different switch will generate the
12083,11-23,18:20,look of the forwarding table using self learning right flooding and
12084,11-23,18:26,self-learning and it's relies on the mac address to determine the africa unique
12085,11-23,18:32,so you can see the difference so here you can see the switch has only two layers
12086,11-23,18:38,physically or unlinklier but network has three layers okay frame uh physically or
12087,11-23,18:45,nuclear network layer the computers we know they all have five layers okay so
12088,11-23,18:51,those are the difference um and i want you to know that the
12089,11-23,18:57,similarities and differences between routers and switches i may also have test questions here in the final exam
12090,11-23,19:05,okay and the next thing i want to discuss is
12091,11-23,19:11,the windland okay um so we know now we know how the land
12092,11-23,19:19,works right so we have for example a bunch of switches connected together
12093,11-23,19:25,to a big switch and then connect it to the router okay so maybe this which this
12094,11-23,19:33,switch is connecting all the computer science um computers and this is the electrical
12095,11-23,19:39,engineering and this is the computer engineering okay but there is one problem now
12096,11-23,19:46,so for example if you consider a computer science user
12097,11-23,19:51,most of the office to electrical engineering
12098,11-23,19:57,okay so one day one computer is moving physically physically moving
12099,11-23,20:05,to a different office to the electron in your office but this user this computer science user
12100,11-23,20:11,still wants to be connected to the cs computer science switch
12101,11-23,20:17,because we know the computer science which will do a broadcasting etc to all
12102,11-23,20:25,the computer science computers right so of course we still want this computer to be managed by computer science but
12103,11-23,20:32,physically it is already in the double e then in this case what can we do
12104,11-23,20:38,so what can we do um so we we all know uh each switch now is
12105,11-23,20:46,like a single broadcasting right so all the layer two broadcast traffic like arp
12106,11-23,20:52,dcp etc uh they must cross the entire line they also have some security and
12107,11-23,20:58,privacy issues efficiencies etc anyway the problem now becomes becomes
12108,11-23,21:05,we still want this computer to be managed by computer science but it is
12109,11-23,21:10,physically in double e what can we do okay um we make do we need we may need to
12110,11-23,21:18,have like a cable a long cable [music] um to connect this computer back to the
12111,11-23,21:25,switch but it's not as very convenient right so then one solution to that is called
12112,11-23,21:32,the waterline okay watch your local area network
12113,11-23,21:38,okay so basically this this means the switch is supporting the water line
12114,11-23,21:45,capabilities can be configured to define multiple virtual lens over a single
12115,11-23,21:52,physical line infrastructure okay so you can say for example here we have one big
12116,11-23,21:59,switch this this is one physical switch
12117,11-23,22:05,okay this switch is used to connect all the machines
12118,11-23,22:12,okay including computer science and electrical engineering machines they are
12119,11-23,22:17,all connected to this one single physical switch but we can create
12120,11-23,22:25,two different water lines by specifying the pawn numbers so for example we can
12121,11-23,22:32,see all right from port number one to eight the blue color one
12122,11-23,22:37,okay they belong to one winner
12123,11-23,22:43,okay then the the those point numbers from 9 to 16 the yellow ones they belong
12124,11-23,22:50,to another villa okay so what does this mean this
12125,11-23,22:55,basically means all those blue pores they can only connect with each other on
12126,11-23,23:02,if they are the same color if they are different colors they cannot directly connect with each other
12127,11-23,23:08,okay so that means when we do like broadcasting we can only broadcast to the same color
12128,11-23,23:16,from one to eight or from nine to sixteen we cannot broadcast to everybody
12129,11-23,23:21,okay so in this way we can virtually separate the devices chin to two
12130,11-23,23:30,different waylands okay so it's like we are
12131,11-23,23:36,um we have multiple virtual switches okay so it's like although although they are
12132,11-23,23:43,connected to the same physical switch but it feels like they are connected to different
12133,11-23,23:51,um switches okay it's like that then if one day if one day uh one computer moves
12134,11-23,23:59,the office okay so for example
12135,11-23,24:05,if this computer okay if this computer originally
12136,11-23,24:11,um it was from computer science and now it is it it is moved to electrical
12137,11-23,24:18,engineering office and we can still connect this to the big switch
12138,11-23,24:23,okay but we can just configure and make this
12139,11-23,24:29,color to be the yellow one so then in this case this computer still belongs to
12140,11-23,24:35,the computer science wheel and not the electro engineering relay okay so that
12141,11-23,24:40,by doing this we can enable the dynamic membership okay that means the post can be
12142,11-23,24:47,dynamically assigned among the vlans okay so that means for the yellow color
12143,11-23,24:53,when they do broadcasting they can reach to if this is 4 3 and this is four
12144,11-23,25:02,then in this case if computer science want to do broadcasting they can reach to not only 9 to 16 but also uh the port
12145,11-23,25:10,number three they can also reach this computer okay and then for these two different slants
12146,11-23,25:19,two wheelands we can connect them using a router okay we can connect them using
12147,11-23,25:26,a launcher so um that's how we do that and sometimes
12148,11-23,25:32,sometimes we may have multiple switches right so one big switch may not work may
12149,11-23,25:39,not be sufficient we may have another big switch okay so in this case how can
12150,11-23,25:45,we connect these two switches so very easy we just use some because it's trunk
12151,11-23,25:51,port to carry the frames between um multiple physical switches okay so
12152,11-23,25:58,for example we have connect 16 to 1 and then this is used to carry the frames
12153,11-23,26:04,between different switches okay and we can still define the colors uh in the
12154,11-23,26:10,same way okay define the vlans in the same way uh any questions
12155,11-23,26:21,so the the uh we learn frame format is a little bit different
12156,11-23,26:27,um so you can see there are some more information added here
12157,11-23,26:33,okay by the winner id field etc so you don't need to know this this is just for
12158,11-23,26:39,reference okay you don't need to know this for the test uh so for link virtualization we do not
12159,11-23,26:46,talk about this in this class okay for data center networks you can snore
12160,11-23,26:53,this center is basically we are basically connecting uh a lot of servers
12161,11-23,26:58,together a lot of hosts together right so tend to uh 100
12162,11-23,27:04,000 hosts and these holes are openly often often closely coupled in close
12163,11-23,27:11,proximity okay for example if we are using amazon or youtube or google
12164,11-23,27:17,whatever so those costs need to um provide service and also store the
12165,11-23,27:24,data okay and then the challenge is we have multiple applications each serving
12166,11-23,27:30,massive number of clients how can we manage the uh the workload how can we do
12167,11-23,27:38,load balancing avoid like uh overwhelming one host or a number of
12168,11-23,27:44,hearts over the others right um so
12169,11-23,27:50,why am i going to do that is using what we have learned uh using the switches
12170,11-23,27:56,okay so um for example you can see here we have the broader uh border
12171,11-23,28:03,um round structure and we also have the access routers then below that we may
12172,11-23,28:08,have some switches okay so these are the tier one switch
12173,11-23,28:13,and then we also have a tier 2 switch and the tor switch to r means the top uh
12174,11-23,28:21,on rack how those server
12175,11-23,28:28,um wrecks okay so and there are something called load balancer load
12176,11-23,28:34,balance are just normal computers okay uh they can run some algorithms those
12177,11-23,28:40,load balancers are connected to the tier one switch the functionality for load
12178,11-23,28:46,balancer is to receive the external client requests and then direct the
12179,11-23,28:52,workload to different costs within the data center and then return the result to the
12180,11-23,28:58,external client okay so basically the client cannot see a data center and
12181,11-23,29:06,clients feel like it is only receiving the result from one server but it's actually from a data center okay
12182,11-23,29:14,so you can see here the traffic is coming in it is going through a load
12183,11-23,29:19,balancer okay the load balancer may distribute to this load to other machines
12184,11-23,29:26,okay to other machines sometimes it may also need to connect to multiple servers
12185,11-23,29:31,for example we may have for example if this is a like this is a web server and
12186,11-23,29:38,this may be a data speed server okay the website when we need to query
12187,11-23,29:43,the database server to get the results and then the result will be returned back to maps around the
12188,11-23,29:50,web part so we will reply um to the client so this is the entire
12189,11-23,29:55,process and then with the load balancer and the switches etc we can assign the
12190,11-23,30:01,workload to different uh computer different hots so that we do not overwhelm just one person
12191,11-23,30:08,in the one machine sorry okay and there is a rich interconnection among the
12192,11-23,30:13,switches and drugs uh this can increase the throughput between the rocks okay
12193,11-23,30:19,and also of course increase the reliability uh through redundancy because we have redundant machines as
12194,11-23,30:26,backup if one machine is down and we have other servers to come up and work
12195,11-23,30:32,okay five-point assignment is
12196,11-28,0:03,the five-point assignment is like a summary of what we have learned so far
12197,11-28,0:09,from chapter 1 to chapter five okay i hope we can review what we have covered
12198,11-28,0:16,and give you like a whole picture of what we have learned okay
12199,11-28,0:22,so basically um today we are going to look at a day in
12200,11-28,0:28,the life of a web request okay it's like a story okay and next story
12201,11-28,0:34,um and we want to look at every every layer we want to when we make a web
12202,11-28,0:40,request we want to see what what is happening behind the scene okay
12203,11-28,0:45,um for you probably when you use web browser you what you do is you only click on a button and then you you are
12204,11-28,0:52,you are done right so you type in the url you hit enter and then you are
12205,11-28,0:58,waiting for the webpage but there are actually a lot of things happening behind the scene and we want to learn
12206,11-28,1:05,what is happening okay what is the entire process okay
12207,11-28,1:11,so basically our goal is to put it all together we call this as synthesis okay
12208,11-28,1:18,so the goal is to identify review and understand all the protocols at all
12209,11-28,1:24,layers involved in a simile um simple scenario so basically the
12210,11-28,1:30,scenario is very easy a student attaches a laptop to the campus network and then
12211,11-28,1:38,make a request of google.com very simple scenario okay let's see what is
12212,11-28,1:45,happening so firstly you can see uh this this is the comcast network this is the
12213,11-28,1:52,school network okay this is the web server and this is google's network of course this web server belongs to google
12214,11-28,1:58,okay this is google's web server and now we assume a laptop is connecting
12215,11-28,2:06,to this machine connecting to this network school network okay and then uh we the student
12216,11-28,2:13,then open the web browser and try to request google.com then of course what
12217,11-28,2:20,will happen is uh google's web server will return a web page right to the
12218,11-28,2:26,students computer so this is a very simple scenario but actually yes
12219,11-28,2:33,um from what we have learned before we know there are actually a lot of things happening
12220,11-28,2:38,so first thing first thing keeping in mind when this computer joins the
12221,11-28,2:44,network does this computer has uh have a ip address
12222,11-28,2:50,it does not it does not have an ip address so it needs to firstly request
12223,11-28,2:57,an ip address okay so how do we request the ip address
12224,11-28,3:06,we all know that we have learned dhcp right the function of dcp protocol is
12225,11-28,3:13,basically providing ip address to a newly joined computer
12226,11-28,3:18,okay so then in this case we know in this case we know this computer
12227,11-28,3:25,is making a dtcp request okay making a dtcp request and we know
12228,11-28,3:33,that for dtcp it is application layer protocol and now pay attention we want to look at each
12229,11-28,3:40,layer what what is the protocol used okay for application layer it is d2cp
12230,11-28,3:46,for transport layer when it comes down to transport layer we
12231,11-28,3:52,know we need to add a header transport layer header and this transport this transport layer
12232,11-28,3:58,the protocol we we used should be udp
12233,11-28,4:03,not tcp so we haven't learned this before right i have explained why we should use only
12234,11-28,4:12,udp not tcp because current for tcp we know we need to establish a connection
12235,11-28,4:18,between the source and the destination but here this computer itself does not
12236,11-28,4:25,have any ip address yet and also it doesn't know who is the dhcp server who
12237,11-28,4:32,is the destination okay so that's why it cannot make a tcp
12238,11-28,4:37,connection that's why we have to use udp so here i may have a test question
12239,11-28,4:43,i will ask you what is the protocol used as the application layer what is the
12240,11-28,4:48,protocol used at the transport layer so you should know those okay and then when
12241,11-28,4:54,it comes down to a layer below we know we will use ip protocol right
12242,11-28,5:00,um and then of course here we haven't started any like routine kind
12243,11-28,5:06,of things yet but we will for sure add the source and destination ip address
12244,11-28,5:11,okay and then it comes down the link layer if we are using ethernet okay then
12245,11-28,5:17,we will use uh uh ethernet protocol okay the protocol for ethernet so you can see
12246,11-28,5:23,uh finally then this packet comes down to physically here okay
12247,11-28,5:28,and then next we know we know this this frame
12248,11-28,5:35,okay finally this frame will be sent to the dtcp server but as we mentioned
12249,11-28,5:43,we don't know who is the server yet okay so in this case what should we do
12250,11-28,5:48,we actually we learned when we talk about the gcp we learned we should send
12251,11-28,5:54,this to everybody this is called broadcasting right we should broadcast this message to everybody in this
12252,11-28,6:01,network so then who how do we do the broadcasting we do broadcasting at
12253,11-28,6:08,ethernet at the lower layer the link layer we know if we want to do the broadcasting we have to use the address
12254,11-28,6:15,our 12 f's okay 12 f's on the left
12255,11-28,6:22,okay so if the if this if we do broadcasting at the
12256,11-28,6:27,um as the network layer we should use 255.255
12257,11-28,6:41,.255.255 this is how we do broadcasting as the network layer so network layer basically will specify the destination
12258,11-28,6:48,address as a uh 255.255.255.255 but at the link layer if
12259,11-28,6:55,we if we want to do broadcasting then we need to use 12 apps as the mac address
12260,11-28,7:01,as destination methodless okay i hope everything is clear so far okay then
12261,11-28,7:08,after that we know uh the dtcb server will receive this message this request
12262,11-28,7:15,and then begin to formulate a reply okay of course we know actually they're on a
12263,11-28,7:22,number of uh back and forth communications here but here we to
12264,11-28,7:27,simplify the problem we just look at the last one okay how the dtcp server
12265,11-28,7:34,formulated the reply the dtp server will basically a reply with
12266,11-28,7:42,a message which contains the client's ip address
12267,11-28,7:48,okay the ip address of the first hop router to remember
12268,11-28,7:54,we have mentioned this for multiple times okay and also the name and ip
12269,11-28,8:00,address our dns server and if you remember we also have network
12270,11-28,8:05,mask okay so those are the information that
12271,11-28,8:12,will be included in the reply message in the response message okay so the reason
12272,11-28,8:18,that we want to provide not only the client ip address but also the other
12273,11-28,8:24,information such as photo router ip address dns ip address network mask etc
12274,11-28,8:30,is basically introducing the network to this new camera okay to
12275,11-28,8:37,this new camera so that's in the future this this computer will know who to contact okay so there you can see the
12276,11-28,8:45,reply message is formulated and of course we are using udp again okay at
12277,11-28,8:52,the transport layer and the ip ethernet fisk layer okay so
12278,11-28,8:58,um so then you may ask how does this this switch
12279,11-28,9:04,how does this switch know which link to forward you when this
12280,11-28,9:12,packet comes in this frame comes in the switch needs to forward it to this
12281,11-28,9:18,new coming new camera right new computer then how does the switch know that we
12282,11-28,9:25,should forward this to listening okay we actually have learned the switch
12283,11-28,9:32,has a capability called self learning right self-learning then basically the
12284,11-28,9:39,switch will have a table
12285,11-28,9:48,a table called switch table okay in this switch table it will have the mac address
12286,11-28,9:58,the mac address and the link output link um pair okay then so gradually the
12287,11-28,10:06,switch will learn which mac address is corresponding to which link so the
12288,11-28,10:12,switch will know how to reach that computer okay so this is another thing you should keep in mind self-learning
12289,11-28,10:22,okay so now now the client has
12290,11-28,10:29,most of the information that it needs ip address its own ip address
12291,11-28,10:34,the name and address of the ds server and the ip address of its first hub
12292,11-28,10:40,browser later we will know the first half router is also very important okay
12293,11-28,10:47,so then the next thing is okay we want to send out the atp request
12294,11-28,10:55,right but we only know currently we only know google.com do we know the ip address of
12295,11-28,11:03,google.com yet we do not know okay so then we have to use another protocol
12296,11-28,11:09,called dns okay dns to make a request
12297,11-28,11:15,to to get the ip address for google.com then in this case in this case again
12298,11-28,11:20,okay uh we will application layer we will formulate a request that is the ds
12299,11-28,11:27,request okay when it comes down to transport layer again we will add a header okay
12300,11-28,11:32,and now you can see the transport layer is also using udp
12301,11-28,11:38,then it's also using udp so here for dns we can use tcp because we already know
12302,11-28,11:47,um the ds server the dn server is ip address okay but
12303,11-28,11:54,usually we we use udp the major reason is is for uh is because udp is much
12304,11-28,12:01,faster okay it's much faster right we does not need to uh spend time on making
12305,11-28,12:07,connections okay and we uh the udp packet is also very lightweight we know
12306,11-28,12:12,it has a much shorter header okay so we want to get this result as soon as
12307,11-28,12:18,possible so that's the main reason we use udp here at transport layer again okay so the lower layers are similar ip
12308,11-28,12:27,ethernet and then physical layer okay um
12309,11-28,12:33,but here we have a question so firstly we established the dns query okay we
12310,11-28,12:39,create this query and this is in cabinet encapsulating eodp
12311,11-28,12:45,um in ip and ethernet then the next thing is we want to send this frame to
12312,11-28,12:51,the router okay we need to send this frame to the to the router okay
12313,11-28,12:58,and then now we need the mac address of the
12314,11-28,13:04,router right so we need the mac address of the router if we want to send our frame to
12315,11-28,13:12,it we all we know that we know that this router is actually the first hub router
12316,11-28,13:26,so pay attention you know some of you may ask why do we need to send this frame to browser
12317,11-28,13:31,because we know that the answer if you come back to
12318,11-28,13:39,if you come back to this topology the dn server is actually in the comcast
12319,11-28,13:46,network and now this computer is in the school network okay so of course we will
12320,11-28,13:53,need to send this to the first hub router and then the first hole browser will forward the message for us to the
12321,11-28,14:00,dn server and to to um to get the ip address for google okay
12322,11-28,14:06,so that's why we must contact this first hub browser
12323,11-28,14:11,and we already know the uh if we want to
12324,11-28,14:17,contact this router we need to know the mac address for this router right but now we already know the ip address for
12325,11-28,14:25,this launcher how do we know so here i may ask you a question in the test how do you mean know the ip address
12326,11-28,14:32,for this purpose of router and from what we have discussed here actually we know
12327,11-28,14:42,how do we get that we gotta throw dhcp actually okay because dhcp protocol has
12328,11-28,14:49,returned the ip address of the first up router that's how we get to learn about
12329,11-28,14:55,this okay and now with this first hop
12330,11-28,15:00,router's ip address okay so
12331,11-28,15:05,so here let me
12332,11-28,15:28,so our assumption here is we already know the ip address of the first hop
12333,11-28,15:35,launcher how do we know we know the answer is dhcp okay we get to know this
12334,11-28,15:41,through gcp and then the next thing is okay we now know the ip address of the
12335,11-28,15:47,router that how do we know the mac address of this router
12336,11-28,15:52,so i want you to review what we have learned last time recall what we have learned last time if we already know the
12337,11-28,15:59,id address of one interface if we want to know the i the mac address for that
12338,11-28,16:06,the corresponding mac address then what we need to do is actually very easy
12339,11-28,16:11,it's just uh using arp right arp address resolution protocol so what if they are
12340,11-28,16:18,within the same line if they are within the same land then what we need to do is simply shouting to everybody simply
12341,11-28,16:26,doing the broadcasting right so then basically this computer will send out an
12342,11-28,16:32,erp query to everybody asking say hey who has this ip address okay then that
12343,11-28,16:40,router with this i uh ip address will reply with the mac address with its own
12344,11-28,16:49,mac address okay so this is the arp part okay uh and in the test in the final
12345,11-28,16:56,exam i may ask you a question so how could the uh if the this is if this
12346,11-28,17:03,computer wants to send a frame to the first hub router then it needs the mac address of firstcode browser so how
12347,11-28,17:10,could this computer know the mac address of this first hub browser then you know the answer is actually federal arp okay
12348,11-28,17:19,and then now we know the mac address so then we can go ahead to send out the dns query
12349,11-28,17:26,okay the dns query and okay we all also
12350,11-28,17:32,know this dns query will not stop here at the router it has to go through
12351,11-28,17:39,um the network and finally reach the ds right and we also know if we want to
12352,11-28,17:46,um know the mac address of this dns server okay we need to go through
12353,11-28,17:53,also the erp query right also the arp query and we also know uh in this
12354,11-28,18:00,process we actually need to change at this point okay at this point we need to change the
12355,11-28,18:06,mac address okay you you think about the sauce the
12356,11-28,18:13,sauce mag
12357,11-28,18:41,okay so when the frame leaves this computer okay now i use m1m2m through m4
12358,11-28,18:49,to represent the mac address for these different interfaces okay we know when
12359,11-28,18:55,this when this frame leaves the first computer okay the source mac address is
12360,11-28,19:01,actually m1 destination mac address is actually m2 okay how do we know m2 we just we just
12361,11-28,19:09,discussed we we do this through arp query right and then
12362,11-28,19:25,and then when the frame comes to here the the source
12363,11-28,19:32,max now becomes m third
12364,11-28,19:47,uh actually it's even more complicated okay it's even more complicated now
12365,11-28,19:54,because we have to go through two routers it's not just a wine router okay not just one router so then the
12366,11-28,20:00,destination mac is now has to be this mac okay and then with this router will
12367,11-28,20:05,have to change it again from uh this this mac to this map so they say let's
12368,11-28,20:11,see if this is m4 m4 m5 m6 okay this can be m
12369,11-28,20:19,four okay um
12370,11-28,20:24,and then here we need to make the mac address as a source as m5
12371,11-28,20:31,then destination as a m6 okay so uh but here for this part i will
12372,11-28,20:40,not test you because this is getting more complicated um let's see i'll just erase this part
12373,11-28,20:47,to make it easier to understand
12374,11-28,20:56,okay uh but but if you still want to review okay if you want to have a better
12375,11-28,21:03,understanding you'd better come back to the arp protocol we have learned before
12376,11-28,21:09,okay and um this this actually this slide
12377,11-28,21:14,addresses the problem of routing to another uh lamp okay how do we change
12378,11-28,21:20,the mac address so review that part again to have a better understanding but
12379,11-28,21:26,anyway here here okay uh i will test you to that that depth the only thing you
12380,11-28,21:32,need to know is actually within same line we know we have to send an erp query then if we want to go across
12381,11-28,21:40,different lines okay we also need to send out the arp query
12382,11-28,21:45,okay and then
12383,11-28,21:53,okay we also need to send out the erp query but but finally finally okay
12384,11-28,22:00,finally this dns requests need to be sent to the dn server okay and then in
12385,11-28,22:06,this process in this process we need we know the router has to do some routine okay and then here is uh where we want
12386,11-28,22:16,we want to consider the routine protocol so what kind of routing protocol can we use so we have learned the the internet
12387,11-28,22:24,routine and the intra as routine right so for example for intra is routing we
12388,11-28,22:31,learned the bgp we know there is ibdp and ebdp so they have different
12389,11-28,22:37,um functions right so for edp ebgp we
12390,11-28,22:42,know it is using to it is used to learn reachability information
12391,11-28,22:48,ipdp is then used to propagate the reachability information to everybody
12392,11-28,22:54,inside this local area network okay that is a bgt then for os for the intro as
12393,11-28,23:01,routine protocol we know we can use ospf okay so those are the protocols that we
12394,11-28,23:07,have learned for round team so here i want i want you to know only ospf and bjp
12395,11-28,23:14,um and then finally this cancer will received this uh uh this dns query and
12396,11-28,23:20,you can see the headers are removed layer by layer finally the application
12397,11-28,23:26,layer has the ds query then it will form a response
12398,11-28,23:31,okay one more response and reply to the computer to the client the ip address of
12399,11-28,23:39,google.com so now finally we get the ip address of
12400,11-28,23:44,google.com okay then the next thing we need to do is okay now i have the ip address then
12401,11-28,23:53,we can finally send out the http request right so then you can see the computer
12402,11-28,23:59,now forms a http request and then a weight comes down to the transport layer
12403,11-28,24:05,okay we know we must use tcp the reason is because we need
12404,11-28,24:11,reliability okay we want this request to be sent without any error okay and of course
12405,11-28,24:19,before we do data exchange we have learned this for many times
12406,11-28,24:25,before we do this exchange we need to firstly establish a connection how do we
12407,11-28,24:31,establish the connection we do three-way handshake do you still remember that okay we do three hashing to establish a
12408,11-28,24:38,connection this is actually an extra step compared to udp for udp we do not
12409,11-28,24:45,need to do any three hashing right we do not need to establish any uh connection
12410,11-28,24:51,but for tcp for tcp we have to establish the connection
12411,11-28,24:56,um so how do we do the three hatching we we know we firstly set the same into one
12412,11-28,25:04,okay such thing into one and the ac key equal to zero
12413,11-28,25:10,okay then the other side will reply with
12414,11-28,25:20,with uh sorry with c equal to 1 ac equals to one okay
12415,11-28,25:27,then finally we will have a confirmation from the client with
12416,11-28,25:36,c equal to 0 is equal to one that's how we establish the connection okay
12417,11-28,25:42,and then you can see this is sent this is sent this is actually the first step
12418,11-28,25:47,this is sent to the server okay this is the first step sent to the server uh and
12419,11-28,25:53,then the silver will formulate sing a c k okay this is the second step actually
12420,11-28,26:00,this is this one
12421,11-28,26:27,just this is the scene ack uh reply okay
12422,11-28,26:32,and sorry it's too fast then it is sent back so you can see the client
12423,11-28,26:39,um remove the headers layer by layer and actually there is another one finally
12424,11-28,26:44,finally um uh the client will also confirm again with c equal to 0 ac k equal to one okay
12425,11-28,26:52,this is the three-way handshake uh and then we know the tcp connection now
12426,11-28,26:57,established okay so as a final step now the http request
12427,11-28,27:03,can be sent out okay and we add headers at each layer and we are using tcp and then this is
12428,11-28,27:11,set to the server the server remove all the headers extracted http request and
12429,11-28,27:19,then finally form a response with the requested web page okay so then this is
12430,11-28,27:28,this http response actually has actually has the web page
12431,11-28,27:34,in the data right so this is a response message it's a send back to the client
12432,11-28,27:39,and finally the client now can remove all the headers lead by layer and then
12433,11-28,27:46,extract the web page and display it on the web browser so this is the final step
12434,11-28,27:52,um okay so that is uh the day in the live for the http request and reply
12435,11-28,27:59,uh actually you can see uh this is a this is a really long process right so if we summarize
12436,11-28,28:07,the first step is dhcp the dcp is mainly used for getting the ip address for the
12437,11-28,28:14,client and also get some information about the network for example the first
12438,11-28,28:20,half routers ip address uh the ip address for the ds server and the network mask etc okay so those are the
12439,11-28,28:28,information that we get through the hcp server um and then the second protocol we use
12440,11-28,28:34,is actually uh dns because knowing only google's
12441,11-28,28:41,um hostname is not enough we need the ip address for this computer that's why we
12442,11-28,28:47,need to um send out another dns query
12443,11-28,28:53,um and then finally we do http okay then we
12444,11-28,28:58,can send out the http request and of course before the http request we need to establish a connection first right
12445,11-28,29:05,through theory handshake um and then at lower layer at lower layer we know a lot of things has
12446,11-28,29:11,happened for example how do we do broadcasting we use
12447,11-28,29:17,um uh if it's network layer we use 255 255 25
12448,11-28,29:23,as the ip address if it's link layer we use 12 apps as the mac address right
12449,11-28,29:29,that's how we do the broadcasting and how could the switch now
12450,11-28,29:34,um which outputting to choose to send we know the switch has a switch table and
12451,11-28,29:41,how do we get the sweet table we use self learning right
12452,11-28,29:47,um and also sometimes we know the ip address of the first home browser okay
12453,11-28,29:52,or some computer some other ip address so then we need to know the mac address
12454,11-28,29:59,for that interface how do we know the mac address we know we we can use arp
12455,11-28,30:05,query so you can see a lot of information is contained in this one complete story one scenario a lot of
12456,11-28,30:14,information and i really hope i really hope you can go back to review what we have learned
12457,11-28,30:22,today and kind of synthesize uh all the different layers and make this story
12458,11-28,30:28,complete okay and then in the final exam i will definitely have a question about
12459,11-28,30:34,this okay i'll be i will ask you what are the protocols used at each layer
12460,11-28,30:41,um how do how does the sweet table be generated how is the switch table be
12461,11-28,30:47,generated or how could the switch know which output link to send okay how do we do broadcasting okay or uh if you do not
12462,11-28,30:56,know the ip address and how do you send this package to the
12463,11-28,31:02,destination okay we know we have to do broadcasting sometimes so
12464,11-28,31:07,uh and also i may ask you something about the arp query so a lot of things i
12465,11-28,31:13,will ask so really please review what we have learned today okay
12466,11-30,0:05,okay so chapter six is about network security network security is the last
12467,11-30,0:11,chapter in our entire semester basically in this chapter we try to understand the
12468,11-30,0:17,principles of network security including the cryptography authentication message integrity
12469,11-30,0:25,etc and we will also talk about the security practice for example how can we
12470,11-30,0:31,deploy firewalls and electricity systems what are the mechanisms behind them and
12471,11-30,0:38,um what are the security or how are the security deployed in application
12472,11-30,0:43,transport network and ink layers etc so this is an outline of the entire
12473,11-30,0:49,chapter first let's look at the question what is network security
12474,11-30,0:57,basically in our security there are three major principles we call it as cia
12475,11-30,1:05,so c stands for confidentiality
12476,11-30,1:14,i stands for integrity foreign
12477,11-30,1:20,a stand for availability
12478,11-30,1:29,so you will learn about this three principles again in csc154
12479,11-30,1:37,now let me briefly explain what the those principles are firstly
12480,11-30,1:42,confidentiality so this means only the sender and the receiver should
12481,11-30,1:49,understand the message contents so this message should be confidential to
12482,11-30,1:56,um only the sender and the receiver okay so then in order to ensure the
12483,11-30,2:01,confidentiality usually we need the senders to encrypt the message and the receiver to decrypt the message okay so
12484,11-30,2:08,that is the computationality then the next thing is the integrity so
12485,11-30,2:15,integrity we have basically two aspects one aspect is the source integrity which
12486,11-30,2:23,means we need to make sure this message is indeed sent by somebody okay it's not
12487,11-30,2:30,by anybody else it's indeed by this person or this computer or this router
12488,11-30,2:35,okay so for that what we do usually is we need to do authentication okay so
12489,11-30,2:42,authentication is basically used to ensure or enforce the source
12490,11-30,2:51,integrity okay
12491,11-30,2:56,so that in this case we need the sender and receiver confirm the identity of
12492,11-30,3:02,each other then the second aspect of the integrity is actually content integrity
12493,11-30,3:09,which means we want to ensure the message is not altered the message
12494,11-30,3:17,itself the content of the message is not ordered during the transition or after
12495,11-30,3:24,the transition okay so those are the two aspects of integrity you think about this again
12496,11-30,3:32,firstly source integrity and then we have content integrity okay the last
12497,11-30,3:37,thing is availability availability means the resources or the
12498,11-30,3:44,services must be accessible and available to the users okay so you think
12499,11-30,3:51,about the denial service attack we talked about in chapter one right so basically
12500,11-30,3:58,for that attack it makes the resources or the services and available to
12501,11-30,4:04,legitimate users now in this case we say oh okay availability is not there anymore okay okay so those are the three
12502,11-30,4:14,um principles of network security i hope you keep this in mind confidentiality integrity and availability okay
12503,11-30,4:22,and later we will discuss how to ensure the this three principles uh using some
12504,11-30,4:31,security matters okay all right so before we talk more about
12505,11-30,4:38,security like firstly introduce uh some k roles in security words okay
12506,11-30,4:45,so alice ball and trudy these three people are really famous in the network
12507,11-30,4:52,security community so firstly n is an above are two users okay because for
12508,11-30,4:59,example they can be lowers okay they want to communicate securely
12509,11-30,5:04,but we may have some intruder such as judy okay who may intercept delayed or
12510,11-30,5:13,add messages into the communication between alice and above so here you can
12511,11-30,5:19,see alice and bob has some data they want to communicate okay but the
12512,11-30,5:25,truly may do something bad in the middle okay so keep this in mind we will use
12513,11-30,5:33,these three rows again again and you may ask who can be alice in one
12514,11-30,5:41,okay in real life in real life alison and bob can be anybody can be any
12515,11-30,5:49,regular users or they can be with the web parameters
12516,11-30,5:55,and clients okay they can be the online banking
12517,11-30,6:01,client and server two machines they can be the dn servers and the clients
12518,11-30,6:07,or they even be between the dn servers they can be the routers okay so they can
12519,11-30,6:14,be a lot of things they don't have to be the real person they can be two machines to devices keep
12520,11-30,6:22,this in mind and then for truly what can truly do
12521,11-30,6:28,what can a bad guy do the better guy can actually do a lot of things if you
12522,11-30,6:34,recall what we have learned in chapter one okay the bad guy can
12523,11-30,6:39,do abstract for example he or she can interest at the messages
12524,11-30,6:45,he or she can also insert new message or wrong message or fake
12525,11-30,6:51,messages into the connection right he or she can also impersonate somebody
12526,11-30,6:57,else they can do eyepiece spoofing email spoofing they can fake the source
12527,11-30,7:04,address in the package they can also do hijacking hijacking means basically to
12528,11-30,7:09,take over an ongoing connection by removing either the sender or receiver
12529,11-30,7:15,and then inserting himself in place we have a very famous attack called session
12530,11-30,7:22,hijacking in security and the bad guy can also do the nile
12531,11-30,7:27,service which means prevent the service from being used by others okay we have
12532,11-30,7:33,discussed this before and then after we learn the network
12533,11-30,7:39,security the basic knowledge i want to introduce the principles of
12534,11-30,7:46,cryptography because that is like the foundation for network security without
12535,11-30,7:52,cryptography we cannot do anything to network security okay so only with the foundation of
12536,11-30,8:00,crypto cryptography and then we can deploy a lot of different mechanisms to
12537,11-30,8:08,help us achieve the cia confidentiality integrity and availability okay
12538,11-30,8:15,all right so firstly let's look at the language for cryptography
12539,11-30,8:21,in cryptography unfortunately need to know plan text and then you should know save for text
12540,11-30,8:29,so ciphertext is generated by encrypting
12541,11-30,8:35,the plain text with an encryption algorithm and an encryption k
12542,11-30,8:42,so we use ka to represent alice's encryption k after the ciphertext is
12543,11-30,8:49,generated it will be sent to bob the recipient
12544,11-30,8:54,then the resentment will decrypt this ciphertext with the decryption algorithm
12545,11-30,9:02,and also bob's decryption k which is kb
12546,11-30,9:08,and eventually it will generate the plain text okay so here we use m to represent the
12547,11-30,9:16,plain text message and then we can use kam
12548,11-30,9:23,to represent the ciphertext which is generated by
12549,11-30,9:29,encrypting the message with the k of a
12550,11-30,9:35,or the k of alice the encryption k o l is okay and then for the decryption we
12551,11-30,9:44,can do this which means we can use this is the cipher text right the km is the
12552,11-30,9:51,cycle text then we can use kb the decryption k to decrypt
12553,11-30,9:59,the ciphertext and then generate the plain text message m so these are the
12554,11-30,10:07,language we will use for cryptography and later you will we will use it again
12555,11-30,10:12,and again so personally for cryptography let's talk
12556,11-30,10:20,about the symmetric key cryptography it's actually a very natural thing when
12557,11-30,10:25,you talk about the cryptography or the encryption decryption it's a very
12558,11-30,10:31,natural to think oh the the encryption k and the
12559,11-30,10:36,decrement k can be the same right so in this case um we say bob and alice share the same k
12560,11-30,10:45,then we call this as symmetric take cryptography that means the k is known to both alice
12561,11-30,10:54,and above okay um so you may ask how to bob and alice
12562,11-30,11:02,agree on the k value this is actually a very important question because we want to
12563,11-30,11:09,um not only ensure the message is confidential right we also want to
12564,11-30,11:16,ensure the k itself is confidential so in the old days people usually
12565,11-30,11:22,exchange this uh um encryption and decoration k face to face
12566,11-30,11:29,okay the the meat for example meeting at some place physically and then they
12567,11-30,11:35,exchange the k so then later they can use the k for secure communication
12568,11-30,11:40,that's usually what they do yeah let's look at an example of
12569,11-30,11:47,the symmetric k cryptography so it's a very uh simple
12570,11-30,11:53,scheme for example here we can say this is one type
12571,11-30,11:58,substitution cipher which means we can substitute one thing for another thing
12572,11-30,12:06,okay here in this example you can see this is a mono alphabetic cipher which
12573,11-30,12:13,means we substitute one letter for another letter so in this example you can see this is the plain text we have
12574,11-30,12:19,abcd to the 26 letters and then these 26 letters
12575,11-30,12:27,will be replaced one by a man for example a can be replaced to m inside
12576,11-30,12:32,for text b can replace the two n inside for text okay then with this with this mapping
12577,11-30,12:42,then the plane if the plain text is above i love you alice this can be
12578,11-30,12:49,encrypted into nkn etc as the cipher text so basically b is replaced to n
12579,11-30,12:58,oh as you can see it's replaced to k b is replaced to n again so it's a very
12580,11-30,13:05,easy substitution okay um so this is actually already uh
12581,11-30,13:11,advanced version of a substitution cipher uh originally when people firstly
12582,11-30,13:18,design the substitution cipher the one very simple way is
12583,11-30,13:24,um replace a letter with a letter that is behind
12584,11-30,13:29,so for example we may we may say a can be replaced with the same b can be
12585,11-30,13:35,replaced with d and c can be replaced with e it's like that okay or of course
12586,11-30,13:40,you can say a can be replaced with f and b can be replaced with g c can be
12587,11-30,13:48,replaced with h it is also fine okay but anyway you can see no matter
12588,11-30,13:54,how this is done these are all the substitution ciphers
12589,11-30,14:00,okay these are all called the substitution ciphers um so this is a very easy way but of
12590,11-30,14:07,course you can see it's very simple and it's me it may not be very reliable
12591,11-30,14:13,um for example there are many different ways for analyzing the ciphertext
12592,11-30,14:20,if for example if somebody else gets this type of text
12593,11-30,14:26,and he or she can analyze the fire cipher text by using statistics for
12594,11-30,14:32,example and then say oh okay the most commonly used letter in english is let's
12595,11-30,14:38,say t okay then by analyzing all the
12596,11-30,14:43,cipher texts statistically then he can guess oh okay t is replaced into
12597,11-30,14:50,you okay so it's like that so there are some ways to decrypt this and also uh if
12598,11-30,14:58,for example the uh somebody somebody know okay this message is about bob and
12599,11-30,15:05,alice and they may guess oh okay alice this is the name of alice and then very
12600,11-30,15:12,likely alice is interpreted into this then he or she immediately knows a is
12601,11-30,15:19,replaced with m l is replaced with the g7 so you can see these are all the ways
12602,11-30,15:25,uh to guess the potential substitution that's why this kind of a scheme is
12603,11-30,15:32,actually not very reliable okay and in this case you can see the
12604,11-30,15:37,encryption k is actually the mapping
12605,11-30,15:42,okay this mapping from the set of alternative clusters to another set of
12606,11-30,15:48,26 letters is the encryption k okay this encryption k will be shared by the
12607,11-30,15:56,sender and the receiver okay because this substitution cipher is not
12608,11-30,16:04,that um reliable that's why uh nowadays we
12609,11-30,16:10,are using more advanced symmetric key cryptos like ds data encryption standard
12610,11-30,16:16,so this is um uh d e s is actually we
12611,11-30,16:22,call it block cipher which means it is actually using a 56-bit symmetric key
12612,11-30,16:30,okay and um the plain text is divided into
12613,11-30,16:37,64-bit input and then the inclusion is down
12614,11-30,16:43,in units of blocks okay so how secure is ds
12615,11-30,16:48,uh in the ds challenge you can see the 56-bit encrypted phrase can be decrypted
12616,11-30,16:56,in less than a day so it's not very secure actually okay in order to make
12617,11-30,17:02,this more secure um people also designed 3ds which means we
12618,11-30,17:09,increase it three times with three different case 40 years to make this
12619,11-30,17:14,more secure okay and um in addition to that
12620,11-30,17:22,people also designed aes which is advanced encryption standards so this
12621,11-30,17:29,now has already become the new standard for a symmetric key it has replaced des
12622,11-30,17:40,the data are processed in 128 bit blocks so for the case it can be 108 bits
12623,11-30,17:48,192-bit or 256 bit if you compare ds and aes
12624,11-30,17:56,the brute force decryption takes only one second on the yes but it
12625,11-30,18:03,needs to take 149 trillion years for aes as you can see esl is actually much more secure
12626,11-30,18:11,than ds okay um
12627,11-30,18:16,so that you may ask does the symmetric encryption surface
12628,11-30,18:23,is it good enough we see symmetric encryption is usually
12629,11-30,18:29,very fast but it has limitation you think about this so the first limitation is that this k is known by both the
12630,11-30,18:39,sender and the receiver as we said
12631,11-30,18:45,we want to the center and the receiver to agree with this case but how can we
12632,11-30,18:51,distribute to the k right of course we can say oh they can meet
12633,11-30,18:57,personally choose change the k that's fine but that's not efficient especially if we
12634,11-30,19:03,are doing everything online right so the k distribution and agreement is very
12635,11-30,19:09,vulnerable the second thing is the k is not attached with identity
12636,11-30,19:17,that means if the sender and the receiver assembly fight with each other
12637,11-30,19:22,the receiver will say hey the sender has disclosed some information
12638,11-30,19:28,but how can we prove that we cannot right so the center can simply deny that
12639,11-30,19:35,that's that's the that because this key is shared by both the sender and the
12640,11-30,19:40,receiver so they can easily deny something they have already done okay so that is uh
12641,11-30,19:48,actually against something we call as non-reputation okay
12642,11-30,19:54,so this this is a one aspect the second aspect is the k management
12643,11-30,20:00,management problem that means when alice wants to securely communicate with a
12644,11-30,20:07,large number of people or a large number of receivers then alice needs to remember or manage a
12645,11-30,20:16,large number of kids that is sometimes can become very com very complex for for alice okay so those
12646,11-30,20:25,are the two limitations for symmetric encryption
12647,11-30,20:32,um so we have mentioned this right how can
12648,11-30,20:37,they agree on the k in first place um with those limitations then people
12649,11-30,20:45,finally designed something called public key cryptography publicly cryptography i would say is
12650,11-30,20:53,very very important um for security
12651,11-30,20:58,so basically in public key cryptography the sender and the receiver they do not
12652,11-30,21:05,share the secret key this this approach is very different
12653,11-30,21:11,from the symmetric key encryption the public key
12654,11-30,21:16,okay the public key is known to everybody to or
12655,11-30,21:22,but the private key is known only to the receiver
12656,11-30,21:27,so in public key encryption and decryption or public key
12657,11-30,21:33,crypto cryptography we usually have both
12658,11-30,21:44,we have a pair keep here public key and also private key okay again public key
12659,11-30,21:49,is public private key is private okay so known only to the receiver
12660,11-30,21:57,okay so then how is this used let's see this example in this example again we
12661,11-30,22:04,have alice and bob now if alice wants to send a message to bob
12662,11-30,22:13,and it will first link encrypt the data for the message
12663,11-30,22:20,with bob's public key we know public key is public to everyone right
12664,11-30,22:28,so of course l is no bob's public key so alice will encrypt the message with with
12665,11-30,22:34,bob's public key and then when bob received this message
12666,11-30,22:42,receive this cipher text bob will do the decryption using his own
12667,11-30,22:48,private key it's very interesting okay so firstly alice will do encryption with
12668,11-30,22:54,bob's public key and then bob will equip with his own private key
12669,11-30,23:02,okay so actually this has changed significantly
12670,11-30,23:08,the we of cryptography the 2000 year old
12671,11-30,23:13,or we know as symmetric k cryptography
12672,11-30,23:19,okay and actually this idea of public key very interestingly
12673,11-30,23:24,um this idea is was developed in u.s and
12674,11-30,23:29,uk independently roughly at the same time okay the same idea
12675,11-30,23:36,so then now let's look at the encryption algorithm the requirement
12676,11-30,23:42,for this public inclusion algorithm is that firstly we need
12677,11-30,23:51,the public key we use kb plus to wrap in the public key
12678,11-30,23:57,and the kb minus to represent the private key okay so
12679,11-30,24:04,then we know given a message if we encrypt it with public key
12680,11-30,24:12,we can then decrypt this ciphertext with the predicate to get this message
12681,11-30,24:20,from m again this is the first requirement the second requirement is
12682,11-30,24:26,given public key kb plus it should be impossible to compute the
12683,11-30,24:35,private key b minus why because we know public k is publicly
12684,11-30,24:44,available so everybody can see the public key then if
12685,11-30,24:49,it is possible to compute the private key then this entire
12686,11-30,24:56,public key encryption map method will fail right so that's why we should make sure
12687,11-30,25:04,it's not possible to compute the private key through the public key okay so those
12688,11-30,25:11,are the two requirements keep academic in mind one very commonly used public key
12689,11-30,25:19,inclusion algorithm is called rsa rcv is very very common and it's foundational
12690,11-30,25:26,okay so let's look at the ic album
12691,11-30,25:33,um i i'll give i i know this is probably a bit abstract to you but i'll give you
12692,11-30,25:38,an example and hopefully you can understand the general idea why i say
12693,11-30,25:44,um for the foundation for the theory behind
12694,11-30,25:50,rsa we will not talk about that in detail like the numbers here theory
12695,11-30,25:55,right so we will we will just ignore that part but i still want you to have an idea how this algorithm is uh used
12696,11-30,26:04,okay so firstly we pick two large primes p and q
12697,11-30,26:13,so for example let's pick p as 3 and q as 11. these two
12698,11-30,26:20,numbers are very small so 311 are very small but in reality in real rsa p and q
12699,11-30,26:27,will be very large prime numbers they cannot be very small if they are very
12700,11-30,26:32,small then this algorithm is not very secure okay
12701,11-30,26:38,so you can easily guess the inclusion decryption k or the
12702,11-30,26:44,private and public key okay so the next and let's calculate n
12703,11-30,26:51,equals to p times q it's very easy right and equal to 3
12704,11-30,26:56,times 11 equals to 33. after that we pick e
12705,11-30,27:04,such that it is relatively prime to phi n what is phi n 5 is q
12706,11-30,27:14,minus 1 times p minus 1. so
12707,11-30,27:21,that means 5 equals to 3 minus 1 is 2. 11 minus y is 10. so 2
12708,11-30,27:31,times 10 equals to 20. we want to pick a e that is prime to 20.
12709,11-30,27:40,so we can pick a number for example here we can pick 7. there is some way to
12710,11-30,27:46,calculate to to to help you pick this number e okay so 7 is relatively prime
12711,11-30,27:53,to 10 because their greatest common
12712,11-30,27:59,divider is one okay and then next we want to calculate
12713,11-30,28:05,another number d d can make
12714,11-30,28:12,d e mode phi n equals to 1. okay again
12715,11-30,28:17,there is some way to help you do the calculation and in this case we can say okay
12716,11-30,28:25,d equals to third by some calculation we know d equals 3 because what because
12717,11-30,28:32,through is d right okay 3 times e
12718,11-30,28:40,is 7. okay mod
12719,11-30,28:46,er what modify n y n is 20.
12720,11-30,28:52,this equals to one right twenty twenty one two times
12721,11-30,28:58,seven equals 21 21 mode 20 equal to 1. so that's why we choose d equal to 3.
12722,11-30,29:07,okay so so that d times e multiply n can equal
12723,11-30,29:14,to 1. again there is some algorithm how do you calculate d but now you remember that
12724,11-30,29:20,okay after that we get the public key
12725,11-30,29:26,public k is k plus which is e and n
12726,11-30,29:32,okay it's a it's a a tube obviously okay e is a
12727,11-30,29:39,foreign
12728,11-30,29:44,and n is 33. so the probability k is then
12729,11-30,29:50,dn d is a three we have calculated and n is third
12730,11-30,29:57,season okay so now you can remember
12731,11-30,30:04,for e okay you can even if you want to remember this you can remember it as
12732,11-30,30:11,encryption and for d you can remember as as a decryption so that you know okay e
12733,11-30,30:19,n is the public k and dn is the probability so now let's remember this
12734,11-30,30:30,so public key remember is a 7 33
12735,11-30,30:36,. and private key is 33.
12736,11-30,30:48,okay so we know 33 is n
12737,11-30,30:53,and this is e this is d and this is a okay third is d
12738,11-30,31:00,and it's a 33. now let's see how the data can be encrypted
12739,11-30,31:09,and decrypted so basically this is how we get the
12740,11-30,31:14,cipher text
12741,11-30,31:30,okay firstly for the encryption process we have plain text this is the plain
12742,11-30,31:36,text plain text to the power
12743,11-30,31:42,of e which is 7 right in this example mod and
12744,11-30,31:51,okay then we get the cipher text then when we do the decryption we use
12745,11-30,31:56,the ciphertext to the power of d which is the
12746,11-30,32:03,part of the private key mode n and then we get the plain text
12747,11-30,32:08,okay so now let's look at example for example if we want to send a data
12748,11-30,32:13,a piece of data which is four okay a very simple message before then
12749,11-30,32:19,how can we generally design for text we use four
12750,11-30,32:25,to the power of e which is 7.
12751,11-30,32:30,mod n n is 33. if you calculate a number this equal to
12752,11-30,32:37,16 which means the plain text is a four and then the
12753,11-30,32:44,ciphertext is a 16.
12754,11-30,32:52,okay and when we do the decryption we will use
12755,11-30,32:58,16 the cipher text to the power of d which is a
12756,11-30,33:05,3. mode and again this will equal to
12757,11-30,33:12,4. as you can see 4 is what the plane
12758,11-30,33:17,text this is like a magic right so you use the side the plain text
12759,11-30,33:27,encrypt it with the public key e n
12760,11-30,33:33,and you get server text later you take the ciphertext
12761,11-30,33:40,then you do the same calculation using
12762,11-30,33:45,the prodigy then you can get the plain text right so it's like magic
12763,11-30,33:54,and you may ask what if i do this in a different way
12764,11-30,34:00,so now you can see in this case we are doing encryption with public key and
12765,11-30,34:05,then doing decryption with private key what if we switch
12766,11-30,34:10,that means we firstly do the encryption with private key and then do the
12767,11-30,34:19,equation with the public key so again we know
12768,11-30,34:26,k plus which is the public key
12769,11-30,34:32,is 7 33
12770,11-30,34:51,okay so still the same number 7 33 and for private key
12771,11-30,34:59,is 3 33 okay so what if we still send the same data
12772,11-30,35:08,okay but this time we want to encrypt with
12773,11-30,35:15,private key first okay which means given 4 we want to
12774,11-30,35:20,increase with probability which is uh 33. so 4 to the power of what d which is
12775,11-30,35:29,third mod 33 this equals 31. so that
12776,11-30,35:34,means the plain text is a four and the ciphero text is uh 31.
12777,11-30,35:41,and now we do decryption we have 33
12778,11-30,35:46,sorry 31 ciphertext and we want to use the public key
12779,11-30,35:52,through the decryption so that in the public key e is a
12780,11-30,35:57,7. the mod and then we get a 4 again
12781,11-30,36:04,this is very interesting right so that means even if you switch
12782,11-30,36:10,the private key and public key switch the order the inclusion and equation
12783,11-30,36:15,order they still have the same effectiveness okay so that means that
12784,11-30,36:22,means given the same message
12785,11-30,36:27,if we do the encryption with public key first
12786,11-30,36:33,and then followed by private key
12787,11-30,36:39,this will recover m it is the same as you're firstly doing
12788,11-30,36:46,the encryption with provocate and then do the decryption with public
12789,11-30,36:53,key you still recover m that means it doesn't really matter
12790,11-30,36:58,which order you do okay the result is the same actually
12791,11-30,37:04,this property is very very useful as you can see later when we discuss the detail
12792,11-30,37:11,signatures of the conventionality things like that authentication itself you can
12793,11-30,37:16,see this is obviously this is a very uh
12794,11-30,37:21,very smart or very brilliant okay so uh this kind the public key cryptography is
12795,11-30,37:29,one of the most important um design and development in the
12796,11-30,37:35,security field okay now let's see how the rsa can be used
12797,11-30,37:41,you think about this how can this be used so firstly given a message app
12798,11-30,37:50,we can first use the recipient public key against the message which means we
12799,11-30,37:57,encrypt the message with publicly and then later
12800,11-30,38:02,the private key can be used to restore the original message
12801,11-30,38:08,this is basically used for confidentiality okay for example if you
12802,11-30,38:14,want to send a message to somebody you can use that person's public key and
12803,11-30,38:20,then after that that person receives the cipher text then he or she can
12804,11-30,38:25,decrease the message with his or her own privacy so this is a full
12805,11-30,38:31,confessionality and a different type of use is that give her a message
12806,11-30,38:38,we can firstly use the sender's private key to sign the
12807,11-30,38:45,message to do the encryption okay and then later
12808,11-30,38:51,when the receiver receives this the receiver can use the public key to
12809,11-30,38:59,verify the signed message because it can the public can be used to recover the
12810,11-30,39:04,message right and this private key is only known to the sender
12811,11-30,39:11,nobody else knows the sender's private key so of course if later this
12812,11-30,39:17,ciphertext can be decrypted by the sender's private key then we are
12813,11-30,39:24,sure this message is sent by this person by the sender nobody else because nobody
12814,11-30,39:31,else has the private key of the sender so that is used for digital signature
12815,11-30,39:39,that is actually the idea of digital signature this is usually used for
12816,11-30,39:44,different purposes like for example for content integrity content integrity means we can use this to prove
12817,11-30,39:52,the message itself or the content itself is not changed okay and we can also use this for
12818,11-30,39:58,authentication or source integrity which means oh this message is indeed sent by
12819,11-30,40:07,this person not anybody else okay and this can also be used for noun
12820,11-30,40:13,repudi reputation repetition which means
12821,11-30,40:19,the sender once this sender sign with the private key
12822,11-30,40:26,he or she cannot deny this because nobody else knows his or her priority
12823,11-30,40:32,okay so this is a different use for rsa
12824,11-30,40:38,you can see ise can be used for different purposes all right now let's look at this example
12825,11-30,40:46,so for this example this is a four computationality
12826,11-30,40:56,okay so firstly you can see the sender has plain text
12827,11-30,41:01,this plain text can be encrypted with the recipients public key
12828,11-30,41:09,and then we generate the ciphertext after the recipient of the receiver
12829,11-30,41:15,receives this such text it can decrypt the message with the recipient's private
12830,11-30,41:24,key to recover the plain text so this is to protect the message
12831,11-30,41:31,okay so this is the four conditionality then we can also use
12832,11-30,41:37,rsa for detail signature and keep in mind the public key cryptography is usually
12833,11-30,41:46,very expensive computationally intensive
12834,11-30,41:51,so usually when we do the encryption using a public key
12835,11-30,41:57,for example especially for long messages a super long message it can be very very
12836,11-30,42:04,expensive if we are using crypto if you are using public key cryptography so
12837,11-30,42:09,that's why usually if we have a long message we will first lay
12838,11-30,42:16,generator digest for this long message how do we do that we use a hash right we
12839,11-30,42:24,all learn the hashing algorithm before right so we use a hash to generate a digest of the message this hash is a
12840,11-30,42:32,is very this digest is very short compared to the message
12841,11-30,42:38,the read the message and then later we can use
12842,11-30,42:43,and this is a private key to encrypt only the digest
12843,11-30,42:50,we do not need to increase the entire message we only need to increase digest
12844,11-30,42:56,and then generate the encrypted massive digest
12845,11-30,43:02,we send this entire thing to the receivable then what bob will do is
12846,11-30,43:09,bob for the same message okay here we do not care about
12847,11-30,43:15,computationality we are thinking about the integrity so basically with this
12848,11-30,43:22,message the same message bob we are also run the same hashing algorithm to
12849,11-30,43:30,generate the digest
12850,11-30,43:35,okay meanwhile meanwhile after receiving this encrypted
12851,11-30,43:43,digest bob will use analysis public key
12852,11-30,43:50,to decrypt the message and get the message digest so bob will compare these
12853,11-30,43:58,two and see if they are the same if they are the same then we can say
12854,11-30,44:06,okay the message is transmitted correctly nobody else has already changed the
12855,11-30,44:13,content and it is indeed sent by alice but if they are not the same then we say
12856,11-30,44:20,the message has already been modified so this is the general idea of a digital
12857,11-30,44:27,signature based on rsa algorithm okay and later we are going to spend more
12858,11-30,44:32,time discussing this so why is isa secure
12859,11-30,44:42,suppose you know bob's public key n and e we know public key is known to
12860,11-30,44:49,everybody okay then how hard is it to determine d
12861,11-30,44:55,which means if you know the public key can you calculate and get the private key
12862,11-30,45:03,so if you look at the algorithm here
12863,11-30,45:13,okay if you look at the algorithm here we know
12864,11-30,45:18,the public key e and we know the number n
12865,11-30,45:24,okay if you are able to calculate p and q by
12866,11-30,45:31,n through n then based on this
12867,11-30,45:38,you can easily calculate d
12868,11-30,45:43,which is the priority okay because you already know p and q
12869,11-30,45:49,you already know e okay you know p and q you know n you
12870,11-30,45:55,know um you know e and of course you can guess d okay you can calculate d
12871,11-30,46:02,however because n is a very big number
12872,11-30,46:08,is a huge number it's very hard
12873,11-30,46:13,to calculate the prime factors of n which are p and q is very hard to
12874,11-30,46:20,calculate p and q this make it very hard to calculate the
12875,11-30,46:27,number d which is the probability okay so that is actually why
12876,11-30,46:35,rsa is q okay
12877,11-30,46:40,because factoring a b prime number
12878,11-30,46:51,is really hard okay if we cannot find out p and q
12879,11-30,46:57,then it's hard to find out d that's the main reason okay
12880,11-30,47:04,um then in practice do we really use rsa
12881,11-30,47:10,to encrypt the content of the message the answer is no
12882,11-30,47:16,okay you think about this if alice and bob are communicating with each other they want to exchange the messages and
12883,11-30,47:23,the messages may be very long right now in this case if we want to use
12884,11-30,47:30,rsa to do the inclusion equation it's computationally intensive
12885,11-30,47:37,very intensive okay um in contrast the symmetric key methods
12886,11-30,47:46,are much more easier and faster than rsa much more
12887,11-30,47:53,faster so for example ds is at least 100 times faster than ric
12888,11-30,48:00,that's why you relay we only use the public key cryptography
12889,11-30,48:07,to establish the secure connection so that the alice and above can exchange
12890,11-30,48:14,a symmetric key which we also call it as session key
12891,11-30,48:20,okay and then this session key can later be used to really do the inclusion and
12892,11-30,48:27,equation of the message okay so that means
12893,11-30,48:33,um for um the encryption and equation about the the message or the content for the
12894,11-30,48:39,communication we can use session k which is a symmetric key method okay but how
12895,11-30,48:47,can we exchange this session key we they cannot meet we assume they
12896,11-30,48:54,cannot meet with each other physically right so then they can exchange a symmetric session key
12897,11-30,49:01,with the rsa method okay so this is how rsa is used in
12898,11-30,49:07,practice all right so that is
12899,12-02,0:04,all right so that is all i want to talk about the principles of cryptography
12900,12-02,0:11,then let's let's look at the authentication let's see how authentication can be done
12901,12-02,0:17,using the foundation of cryptography so authentication basically means bob
12902,12-02,0:26,wants edits to prove her identity to him so the protocol number one
12903,12-02,0:34,is addicts can simply say hey i'm alice
12904,12-02,0:39,but can you trust alice can you trust her do we have any finished scenarios of
12905,12-02,0:46,course because trudy can also see i man is how can you prove that right in real
12906,12-02,0:52,world we can see the faces but in the cyber world in a network
12907,12-02,0:59,bob cannot really see alice so trudy can simply declare herself to be alice okay
12908,12-02,1:07,or even a dog a cat can declare to be alice
12909,12-02,1:15,so let's try again how about ellie say hey i'm alice
12910,12-02,1:22,in ip packet and also attend her source ip address
12911,12-02,1:29,into this package then you may think oh that is better right because
12912,12-02,1:36,alice has already appended the ip address but if you recall what we have learned
12913,12-02,1:43,in chapter one it's actually very easy to do spoofy ip spoofy trudy can also
12914,12-02,1:50,attach alice's ip address and claim she's alice
12915,12-02,1:56,right so does protocol 2.0 work no it
12916,12-02,2:01,doesn't work so then how about
12917,12-02,2:08,ellie says i am alice and then also send her
12918,12-02,2:15,secret password to prove it so this password is is a secret and we assume
12919,12-02,2:22,truly does not know this password is this better
12920,12-02,2:27,hmm let's think about this actually truly
12921,12-02,2:34,can capture the message between alice
12922,12-02,2:39,and above how can trudy do that if you think about the pack is sniffing
12923,12-02,2:47,we learned about tech snipping before example you can do this using wireshark
12924,12-02,2:52,right then in this case trudy can hear the communication between alice and above
12925,12-02,2:59,then trudy can simply do a playback attack which means it's
12926,12-02,3:08,captured the traffic between alex and a bob and then same plane replay
12927,12-02,3:16,and this is a message to bob okay nothing is changed so still and his
12928,12-02,3:21,ip address still and his password still seeing i'm at least okay then probably gonna say oh okay
12929,12-02,3:28,this is alice so this kind of attack we call it playback attack or we call it replay
12930,12-02,3:33,attack so the same thing okay oh so it may you may think how about
12931,12-02,3:41,we improve this a little bit instead of using just the password we
12932,12-02,3:47,use encrypted password so the password is not in plain text is encrypted
12933,12-02,3:53,does this solve the problem i'll say no why because still truly can simply
12934,12-02,4:02,capture this package okay and then replay it
12935,12-02,4:07,the same thing nothing can nothing is need to be changed nothing needs to be changed so
12936,12-02,4:16,then bob will still think two days at least okay
12937,12-02,4:22,um then what can we do so in order to avoid this kind of
12938,12-02,4:28,playback attack now we add some mechanism called nuts
12939,12-02,4:35,nas means a number that is used only once in a lifetime so this is a random
12940,12-02,4:43,number okay so basically as we'll see i'm alex
12941,12-02,4:48,bubbly i say okay this is a nuts number are this is again this is once in a lifetime
12942,12-02,4:57,it's a random number it it can be used for only for once okay
12943,12-02,5:02,then the main reason is we want to approve alice live
12944,12-02,5:09,okay the alice must return r encrypted with the shared secret key
12945,12-02,5:17,okay and this is actually done
12946,12-02,5:23,um using the share decay so this kit is known by both a and b
12947,12-02,5:28,both l is in a ball now above no analysis line and only alice knows the
12948,12-02,5:35,key to increase the nuts so it must be alice
12949,12-02,5:40,is that correct we want to think about this again think about the scenario again
12950,12-02,5:48,okay so in this case in this case because we are using nouns so of course
12951,12-02,5:54,it's very hard for 2d to do replay attack because
12952,12-02,6:00,we know this nouns is useful once right so of course alice message usually will
12953,12-02,6:06,arrive first if um true they want to replay this okay so to
12954,12-02,6:14,develop send this same message again to bob bob will say okay i have already
12955,12-02,6:19,received this right so this nouns can be used for only once in a lifetime so then
12956,12-02,6:25,bob will not uh take uh through this message as
12957,12-02,6:32,alice's message right because it will only accept the first copy
12958,12-02,6:38,okay so but is this method 100 perfect
12959,12-02,6:44,i would say no first name alice and bob still need to exchange the k so how can
12960,12-02,6:50,they exchange the k is a problem one problem the second problem is since this
12961,12-02,6:55,k is shared by alice and bob and later bob can also claim to be alice if bob
12962,12-02,7:02,becomes malicious right so bob can also claim to be alice and pretend to be
12963,12-02,7:08,alice okay so this is a second problem and another thing is sometimes the true
12964,12-02,7:14,day can also collected samples to do some kind of crypto or statistic
12965,12-02,7:22,analysis to get the k shared by these
12966,12-02,7:28,two parties okay so those are the problems with this
12967,12-02,7:33,um protocol 4.0 so to improve this again
12968,12-02,7:39,we can use this uh public key methods
12969,12-02,7:45,to do the authentication so the way is like this
12970,12-02,7:50,personality analysis and the bob wilson announced again
12971,12-02,7:55,the alice will include these nouns with its own private key
12972,12-02,8:02,so then bob will say hey please send me your public key
12973,12-02,8:08,and then alice will send the public key so later as you can imagine what bob
12974,12-02,8:14,will do will is bob will decrypt this entire cipher text with the public key
12975,12-02,8:22,of a and generate r yeah and then because bob knows only
12976,12-02,8:29,alice could have the private key so then
12977,12-02,8:35,um the encrypted the r to actually be generated by this
12978,12-02,8:43,okay but is it is perfect
12979,12-02,8:48,no there is still a flow and actually a very obvious or very important flaw okay
12980,12-02,8:55,because in this version we can still do man in the middle attack
12981,12-02,9:01,or woman in the middle attack okay that means trudy poses as alice
12982,12-02,9:09,to bob the end as well to end so but that means this truly stands in the
12983,12-02,9:16,middle between alice and above and pretends to be alice to bob and also
12984,12-02,9:22,pretend to be bob to alice how could the truly do this so firstly you can see
12985,12-02,9:27,ellie said i'm alice and then trudy will say i'm alice
12986,12-02,9:33,to bob bob wilson announced are
12987,12-02,9:39,so what it truly will do is truly will actually encrypt
12988,12-02,9:45,are with its own privacy not alice is probably actually
12989,12-02,9:52,through this privacy and then bobby mercy send me your public key so to
12990,12-02,9:58,reverse in the public key its own public key then after that bob compute computes
12991,12-02,10:05,by doing decryption the time the cyber text with the public key of 2d and then
12992,12-02,10:16,finally generate r and bobby will think oh okay everything matches this is indeed the
12993,12-02,10:23,nouns i sent to alice so this must be alice
12994,12-02,10:28,at the same time okay truly can send the same r
12995,12-02,10:36,to annie's and is will increase
12996,12-02,10:41,this r with its own provocate and two diversity send me a public key so truly
12997,12-02,10:47,is basically pretending to be bought in this case then it will send the public key
12998,12-02,10:57,and then after that of that bob sends a personal message and
12999,12-02,11:05,to alice potentially this is a personal message m to only alice
13000,12-02,11:11,and then because bob will think blah blah think
13001,12-02,11:18,trudy is alice so bob will use
13002,12-02,11:24,through this public key to encrypt the message
13003,12-02,11:31,okay it will not use analysis because bob will think truly is alice right then
13004,12-02,11:37,trudy can easily recover m because of course truly has its own private key
13005,12-02,11:46,right then truly we are basically send this message
13006,12-02,11:53,to alice with alice's public key
13007,12-02,11:59,so then when alice receives it alice will decouple this thing with its
13008,12-02,12:06,own private key okay so then and it feels like this
13009,12-02,12:13,message is from bob but it's actually from trudy well we feel like it is
13010,12-02,12:19,sending the message through alice but it's actually sending to trudy it's just
13011,12-02,12:24,truly in the middle is doing the increasing and decoration okay
13012,12-02,12:31,um so then you can see this entire thing
13013,12-02,12:36,has a big problem then think about this why
13014,12-02,12:42,where are the mystics right what are the mistakes
13015,12-02,12:48,made here so if you think about this very
13016,12-02,12:53,carefully you will you will find out the main reason is because
13017,12-02,13:00,when bob is authenticating trudy or authenticating alice
13018,12-02,13:07,it said send me your public key right
13019,12-02,13:13,so it is asking for the public key
13020,12-02,13:19,from whoever is sending the message so of course if today is including with
13021,12-02,13:28,its own private key and it can send its own public key
13022,12-02,13:34,if we really really want to authenticate alice here what we actually we need to
13023,12-02,13:39,use is alice's public key not through this publicly right so that's the main
13024,12-02,13:46,reason why we have a flow here that means the public key
13025,12-02,13:55,should be absolutely correct if you ask the public key from only the
13026,12-02,14:01,sender that will cause the center consenting anything how can you do the verification you cannot right so you
13027,12-02,14:08,have to verify this by getting a absolute correct public key
13028,12-02,14:15,right so that's the main reason but how can we do that how can we do that we can get the
13029,12-02,14:23,absolutely correct public key from somewhere okay from say a later without
13030,12-02,14:31,we will learn about this okay but we before we talk more about that i want to
13031,12-02,14:37,talk a little bit about the message integrity and i want to introduce the
13032,12-02,14:43,detail signatures first okay of course we we already talked about digital signatures but i i want to talk a little
13033,12-02,14:51,bit more about that so basically
13034,12-02,14:59,um digital signature is like the handwritten signature okay so the center bob digitally signs a
13035,12-02,15:07,document to prove that he is the document owner or creator
13036,12-02,15:14,um and the recipient alice can prove to someone that bob
13037,12-02,15:22,and nowhere else including alice must have signed document
13038,12-02,15:28,okay so basically
13039,12-02,15:34,um what we can do is bob can sign this message m
13040,12-02,15:40,by encrypting with its own privacy provocate to create
13041,12-02,15:48,the sign message kbm okay so you can see this is a long
13042,12-02,15:56,message we encrypt this with bob's privacy to
13043,12-02,16:02,generate this entire thing okay message together with the sign message
13044,12-02,16:11,okay suppose alice receives the message m
13045,12-02,16:16,with the signature together with the signature then alice can simply verify this
13046,12-02,16:23,by applying bob's public key to
13047,12-02,16:29,the signature okay so then we can do kbm
13048,12-02,16:34,decrease by bob's public key and then we can recover
13049,12-02,16:40,app okay so if we can indeed get m then this message must be signed
13050,12-02,16:49,by bob using bob's property why we can
13051,12-02,16:54,prove that why because only bob knows its own product nobody else knows bob's
13052,12-02,17:01,property right so basically an incident can verify that
13053,12-02,17:06,bob sine m no one else sign m and bob signed the message m not
13054,12-02,17:14,anything else because we can recover m right and also this is a non-reputation this
13055,12-02,17:22,may have non-repidation feature here because if there are some disputes between alice
13056,12-02,17:29,and bob and it can simply take m and also the signature
13057,12-02,17:36,of bob to the course to prove that bob have signed them so bob has no way to
13058,12-02,17:43,deny this because again only bob knows bob's private key
13059,12-02,17:48,okay and as we mentioned before usually
13060,12-02,17:54,it is very computationally expensive to use the public key english method
13061,12-02,18:03,to encrypt the long messages that's why usually if we have a large
13062,12-02,18:09,message we will firstly run as hash function to generate a
13063,12-02,18:15,digest or amp which is hm okay we call this a digest
13064,12-02,18:22,yeah and then after we have this digest we can sign
13065,12-02,18:30,this digest instead of saying the long message okay this is a much easier way to
13066,12-02,18:39,create a detailed signature so this is the entire process you can
13067,12-02,18:44,see bob since a large message firstly we generate hm
13068,12-02,18:51,hash of the message by using hash function and then we can do the increasing by
13069,12-02,19:00,using both private key to sign this digest to generate kbhm
13070,12-02,19:07,this is the encrypted digest okay then we send this entirety into
13071,12-02,19:15,alice when alice receives it and it's mailed to two things
13072,12-02,19:21,so firstly alice will um use
13073,12-02,19:29,let's see if you receive this right and it will use bob's public key
13074,12-02,19:35,to decrypt this message and of course we know it will get the hm right
13075,12-02,19:42,decryption it will get hm and also at
13076,12-02,19:47,the same time alice will generate the hm which is the hash of the
13077,12-02,19:55,message using the same hash function so as we'll compare these two and see if
13078,12-02,20:02,that's same if they are the same then alice can verify
13079,12-02,20:08,this message m is signed by a bob
13080,12-02,20:13,and the m is not changed but if they are different then that means that either the message
13081,12-02,20:21,has been changed okay that's the that's the entire process
13082,12-02,20:29,for the hash function there are a number of hash functions to choose from
13083,12-02,20:36,so for example md5 is widely used md5 basically
13084,12-02,20:41,compute uh 128-bit message digest in a four-step process
13085,12-02,20:49,and pay attention the hash function we know it is one way
13086,12-02,20:55,right one way means giving the input we can generate the digest
13087,12-02,21:01,but giving the digest it's very very very difficult to
13088,12-02,21:06,get the input okay so that means if we are giving up
13089,12-02,21:12,to 128 bit string x which is the hash okay it is really difficult to construct
13090,12-02,21:20,the message m whose hash is equal to x
13091,12-02,21:26,okay so that's why we call it one way um and charlotte is also used okay so it
13092,12-02,21:34,can create a 160 bit message digest
13093,12-02,21:40,so now let's go back to the problem we mentioned before again in the protocol 5.0
13094,12-02,21:48,to remember this problem the my in the middle attack or um
13095,12-02,21:54,okay so basically 2d is trying
13096,12-02,22:00,to pretend to be alice to bob and also pretending to be bob to x right and we
13097,12-02,22:09,said the main reason is because we are getting the public key directly
13098,12-02,22:14,from trudy right of course 2 db of sunday's own public key
13099,12-02,22:21,so how can we address this problem we say the public key should be
13100,12-02,22:27,absolutely correct which means this public key should not be provided by today
13101,12-02,22:35,it should be provided by ants or this public key must be at its public
13102,12-02,22:40,publicly not through disability right then
13103,12-02,22:45,that's why we actually need some authorities to manage
13104,12-02,22:54,the public key okay or to certify the public keys
13105,12-02,23:00,to ensure the public keys are indeed correct ones
13106,12-02,23:05,okay so then we have something called certification authority which is also
13107,12-02,23:12,called c what is the email do is ca we are basically bind the public key
13108,12-02,23:21,to a particular entity e okay so that means
13109,12-02,23:27,this entity no matter is a personal website a router or whatever this entity
13110,12-02,23:34,needs to register its public key with the certification authority
13111,12-02,23:41,and also provide the proof of identity if this is personal you may need to take
13112,12-02,23:47,a driver license for example okay then the ca creates the certificate
13113,12-02,23:54,binding the identity e to ease public key okay
13114,12-02,23:59,so basically for example if we have bob will take its own
13115,12-02,24:06,driver license let's see as the identification or the proof of identity
13116,12-02,24:11,two ca to register is on public key okay
13117,12-02,24:18,so what ca mail do is see a real sign
13118,12-02,24:25,this public key with its own privacy
13119,12-02,24:30,what does this mean this means ce will say okay
13120,12-02,24:38,let me prove this public key is indeed from bob because i have verified this okay so c e
13121,12-02,24:47,will sign it with its own private key okay and then generating a certificate
13122,12-02,24:56,for bob's public key and then so in the
13123,12-02,25:02,future bob can provide this certificate to anybody who is communicating with him
13124,12-02,25:09,okay so say hey you can see this is my public key and this is already signed by
13125,12-02,25:15,the ca so is is of course correct okay so it's like here trudy when
13126,12-02,25:24,through the product is public key trudy cannot provide
13127,12-02,25:31,a public with certificate because he does she she does not have analysis
13128,12-02,25:37,certificate right so it's like that
13129,12-02,25:42,um then when n is one spot public key
13130,12-02,25:49,alice will basically get this thing this certificate first we know this
13131,12-02,25:55,certificate is already it contains both public key and also it is signed by the
13132,12-02,26:02,c is probably k so then later
13133,12-02,26:07,alice can decrypt this with cs public key to guess
13134,12-02,26:13,bob's routine bob's public key okay so this is the entire process then of
13135,12-02,26:19,course we can see this public key is absolutely correct okay it's not fake
13136,12-02,26:25,because this is already signed by the c okay all right so that is about the
13137,12-02,26:32,authentication and message integrity so the next thing i would like to talk
13138,12-02,26:39,about is securing email so
13139,12-02,26:45,for email communication it's still the same thing we still need to consider
13140,12-02,26:50,conventionality integrity and availability okay
13141,12-02,26:56,so now let's firstly talk about the confidentiality let's see alice wants to
13142,12-02,27:01,send a combination email to bot so if we are using
13143,12-02,27:08,the um public key cryptography then we know it is very
13144,12-02,27:16,expensive we have mentioned this again again right it's very very expensive
13145,12-02,27:22,then what we usually do is okay let's use a random symmetric key let's use
13146,12-02,27:30,symmetrical encryption method for the content equation okay that's why and it
13147,12-02,27:37,will firstly generate a random symmetric private key ks okay
13148,12-02,27:43,but how can we exchange this chaos how can we exchange this with bob
13149,12-02,27:49,we can use the public key cryptography right
13150,12-02,27:54,so you can say alice will then encrypt them email message with ks
13151,12-02,28:03,meet the symmetric key for efficiency and also encrypt
13152,12-02,28:08,this k itself with bob's public key
13153,12-02,28:14,so this is used to exchange the k right the symmetric key and then n is we'll
13154,12-02,28:20,send both the encrypted message
13155,12-02,28:26,and also the increment k
13156,12-02,28:31,to bob okay so this one is for the message
13157,12-02,28:38,and this one is for exchanging the symmetric key
13158,12-02,28:43,so this is similar to what we have discussed before okay and when bob received this message
13159,12-02,28:51,bob will use his private key first to decrypt and recover the ks the symmetric
13160,12-02,28:58,key is like the session key right and then it will use this
13161,12-02,29:04,symmetric key to decrypt the message okay to decrypt this ksm to recover that
13162,12-02,29:10,so this is for confidentiality now the next thing we want to see is
13163,12-02,29:16,about the message integrity and authentication
13164,12-02,29:21,so we want to ensure this message is sent by alice not anybody else and we
13165,12-02,29:28,also want to ensure the message is uh not changed by anybody else right
13166,12-02,29:34,so what alice will do is still because this message is uh
13167,12-02,29:42,probably a long message right so usually we do not directly increase this with
13168,12-02,29:48,the public key cryptography so what we can do first is
13169,12-02,29:54,we can generate a hash or the message
13170,12-02,30:00,okay and then we sign this hash with alice's private key
13171,12-02,30:09,okay so then in this case later
13172,12-02,30:14,alice will send both of the message in clear text
13173,12-02,30:20,okay and also the digital signature tube up here pay attention here we are
13174,12-02,30:27,only talking about integrity and authentication we do not really care about confidentiality
13175,12-02,30:34,okay and then and sends the message to bob
13176,12-02,30:43,okay so when bob receives this remember bob will do two things
13177,12-02,30:50,first thing with a message m it's real
13178,12-02,30:56,calculate the hash and generate hm and then
13179,12-02,31:01,with this signed hash
13180,12-02,31:07,okay it will decrease with a's public key and john m also hm also so bob will
13181,12-02,31:15,compare these two and save that same if they are the same
13182,12-02,31:20,then we say no problem okay if they are not the same the n is will say oh bob we
13183,12-02,31:26,must say okay this message uh has already been chained by somebody else it had that oh it has arrows at
13184,12-02,31:33,least right so that's how we ensure the message integrity and authentication
13185,12-02,31:40,so but what if we want to ensure all of that
13186,12-02,31:46,we want to ensure confidentiality mass integrity and also authentication right
13187,12-02,31:53,so in the first two cases in the first case we consider only conventionality in
13188,12-02,31:59,the second case we only consider message integrity and authentication in the third case we want to consider all of
13189,12-02,32:05,them okay then how can we do this okay so it's uh actually it's the answer
13190,12-02,32:13,is verse three four we simply combine them okay that means when they send
13191,12-02,32:22,this uh uh message you can see okay we send three parts first thing we have each m
13192,12-02,32:30,okay uh the hash and we include with is private key
13193,12-02,32:36,okay we will of course send this to bob
13194,12-02,32:42,um okay and then also we will use this
13195,12-02,32:48,message okay uh and then we will encrypt
13196,12-02,32:56,this message with the symmetric key okay and we also need to exchange
13197,12-02,33:05,the symmetric key so that's why we use bobs
13198,12-02,33:11,public key to encrypt the case so we send all this through to bob okay and
13199,12-02,33:18,then bob will do the decryption um to get this symmetric key and then do
13200,12-02,33:25,the diffusion together message m then calculate the hash om
13201,12-02,33:30,to compare everything okay and also uh um our course decrypt this entire thing
13202,12-02,33:38,with um alice's public key and then finally
13203,12-02,33:43,compare that nhm with the hash wage web
13204,12-05,0:03,okay so far we have discussed the fundamentals of security especially the principles for
13205,12-05,0:11,cryptography and how cryptography can be used for authentication for integrity
13206,12-05,0:18,for computationality etc we have source examples in the email okay so we so for
13207,12-05,0:26,example we know for computationality we need to firstly exchange the k right we
13208,12-05,0:33,need to encrypt the k uh exchange encrypt the message with with the k and then we also need to
13209,12-05,0:40,exchange the k with public k cryptography and for authentication and
13210,12-05,0:48,message integrity we also need to um uh calculate the hash of the message and
13211,12-05,0:55,then encrypt this hash with the sender's
13212,12-05,1:01,private key right so those are all those are the applications and we know how we
13213,12-05,1:07,can use the cryptography in a proper way to
13214,12-05,1:15,achieve the goal of confidentiality integrity and authentication so then for
13215,12-05,1:22,the remaining sections in this chapter we will continue introducing how the
13216,12-05,1:29,fundamentals can be applied to different layers of
13217,12-05,1:36,networking okay and how the security is deployed in networking so the first
13218,12-05,1:41,example let's say is the tls so trs is called transport layer
13219,12-05,1:48,security although it is called transport layer security but is actually a
13220,12-05,1:54,security protocol that is widely deployed above the transport layer it is
13221,12-05,2:00,actually deployed in application layer and later we are going to see this okay
13222,12-05,2:05,um tis probably you are not very familiar with this but if you check your
13223,12-05,2:11,web browser especially if you are visiting some let's see banks okay then
13224,12-05,2:18,for example type in chase.com okay and then you will see
13225,12-05,2:24,um beside the url you will see a small icon of lock so that lock icon actually
13226,12-05,2:31,indicates this is using the tls okay so trs is widely supported by almost all
13227,12-05,2:39,browsers um and then the communication with the web
13228,12-05,2:45,server is actually using the protocol of https okay the port number and the web
13229,12-05,2:52,server side is support 443 it's not a port 80 anymore port 80
13230,12-05,2:59,is just for regular http but if you are using https then the port number is
13231,12-05,3:05,going to be port 443 okay um so trs is able to provide
13232,12-05,3:12,confidentiality integrity and authentication how is this done
13233,12-05,3:19,competition entity is done through symmetric encryption integrity is
13234,12-05,3:25,achieved through cryptographic hashing and authentication is down
13235,12-05,3:31,through public key cryptography okay so actually the early version of tis is
13236,12-05,3:39,called secure circuit layer and we we have discussed this before right and trs is
13237,12-05,3:46,the newest version okay so generally ts provides an api that any
13238,12-05,3:55,application can use so you can look at this figure this shows the http view of trs
13239,12-05,4:03,so for example let's see originally we are very familiar with this
13240,12-05,4:09,the application layer we use http transportally reviews tcp and networking applicants ip right so we are already
13241,12-05,4:17,very familiar with this protocol stack if we want to deploy tls as we mentioned
13242,12-05,4:25,many times before you cannot deploy trs in transport layer
13243,12-05,4:31,so we have to we have to deploy this at application layer okay there is a
13244,12-05,4:37,description the application layer and transport layer so you can see that's why chaos is here and this is using tcp
13245,12-05,4:46,if we are using udp then you leave it deploy quic which also incorporates tls
13246,12-05,4:54,okay between the application layer and transport layer
13247,12-05,4:59,so generally for tls it provides a sign
13248,12-05,5:04,for switch which means it provides a number of algorithms that can be used
13249,12-05,5:11,for different purposes such as k generation encryption mac and digital
13250,12-05,5:17,signature here mac is the math message authentication code is not the mac
13251,12-05,5:23,address okay pay attention to that and uh tips as 1.3 it's actually
13252,12-05,5:32,um replacing the trs 1.2 okay and these are the features of tls it has a it is a
13253,12-05,5:40,more strict i would say than the tlc 1.2 for example it requires the dh for
13254,12-05,5:48,exchange okay rather than using either dh or rsa
13255,12-05,5:55,so so in this case th is required okay this is not optional so things like that
13256,12-05,6:01,so you can see these are the some of the features um if you look at the tls 1.3 so it's a
13257,12-05,6:10,very straightforward generally the client will say hello first basically in
13258,12-05,6:16,the hello message the client will tell the server which cipher switch
13259,12-05,6:24,are supported by the client and it will also indicate the k
13260,12-05,6:32,government protocol the parameters etc okay
13261,12-05,6:38,it guesses those uh information and then the server will reply with another hello
13262,12-05,6:45,message the server will provide the selected design for suite say hey the
13263,12-05,6:51,client says i have this this um algorithm are available but this
13264,12-05,6:57,protocol supported okay and then trs the server will just reply say hey okay i
13265,12-05,7:04,want to choose this cipro suite to for the further communication is like that
13266,12-05,7:09,and most importantly most importantly the server will also provide a server
13267,12-05,7:17,signed certificate we have learned that the certificate will contain the public key of the
13268,12-05,7:26,server okay to prove okay this is indeed from this server this is for authentication
13269,12-05,7:33,purpose right we learned this before okay and in addition to that the server will also provide the
13270,12-05,7:40,parameters the key agreements protocol those kind of things so eventually the client will check the
13271,12-05,7:48,certificate of the server to prove this is indeed from the correct server okay
13272,12-05,7:55,the server is not fake and it will generate the k and then finally it can
13273,12-05,8:00,now make application requests like https get message for example so this is the
13274,12-05,8:05,handshake process okay so that is one example pls
13275,12-05,8:12,we know it is between application layer and the transport layer
13276,12-05,8:18,so the next example is ipsec ipsec is actually a protocol in the network layer
13277,12-05,8:25,let's take a look at this so you may think what is ipsec used for
13278,12-05,8:32,so ipsec is used for vpn you may have already heard about apn before you may
13279,12-05,8:38,have already used the vpn before right i i guess many of you have used vpn
13280,12-05,8:44,especially during pandemic so vpn means virtual program network it provides
13281,12-05,8:51,provides like a tunnel between your computer and let's say if you are
13282,12-05,8:59,connecting to the camps network it provides a tunnel between your computer and the
13283,12-05,9:05,um uh campus network so it's like you are connected to the campus network directly
13284,12-05,9:12,in a very securing so that's why we call it why uh virtual private network so
13285,12-05,9:18,then the protocol uh behind is actually ipsec okay so ip72
13286,12-05,9:26,certified four requirements the first one is confidentiality
13287,12-05,9:32,which means we want to hide the contents of the package the second requirement is
13288,12-05,9:39,the content authentication we have learned this before right content authentication means integrity is the
13289,12-05,9:46,package change replaced or fact we want to make sure it is not change replaced
13290,12-05,9:51,or fake the third requirement of a vpn is arranging authentication which means we
13291,12-05,10:00,also call it source authentication right so which means is the sender
13292,12-05,10:06,is the real sender lying about its identity is this really from the sender
13293,12-05,10:13,right so this is also important the last requirement is nt replay we know replay
13294,12-05,10:20,attack can be very easy right so the bad guy can replay a package sent by the
13295,12-05,10:27,others we want to make sure this will not happen to the communication between the center and the receiver okay so
13296,12-05,10:35,those are the four requirements we want to satisfy for vpn and then this is the
13297,12-05,10:41,guideline for ip circle okay so then how can we achieve
13298,12-05,10:48,confidentiality no surprise encryption we have already talked about encryption right so uh we
13299,12-05,10:56,have discussed multiple um encryption algorithms so in vpn
13300,12-05,11:02,triple des is used um and of course we all know that to do
13301,12-05,11:08,encryption we need a key right but this k must be exchanged firstly between the
13302,12-05,11:17,center and the receiver that's why we need some protocol called internet k
13303,12-05,11:22,exchange protocol
13304,12-05,11:32,okay so which is also called as ike therefore integrity the content
13305,12-05,11:40,integrity is given through the hash function we have learned about the different hash
13306,12-05,11:48,functions right and the half function can also be k hash function which is
13307,12-05,11:54,hmac so for example usually what we do is we directly do hash our data right
13308,12-05,12:03,but in k the hash function um we can we can do something like this
13309,12-05,12:10,so firstly k x or with data and then we
13310,12-05,12:15,do hash then we do k x o with this entire thing and we do hash again so you
13311,12-05,12:22,can see it is more complicated this is to prevent some potential
13312,12-05,12:28,um leverage to the vulnerabilities or hash functions okay so you don't need to
13313,12-05,12:33,know the details you don't need to remember this function you just need to know okay there is one type of function
13314,12-05,12:41,hash function called hash function which can make it even
13315,12-05,12:46,more secure and more complicated okay so then we also need to know for the source
13316,12-05,12:56,integrity or the arranging integrity so this is provided through the public key
13317,12-05,13:02,and private key through the digital certificate okay we have learned about certificate we know
13318,12-05,13:09,um certificates usually contains the public key right and public key of one
13319,12-05,13:16,side the sender or the receiver and then this certificate is usually
13320,12-05,13:22,um provided by some say right so of course
13321,12-05,13:28,then the certificate can be or can be verified later
13322,12-05,13:33,okay so it can also be provided by covers covers is another protocol which
13323,12-05,13:40,provides the single sign-in so which means when you sign on one website on a
13324,12-05,13:46,one one uh um once website then you don't need to
13325,12-05,13:52,sign on the other related websites okay so um it's like that so for example for sex
13326,12-05,14:00,state if we are using covers then you sign on for once only for canvas let's
13327,12-05,14:06,say okay then you don't need to sign on for my dot uh csu.edu anymore because
13328,12-05,14:13,you you've already been authenticated okay so that is uh cobras
13329,12-05,14:20,and then the last thing is about anti-replay and to replay we know if we
13330,12-05,14:26,want to prevent this we must use something that is uh one time okay so
13331,12-05,14:32,then that's why we can use one-time password or sequence number or timestamp
13332,12-05,14:38,all of those things uh may work okay so then
13333,12-05,14:44,for ipsec ipsec is the protocol for vpn
13334,12-05,14:49,it's the full name is called internet protocol security it
13335,12-05,14:55,um eventually this is essentially this is actually a framework of open standards
13336,12-05,15:01,so it has three major components authentication header which requires ah
13337,12-05,15:09,encapsulating security payloads which is called esp and internet k exchange we
13338,12-05,15:15,mentioned this before right ik so ah gives you the integrity plus
13339,12-05,15:21,authentication and then the esp gives you the
13340,12-05,15:27,conditionality integrity and authentication ikey basically takes care
13341,12-05,15:33,of the key exchange okay of course without case change we we cannot provide
13342,12-05,15:38,the other functions so for these three components i will not
13343,12-05,15:45,go to talk about the details i have to briefly give you an idea about those
13344,12-05,15:51,okay so for ah for example here you can see we have run through one and router x
13345,12-05,15:59,and voucher y then ah will basically do this at the router x side we we take the
13346,12-05,16:07,ip header and take the data and then we add something called some
13347,12-05,16:13,some k okay after that we calculate the hash of this entire thing okay and then
13348,12-05,16:22,this becomes when you header a h so this data will this will be put into the age
13349,12-05,16:27,field then at when the router receives the package the router will do the same
13350,12-05,16:33,thing we it will also use ip header data indicate to uh calculate the hash of
13351,12-05,16:40,this and then it will compare the received hash with the recomputed hash
13352,12-05,16:48,if if this matches that means the data and
13353,12-05,16:54,ip header are not changed okay it can also provide authentication because we
13354,12-05,17:02,know this k this k is special okay this k is shared between the router x and y
13355,12-05,17:08,so we know this is from the wrong tracks okay
13356,12-05,17:14,so this is ah um esp is sp can be used in two modes
13357,12-05,17:20,one mode is called transport mode it provides inclusion traffic between
13358,12-05,17:25,two devices two peer devices another model is called tunnel mode which
13359,12-05,17:32,provides encrypted traffic between two subnets okay so i won't talk about the
13360,12-05,17:39,details for the equation authentication etc but the major difference between
13361,12-05,17:47,tunnel mode and the transport node mode is
13362,12-05,17:53,for tunnel mode we know because this is between two subnets so usually the
13363,12-05,17:59,tunnel mode has to generate a new ip header instead of using the ip header
13364,12-05,18:05,directly it will generate the new ip header okay so this also protects the ip
13365,12-05,18:10,address um the ip information
13366,12-05,18:16,so then for transport node mode it will directly use the ip header okay so that
13367,12-05,18:22,is the major difference for ike ikey is the k exchange part okay
13368,12-05,18:31,and uh pay attention usually between the two parties that for example
13369,12-05,18:39,here router x and router y we need uh before we send the data we
13370,12-05,18:46,need to firstly establish something called security association from the sending entity to the receiving
13371,12-05,18:54,entity okay so basically um
13372,12-05,18:59,this security association is like a session okay so it contains
13373,12-05,19:07,some information very important information like
13374,12-05,19:13,um for example firstly at identifier like spi security parameter index and
13375,12-05,19:20,also the source address as a interface definition as interface
13376,12-05,19:27,and the type of inclusion used in position k the type of integrity check
13377,12-05,19:32,used and authentication key etc you can see a lot of information are actually
13378,12-05,19:38,contained in this security association okay so we know although ip is
13379,12-05,19:46,connection is but ipsec is connection oriented it's like before we do sending
13380,12-05,19:52,data we firstly need to establish such a connection to
13381,12-05,19:58,provide some information okay and this is an example you can see you
13382,12-05,20:04,can see the spi source ip destination ip the protocol use the encryption
13383,12-05,20:09,algorithm we use the etc etc okay so again i will skip the details and
13384,12-05,20:16,this is about the ikea so the last thing is about the firewalls
13385,12-05,20:24,and ids um these are very very common especially
13386,12-05,20:30,in price networks firewall basically isolates the organization's internal
13387,12-05,20:39,network from the larger internet
13388,12-05,20:44,allowing some package to pass and blocking others okay so basically this firework can
13389,12-05,20:52,protect the internal network from the internet okay we protect the trusted goods guys
13390,12-05,21:00,from the untrusted bad guys all right so
13391,12-05,21:06,why do we need firewall firewall can actually be deployed to
13392,12-05,21:12,prevent a diff a lot of different types of attacks for example it can prevent
13393,12-05,21:18,the denial service attack we know the night or service attack means a lot of
13394,12-05,21:24,traffic come to a server right the server cannot serve the legitimate users anymore so
13395,12-05,21:32,then based on that we know okay we can how about we block some traffic if we
13396,12-05,21:39,block some traffic then we are able to prevent the now service attack right for
13397,12-05,21:47,example if we know okay a lot of bogus tcpr connections are from this certain
13398,12-05,21:52,ip address or from certain ip address range then we can block all the traffic
13399,12-05,21:57,coming from that ip address or from that ip address range okay so
13400,12-05,22:04,that's why we can use a firewall and so one example is the same flooding safe
13401,12-05,22:12,bloody means the attacker try to establish many bogus tcp connections so
13402,12-05,22:19,no resources are left for the real connections we know whenever we want to establish a tcp connection we need to
13403,12-05,22:26,firstly send a c request right c equal to one if you still remember learning
13404,12-05,22:31,basically means there are a lot of scene requests there are a lot of requests
13405,12-05,22:37,trying to establish tcp connection that's why we have denial service attack then if we have firewall we can block
13406,12-05,22:43,that okay um the second uh type is the file one can also prevent
13407,12-05,22:52,illegal modification or access to internal data sometimes we or many times
13408,12-05,22:58,we actually we don't want the public to have access to the internal data okay we
13409,12-05,23:05,want to protect the internal data and the third type is is allow only to authorize access to
13410,12-05,23:14,inside network we know the inside networks may contain a lot of important
13411,12-05,23:19,servers and workstations right so we want to protect the inside network from
13412,12-05,23:26,the outside world that's why firewall is also very useful there are generally two three types of
13413,12-05,23:34,firewalls stateless pecky filters state four packy filters and application
13414,12-05,23:42,get image let's discuss each of them so firstly for stateless package
13415,12-05,23:47,filtering this is a very straightforward um basically the internal network is
13416,12-05,23:54,connected to the internet why router firewall okay so the firewall can
13417,12-05,24:00,be deployed on the router then this firewall may ask questions like
13418,12-05,24:07,should the arriving packet be launching pack should the departing packet be let
13419,12-05,24:13,out so things like that okay so then what we do is it's very easy we just check each
13420,12-05,24:20,packet packet by packet and then make a decision
13421,12-05,24:25,okay make a decision for each packet based on this information for example
13422,12-05,24:31,what is the source ip address what is destination ip address what is the tcp or udp um
13423,12-05,24:38,uh source or destination point numbers so what is the message icmp message type
13424,12-05,24:45,or what is the tcp simbit or tcp ac key bits okay so based on those information
13425,12-05,24:52,for each package we make a decision should we allow it to pass by or not
13426,12-05,24:59,okay so that is the status room so here you can see one example
13427,12-05,25:05,in this example we check the datagrams in coming and outgoing instagrams with
13428,12-05,25:12,ip protocol field 17 this means 17 basically means this is udp
13429,12-05,25:18,okay if it is equal to 6 then this is tcp and we check this protocol field and we
13430,12-05,25:26,also check the source or destination port number okay if it equals to 23 that means this
13431,12-05,25:35,is talent connection okay so then we want to block
13432,12-05,25:42,all those datagrams with ip protocol field equal
13433,12-05,25:47,to 17 and with source of this number uh
13434,12-05,25:52,that's that's an important number equal to 23. that means
13435,12-05,25:57,we want to block all the incoming and outgoing udp flows and tcp connections
13436,12-05,26:05,okay so this is one example a second example is block the inbound tcp segment
13437,12-05,26:13,with a c k equal to zero what does this mean if you recall what we have learned in
13438,12-05,26:21,this tcp3 handshake we know there are three steps for three hatching right
13439,12-05,26:27,so step one step one sing equals to zero sorry equal to 1 a c
13440,12-05,26:36,k equal to zero this is step one you read the sender initiate this right then
13441,12-05,26:43,the step two is the receiver the receiver will reply back so that for example if step one is sent by the
13442,12-05,26:50,client then step two is sent by the server the server will say okay c equals to 1 a c key equal to one basis
13443,12-05,26:59,basically this is confirming right say yes we can talk and then the client
13444,12-05,27:05,will confirm again okay so then same equal to
13445,12-05,27:11,zero and a c k equal to one okay so this is the 3b handshake
13446,12-05,27:19,if you look at example two block inbound tcp segments with a c k equal to zero so
13447,12-05,27:25,among these you can see the first step has ac k equal to zero which means what
13448,12-05,27:31,which means this this rule will prevent
13449,12-05,27:37,the external clients from making tcp connection with the internal clients
13450,12-05,27:44,okay the external machines cannot initiate tsp connection
13451,12-05,27:50,with the internal machine but you may worry how about
13452,12-05,27:58,the internal machine you want to make a connection to the outside if the internal machine starts this
13453,12-05,28:05,first okay then the packet comes in will will become this s2 right
13454,12-05,28:13,so basically ac k equal to one if x equal to 1 will allow it right it may
13455,12-05,28:19,allow it so that's why uh this example 2 is one simple thing
13456,12-05,28:27,okay one simple rule is actually preventing the external clients from
13457,12-05,28:32,making this connection between with internal clients but allows the internal
13458,12-05,28:37,clients to connect to the upside okay so i hope this clear
13459,12-05,28:44,and there are some more examples here for example if the policy is no outside web access
13460,12-05,28:54,then the file set the firewall setting will become drop all the outgoing
13461,12-05,29:00,packets to any ip address with point number eight
13462,12-05,29:05,for any package that is going out
13463,12-05,29:10,and with our destination 0.80 we will drop that
13464,12-05,29:16,okay so that is the firewall setting so there are more examples i i will not
13465,12-05,29:23,um talk about the details and you can look through them okay
13466,12-05,29:29,so you may ask how can this be done how can this be implemented
13467,12-05,29:34,uh this is a very straightforward the firewall policies are actually
13468,12-05,29:41,implemented with access control lists okay it's like a table it's a table of
13469,12-05,29:47,rules applied top to bottom to incoming packets okay
13470,12-05,29:53,so for example you can say this is the action and this is the
13471,12-05,29:59,condition okay so so for example for this the first line it says okay
13472,12-05,30:06,for all the packets with the source address following uh falling into this
13473,12-05,30:13,range and the destination address is outside of this range and the tcp
13474,12-05,30:20,the protocol tcp and salt product is this that's important destination port is 80.
13475,12-05,30:26,the flag beat is any for if if this packet
13476,12-05,30:31,okay if this package certifies this condition then we allow this packet to
13477,12-05,30:39,pass by so it's like that okay
13478,12-05,30:44,and for this one it's similar similar so this is like
13479,12-05,30:51,this is like if a packet is coming from outside this network to this
13480,12-05,30:59,internal motion to the internal motion and if it comes from a web web browser sorry
13481,12-05,31:07,web server okay and if this ac key bit equal to one then
13482,12-05,31:13,we allow it so it's like that so you can see it is implemented with a number of
13483,12-05,31:20,rules okay that is the stateless
13484,12-05,31:26,package filtering but the status package version may have
13485,12-05,31:32,a problem the problem is sometimes it may admit
13486,12-05,31:37,the package that make no sense for example for this rule
13487,12-05,31:43,for this rule you can see um the destination port is 80. a source
13488,12-05,31:50,port is 80. sorry um and destination port is this and ac
13489,12-05,31:56,keep it equal to one so this this is like uh the
13490,12-05,32:01,web server is replying to an internal machine
13491,12-05,32:07,right the web browser web server is replying to an internal machine
13492,12-05,32:14,this packet may not make any sense if
13493,12-05,32:21,no tcp connection is established first right because we know the data exchange
13494,12-05,32:27,had to happen after the tcp connection established okay but if no tcp
13495,12-05,32:34,connection is established and we still allow such packets come in
13496,12-05,32:39,it doesn't make any sense right so that's why
13497,12-05,32:45,you're only we need to do some stateful packy filtering okay which it which uh can
13498,12-05,32:54,help track the status of every tcp connection and make sure we no longer
13499,12-05,33:02,admit package that make no sense okay
13500,12-05,33:07,so for example in this this is the example we just saw
13501,12-05,33:12,right so in this example we will love the package
13502,12-05,33:19,okay if there is already a tcp connection so that means we need to
13503,12-05,33:26,check the connection for this type of packets okay even if they
13504,12-05,33:32,have already fulfilled the other conditions but but we still need to check if there is a active connection
13505,12-05,33:39,first okay so that is the state for packet theater
13506,12-05,33:45,the third type of firewall is the application gateways uh the idea is very
13507,12-05,33:52,simple so basically for application gateways it will filter the package
13508,12-05,33:59,on application data as well as on ip tcp
13509,12-05,34:04,udp files etc okay it does not only look at the like the source ip destination
13510,12-05,34:10,iep phone numbers etc it will also check the application data that is very
13511,12-05,34:16,important for example it may allow the select
13512,12-05,34:21,internal users to download outside so only those
13513,12-05,34:28,authorized users only these many users can tell net
13514,12-05,34:33,outside and the other ones they cannot tell on the outside so this is like application layer okay so
13515,12-05,34:41,um then in this way basically for the
13516,12-05,34:47,for the authorized users the gateway set up the tanner connection to the
13517,12-05,34:52,destination host okay and the gateway is like proxy it will release the data
13518,12-05,34:58,between the two connections okay uh then for the other talented
13519,12-05,35:03,connections it will the roms will basically block all the other tenant connections
13520,12-05,35:10,not originated from the gateway okay so that is application layer application
13521,12-05,35:17,ignorance and we know that is a firewall
13522,12-05,35:24,okay firewall can do packet filtering but usually it operates on tcpl ip
13523,12-05,35:32,headers only and it doesn't really correlate
13524,12-05,35:37,um the different sessions okay so that's why uh it's usually for preventing
13525,12-05,35:44,something from happening but more importantly sometimes we need to detect
13526,12-05,35:50,intrusion we need to detect the attacks okay so that's why we need something
13527,12-05,35:56,called ids intrusion detection systems there are usually two types of ideas
13528,12-05,36:08,so first type is called signature based foreign
13529,12-05,36:18,so the second type is called a normal detection signature based the base the mean basically means there are some
13530,12-05,36:25,specific signatures within the package okay that can directly tell
13531,12-05,36:32,ideas hey this packet is malicious okay so there are some signatures we can
13532,12-05,36:39,directly check uh anomaly detection is different a
13533,12-05,36:44,normal detection has no signature so basically what we do is we will check
13534,12-05,36:50,the normal packets okay the usually this for example you leave this package are
13535,12-05,36:57,normal and then we know the the outliers will be the will be abnormal right so
13536,12-05,37:06,then we know if we see some outliers then we result alerts okay
13537,12-05,37:13,so those are the two types the the um
13538,12-05,37:18,drawback of anomalytes is it has too many false positives so sometimes it's
13539,12-05,37:26,not a attack but we view it as an attack okay we view uh the packet as malicious
13540,12-05,37:35,and then signature based also has some problems initial piece based will easily
13541,12-05,37:40,miss some of the malicious packets because sometimes we do not have any
13542,12-05,37:46,signatures for malicious package right so those are the two types of ideas
13543,12-05,37:54,um basically as you can see ids can do deep packet inspection that means we do
13544,12-05,38:02,not only look at the headers we also look at the content of the package okay
13545,12-05,38:07,so for example you can check the character strains in the packets against the database of a normal virus or text
13546,12-05,38:14,range that is a signature based okay
13547,12-05,38:19,um and also the ids is able to correlate
13548,12-05,38:25,different packets okay multiple packets so it is able to look at a number of
13549,12-05,38:33,packets say oh okay so they are related they may be used
13550,12-05,38:39,as a series and they may be used um for attack okay because you can see a
13551,12-05,38:47,series of packets or are connected in summary okay so it's like that
13552,12-05,38:53,um we will we will not uh go into details about the ideas but as you can
13553,12-05,39:00,see here the ids is one type of security sensors that can be deployed in
13554,12-05,39:08,um at different locations in the enterprise network in enterprise now firstly you can see
13555,12-05,39:14,this is the internet right and then we have firewall firewall which is able to
13556,12-05,39:20,uh block the traffic okay to filter the traffic between the internet and the internal network
13557,12-05,39:28,so this part is called demilitarized
13558,12-05,39:33,zone or we call it as dmz okay in the dmz we really have web
13559,12-05,39:40,server ds server file server etc we have
13560,12-05,39:45,those servers there because usually these servers are open to the public okay they have to serve the clients
13561,12-05,39:53,and um what will happen is actually after dmz we have another firewall here
13562,12-05,40:01,okay and this will separate the dmz and the inside network
13563,12-05,40:11,so in the inside network we may have more important computers or workstations there and then
13564,12-05,40:19,the ideas i did the ids sensors can be deployed at different locations like in
13565,12-05,40:25,dmz or the internal network okay or even the inside network or email some uh
13566,12-05,40:32,servers sometimes okay or some workstations okay so this is based on
13567,12-05,40:37,different purposes then we can make the decision whether to deploy the ideas
13568,12-05,40:44,okay so that's all what i want to cover about the security part
13569,12-05,40:49,i hope you can understand the three most important components of security cia
13570,12-05,40:56,computationality integrity and availability okay i hope you also
13571,12-05,41:02,understand the basics of cryptography the symmetric and public key
13572,12-05,41:07,cryptography and how this can be used for uh computationality for integrity
13573,12-05,41:14,and for authentication okay then uh we all we also learned the security can be
13574,12-05,41:21,used in different scenarios like a secure email tls and ipse and we also learned some of
13575,12-05,41:29,the security matters like the firewalls and ibs okay so i don't expect you to
13576,12-05,41:36,know a lot of details about those because you will eventually learn these
13577,12-05,41:41,things in csc 154 the network security course
13578,12-05,41:47,um for our course 138 you only need to know the basic concepts
