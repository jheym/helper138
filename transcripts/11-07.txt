0:09
so the next thing we are going to discuss is the routing algorithm so firstly let's review let's and this
0:17
part is very important okay routine algorithm is very important and it will definitely appear on the test
0:25
um let's review the routing and the forwarding again okay we learned that
0:31
each router will have a local forwarding table and if you record the router's structure
0:39
okay we learned the router has um the routine processor the switching
0:46
fabric the input ports and outputs so the routine processor is for running
0:53
the routing algorithm and then it will generate a local forwarding table so those this little
1:01
conference table will be executed by the switching fabric okay
1:08
so pay attention this local phone table is actually generated by running their organism I will show you how to do that
1:15
okay and we also learned um we also learned for example we only
1:21
need to check the destination address as the header and then we can decide uh
1:26
which output link to forward okay so it's it's like that if you look at the router sorry if you
1:34
look at the network the network actually can be viewed as a graph okay in this graph each node
1:45
okay or each router is a node and then the link between them is an edge okay so
1:51
this this will become uh the graph can be represented mathematically it can be
1:57
represented as G equal to a set of N and a set of e so N is a set of routers so
2:05
these are all the launchers and e is a set of links so for example the link between you and the way is this one
2:13
the link between you and you and X so please remember how we represent a
2:19
link we use this U we to represent a link between you and
2:26
we okay you know in final exam some uh one question requires students to write
2:31
down some links and some students just say way x w they do not they do not use
2:38
this kind of method to represent them the answer is wrong okay
2:44
so then the wrong team the routine problem is basically a shortest path
2:51
problem okay so for example if this is the sauce and if this is the destination then what
2:59
is the shortest path from U to Z okay so then these uh numbers 2 3 1 Etc
3:07
they can be viewed as the cost so what is the cost of the cost can be for example
3:14
um the distance okay or maybe uh the time spent on this link okay so you can
3:22
view this anyway our goal is that we want to find out the shortest path
3:29
between U and Z so then we can save time we can save efforts okay that is the the
3:37
essential goal for routine algorithm okay so now you can see we can represent the
3:44
cost C and the cost for the link x x Prime as c x x Prime
3:52
so for example uh cwdc wz the link
3:59
for between w and z has a cost of five okay
4:05
um and we can also calculate the cost of parts
4:10
the cost of path is um is for example if we have x 1 x 2 x 3 to
4:18
XP then the causal part is the cost between X1 and X2 plus the cost between
4:24
X2 and X3 and you continue until we finish uh all the notes okay for example
4:32
if we say uh the cost of U
4:37
x y z okay because for this path is one
4:42
plus one plus two equal to four okay so that's how we calculate the cost of path
4:49
um then the key question for routine algorithm becomes what is the least cost path
4:56
between you and the least cause the path between U and Z okay as I said the cost
5:04
can be distance uh can be time okay so then
5:09
um if this is distance then we can see this is the least the shortest path between um Z right
5:17
the purpose is to find out the least cost path okay
5:25
so there are two types of uh algorithm generally
5:30
um I shouldn't say two type maybe we can categorize in different uh aspects for
5:36
example if we consider uh if the outcome is global algorithm or decentralized
5:44
algorithm okay we will say for Global algorithm that means all the routers
5:51
have the complete topology of the entire network and they all know
5:58
that link cost information for each link okay so that is the link stage algorithm
6:05
so basically in this in this uh algorithm as I said every right I every
6:11
router will know uh the information for the entire network
6:17
okay this is global and another type is
6:22
decentralized algorithm decentralized algorithm the routers only know the
6:30
physically connected neighbors and also the link cost to Neighbors
6:36
okay um for example if I'm a router I only know oh okay I have three Neighbors so
6:44
if I go to neighbor one the cost is a 10 go to neighbor 2 the cost is five if I
6:50
go to neighbor 3 the cost is uh 12 maybe okay so all right only know the
6:56
information about my neighbors I do not care about the other routers this is
7:02
very very different from the global algorithm which in which the routers basically know all the information about
7:10
um the entire network okay um and then
7:16
basically for this kind of action we're not we need to do iterative
7:22
um iterative process of computer computation and then we need to exchange
7:27
the information with the neighbors the neighbors will do the calculation based
7:32
on the information provided by neighbors and I believe the neighbors again so
7:38
it's like that until finally we reach some kind of equilibrium equilibrium
7:43
okay or some kind of balance uh so one of the example is the distance
7:48
Vector algorithm okay so this is a uh the characterization if we're we are
7:55
categorized in um Global or decentralized if we are
8:00
categorized um in terms of static or dynamic then uh
8:06
one type of one type of algorithm is the static algorithm in which the routers
8:12
change the robs change slowly over time okay but for the dynamic once the Rocks
8:20
may change more quickly so we may do periodic update in response to the cost
8:26
changes okay so those are the different types
8:32
um so next let's look at the link State algorithm again we may not be able to finish this but let's uh at least maybe
8:41
try so for link State algorithm
8:47
um it's actually um built on top of the diecast algorithm
8:53
I think you have all learned like stress algorithm in 130 probably okay
9:00
um in directors we know we we firstly have the network topology and the link
9:06
costs are known to all the nodes okay uh how how can we make the link cost known
9:12
to everybody we do the broadcasting right next day broadcasting all the notes have the same information
9:18
uh and then based on those information we compute the least cost path from one
9:24
node to the to all the other nodes in that constructs algorithm uh human 30
9:32
probably you have learned uh the calculation or shortest path from one
9:38
note from source to destination right so but in next state housing our goal is
9:47
to calculate the shortest path or the least cost path from the source
9:53
to every other node that means we need to calculate the shortest path between U
10:00
and away between U and X between U and W between U and Y between U and Z so from the
10:08
source to every other node we need to know the shortest path because only
10:15
um only when we know the short part from or the least cost part from the source
10:21
to every other node then we will know how to do the forwarding when we see a
10:27
destination address okay so for example if we know this is the shortest path to w
10:33
then um if we know the destination node is W then we can forward this to uh to the UV
10:41
link okay so it's like that we will learn more uh but for now we need to know okay we are calculating the least
10:47
cost path from one node The Source node to all the other nodes okay all the
10:54
other nodes um and with me um do this alternatively after K
11:02
iterations we know the least cost path to K destinations okay so here we need
11:09
to firstly know some of the notations for example 6X and y means the link cost from node X
11:16
to node to Y and if they are not direct neighbors If X and Y are not Iraq
11:23
neighbors then this number will become Infinity okay
11:30
d y is the current value of the cost of path from source to destination weight
11:39
okay for example for example DW
11:46
if we know this this is the path we are looking at then DW will be 5 because that is the
11:54
cost from the source 2 W so it's 2 plus 3 equal to 5. select that okay
12:03
um and then PV is the predecessor note along the path from source to weight
12:11
again if we are looking at you we W then
12:18
PW on this path PW equals to we and PV
12:24
equals to you okay again we are looking at only this path we are not looking at
12:30
others of course if you are looking at others for example u x y z then pz will
12:37
become y p y become x p x become U so it's predecessor okay
12:44
and M Prime is the set of nodes whose least cost path definitely not okay so
12:52
basically this is a set a set of nodes if we or for example if
12:57
we already find out the least cost path between you and the way okay so then we
13:04
will add we we will put way to uh this uh M Prime
13:10
later if we find out the least cost part from uh source to W then we will change
13:18
this after this and put W into this set okay so our goal as we said our goal is
13:27
to compute the least cost path from The Source node to every other node okay
13:35
that means our goal is to finally put all the other nodes into this set of M
13:41
Prime okay any questions so far
13:48
I know this is a lot of information uh but gradually you will learn how to
13:54
use those okay basically we are I'm providing four notations uh the cost the
14:00
current value of the past cost the predecessor and the set of nodes okay
14:07
so this is a direct stress algorithm all right so then now let's look at the
14:13
dark stress algorithm of so firstly we need to do initialization
14:19
in the initialization for the M Prime we put U here only the source only the
14:26
source as I said our goal is to put all the other nodes into M Prime okay now it has only the sauce because we know the
14:33
shortest path from sauce to the source okay and for all the other nodes if the V or
14:43
the other notes away if V is adjacent to you okay then DV equals to the cost between
14:51
U and away that means if you and V for all the other nodes if you and we are direct
14:59
neighbors then we basically uh give the current plus value as the the link value
15:06
the link cost okay otherwise then
15:11
um it is infinity okay so for example
15:17
um it's basically the initialization if for example if for you and away are the right neighbors then we can see DV when
15:24
we do the initialization DV equals to see you wait which is true okay but then
15:32
DJ will equal to c u z which is actually Infinity so that's how we do the
15:39
initialization okay and then later we will find we will
15:45
enter a loop okay in this Loop we will find out find the W not in the M Prime
15:51
such that the DW is a minimum okay if we find out DW is a minimum then
15:59
we add W to M Prime okay in this case
16:04
because W is ended to added to M Prime then all the other nodes will try to go
16:11
through W okay they will need to update their own d-way
16:16
by considering going through W if they go through W then it's basically
16:23
uh the total cost will be currently W's cost
16:29
because DW means the constitute from W to U right
16:34
and then plus the cost between you and the weight so this is the total cost
16:41
so it's like if my neighbor told me say hey I have the shortest path to go
16:48
to New York okay and you need to take only two days to go to New York
16:54
then I will update my own time I will say okay if we if I go through you and
17:03
you only need to take two days to New York then I know between me and my
17:09
neighbor I need to take one more day okay then two days plus one more day I
17:15
know this is three days okay if I go through W go through my neighbor it is three days then I'll
17:23
compare this three days with my original time originally if I do not go through W
17:29
my the time I used to to travel to New York is probably seven days and now I
17:35
only need three days of course I will choose the minimal one okay so basically
17:40
you can say that all the notes will update there their value
17:48
by going through w okay and if we get a new cost
17:53
okay then we will find the shortest path now okay for example for me I I only
17:59
need three days okay then I will need to update this to three days okay and then I will need
18:06
to update my path my path originally is probably going through another neighbor but now I need to go through w
18:13
okay so that is my shortest path now and then uh later because this node way
18:22
um we can find out the shortest path then we will add way into M Prime
18:28
okay so it's like that so we will continue but after we add a way into M
18:35
Prime than another note we are update again based on
18:40
the value provided by weight okay then everybody will say oh now
18:46
let's try a new neighbor wait because this week is this is a has a shortest
18:51
path so then everybody try away and then try to find out the shorty path again so
18:58
we will do this until all the nodes are in the M Prime
19:04
okay are in the M Prime uh I know this is probably very overwhelming for so far
19:11
um so diagram algorithm is able to compete compute the least cost path from
19:19
one node to another node okay here following State album we want to calculate the least cost path from one
19:26
node to all the other nodes okay so basically for example if you are
19:31
looking at this this example here we have Source node and then we will view every other node
19:39
at the destination node and then we calculate the shot the least cost path
19:44
from The Source node to every other node for example we may do
19:51
um we want to calculate the list called path from U to X from U to W from U to v
19:57
u to y u to Z okay um and uh again let me review the notations
20:04
again so for for example c x y is the link cost from node X node y
20:11
if they are direct neighbors for example uh c x y
20:16
okay if they are direct neighbors okay their cost is uh just the link cost
20:22
between them for example in this example is 7 for c x y right but if they are not
20:29
derivative for example c u z for cuc because U and z are not your
20:36
enabled so we cannot provide a link cost to it then the link cost we will use
20:41
during initialization is the infinity okay and then D way is the current value of
20:48
the cost of path from source to destination
20:53
so for example if we are looking at u x y you u x y okay then d y equal to 5 plus
21:07
7 equals to twelve so that is a uh the value of cost for path okay then PV is
21:17
the predecessor node along the path from source to a node weight okay for example
21:26
for example um on this path u x y we may have p y at
21:34
equal to X because y's predecessor is X okay and then p x equals to you all
21:42
right um then M Prime is the set of nodes whose least cost path uh is definitely
21:49
no as we said our goal is to put every node into M Prime that means our goal is
21:57
to calculate the least cost path from the source to every other node okay
22:05
so now to write our algorithm we need to uh we first list all those steps for the
22:13
first step for the first step okay we will need to initialize uh some of the
22:19
values for example we need to look at the D's okay that means
22:26
uh the cost of path from the source to
22:31
way to W to X to Y to Z okay of course depending on different paths this values
22:37
may difference may be different okay um and then we will look at the piece
22:43
okay the predecessors for every node okay later we will use those
22:49
predecessors um to draw the list cost path tree okay
22:55
for now let's do the initialization for at the very beginning we can put U into
23:01
M Prime why because as we said as we said
23:08
um we uh M Prime means the set of nodes that we have already found out the least
23:14
cost path so from U to you our course we know from itself to itself okay uh we
23:21
know uh the shortest path is is going through itself right so that's why we
23:26
put you into M Prime and then we need to do initialization of the D's okay the
23:32
distances so for example is gonna be from U to we and then you
23:42
can say from you to way this is actually um seven so that's why you can see this
23:48
is the seven and the predecessor away is actually you
23:56
okay that's way so then we look at w because
24:01
we are in the first step the very first step is just initialize this we just look at uh look at uh the uh direct
24:09
neighbors not direct we look at each node and see if there are different numbers with the source okay and then we
24:16
look at w for w we know between U and W the COS is third and we know now the
24:24
predecessor is U predecessor for w p w is actually U
24:30
same thing for X for X we know u x equal to 5 and the predecessor of X is also U
24:39
okay the half of the Y U and Y are not direct Neighbors
24:46
okay so that's why we cannot put any value there we can just put Infinity okay we cannot put um
24:53
a specific number there okay the same thing for z z and U are not
25:00
your neighbors so their cost the cost for the path of use is infinity okay so
25:08
this is what we know currently and that among those values
25:14
among those values among all those nodes v w x y z currently what is the shortest path to
25:22
reaching you and you can easily know okay W has the
25:27
smallest value right so w has the least cost path to you
25:34
okay so now we found out the list cost path from W to U then we choose W and we
25:42
put W here okay and then
25:48
because W is currently the least cost path to you everybody else will will try
25:54
W so w is very proud WC hey I have the best pass so far okay
26:01
if you want to reach to the destination sorry it reach to the source U okay go
26:07
try me try me I may give you a surprise okay so it's like that and then
26:12
everybody try w we will try w we try w
26:19
so when we go through w we use W's original value it is which is a third
26:24
okay plus the cost of three so three plus three is six it's a smaller than
26:32
the original value of seven that's why we put 6 here and now we know that which
26:37
predecessor is not U anymore it is actually w
26:42
so we put a w here okay and then W do not need to try itself
26:50
again we skip W the X will try w
26:55
so X try W again we use currently w we know DW is three okay so three plus four
27:03
is seven seven is not better than five that's why X will see that's not a
27:09
better solution so I'll keep five e okay and then y will try w why Try W again
27:17
what eight plus three is eleven eleven is actually better than infinity so
27:26
that's why we put 11 here and then the predecessor of Y is
27:31
actually W so we put W here and how about Z if they want to try
27:39
um w we know there is no direct link between w and z so it doesn't improve we
27:47
just put Infinity there still So currently among the remaining notes we know now X
27:57
X has the shortest part the least cost path to you right so
28:06
and then we can put X into M Prime because we find out the least cost path
28:14
from X to you okay the x is now very proud X will see
28:20
hey everybody try me please you may find some surprise okay then we will try X
28:28
pay attention we has no direct link with acts so that's why we will just do
28:37
6w still and we skip w we skip X then y will try
28:43
X so now we know DX equals to five okay y
28:51
Prime X and then you can see five plus seven
28:58
equals to 12. 12 is not better than
29:03
11. so that's why why we all just give up and still keep 11 W how about z z try
29:12
x 0 x is five plus nine equals to 14 so we say oh this is better
29:19
than infinity so now this predecessor is a x
29:26
okay because it's going through X and now among all of these we say okay
29:32
now we know the this course part from we to U
29:38
so then we put u w x we put a v here
29:44
okay then we know now DV equals to 6.
29:51
okay and then everybody try way so we have
29:57
only Y and Z remaining why they are trying V then four plus six is ten ten is
30:05
actually better than 11 so this is a 10 and the predecessor we know this is away
30:12
so pay special attention here many students made a mistake so many students
30:17
will they forgot we put a d y equal to 6 here that what they will do is oh why
30:24
Try V we had seven seven plus four is eleven it's not better
30:30
that is absolutely wrong that is wrong because you just you you ignore the
30:36
other past other parts you just directly look at the direct link between you and
30:42
me that is actually wrong because by um through our previous steps we have
30:49
learned the the shortest path or the least cost path for we actually has a
30:56
cost of six that's what we have learned that's the one you have to use can we do
31:01
further calculation you cannot use seven no pay attention to that many students
31:06
made mistakes um here okay and then see we are also
31:11
trying it so if they try V then you say
31:16
they have did not have any direct link so that's why they will still do 14 and
31:22
X then among Y and Z we know we have to choose y
31:28
so u w x v and y now you know why we
31:34
have already find out the least cost path for between uh between U and Y okay then everybody
31:43
try y Z is the only the remaining one so then
31:49
we know d y now equal to 10 okay you don't want to do calculation on your own
31:56
again uh for d y you can directly take uh the value from what you have
32:01
calculated before okay so then d y equal to 10 they say that now equals to ten
32:09
plus two okay equals 12 12 is better so then the predecessor for Z this time
32:18
is y okay because this is the only one so we have
32:23
nothing else to choose we just put Z here
32:29
now we have put every node into M Prime that's how we fill this table and then
32:37
you may ask what do we do with this table okay what do we do with this table very interestingly okay I just
32:47
you can see uh it is displaying what we have discussed
32:53
okay okay so the next thing we we are going
33:00
to do is to this to construct to construct the least cost path tree
33:06
okay so let me
33:12
so just clean this up okay but I I'll keep those d d x d v d y Etc there okay
33:22
so then now uh we know okay so now we will connect we want to
33:29
construct the list called the shortest path tree or the list cost path tree okay so what we should do now is we
33:37
connect every node with its predecessor so for example you can see uh for Z we
33:44
know the predecessor is actually y then we will connect z and y here okay and
33:51
then for y the predecessor is way so we connect to Y and we
33:56
okay then for X the predecessor is actually U if you look at the table so X
34:02
and u and for w the predecessor is u
34:08
okay and then the way predecessor is w
34:14
now you can see what we I have drawn here is actually the least cost path tree or
34:22
the shortest path trick okay so between U and X
34:27
between unw so all these ones so is the discourse pathway so what does
34:35
this mean this means if you want to reach to any node you just follow this
34:41
list cost pathway for example if you want to reach X then follow ux
34:48
if you want to reach W then follow UW if you want to reach way then do u w and
34:55
then WV if you want to reach y then follow UW wa
35:01
and v y if you want to reach Z the same thing you do UW wa
35:07
v y and then y z okay so that is how you follow uh the
35:15
least cost path to 3 to reach every destination okay so that means if you
35:21
have a packet coming in with a specific destination for example if the definition is is y
35:28
then we know the least cost path for this package is to go through
35:35
uwwe and then we y okay so that's what we do and then interestingly now you can
35:42
see if you stand at this uh Source you okay then when the packet comes in you
35:51
know how to do the forwarding okay so for example for example
35:58
if this is the destination
36:10
if the left column is destination the right column is the outgoing link
36:16
then we know if the destination is X
36:22
okay we should forward this to u x
36:28
right we forward it to this link if the addition is w we need to forward
36:34
it to you w we follow the list cost path tree okay
36:39
now I have a question you can type the answer in the chat
36:45
what if the definition is V what is the outgoing link
36:52
what if the destination is a way what is the
36:58
outgoing link pay attention you need to write down a
37:06
link not just one node okay a link so how to
37:11
express a link you need a parenthesis
37:17
um apparently some of you are considering oh because definition is a way so I need to forward this to UW
37:26
um and then to wait okay that is very normal
37:31
but that is actually wrong why because because
37:38
when the router do the forwarding okay the router can forward it to only its
37:46
own neighbors it cannot control others it's like for me I have for example for
37:53
you it has three neighbors of x w and we it can only decide
38:00
if it need it should be forwarded to X or to W or to wait
38:05
but it cannot decide what will happen after that that means for you you can only say oh I
38:13
need to forward it to this link to the UW link okay but what will happen after w
38:23
is not decided by you you don't care okay you doesn't care
38:29
so that's why I pay special attention here you can only write down UW you should not add WB okay no wa and some of
38:39
you may think then how can I decide how can I how can I make sure
38:46
um W is doing the job W is forwarding this two-way we cannot we cannot control W okay we
38:53
cannot make sure that um as a matter of fact W will run its
39:00
routing algorithm and generating its own forwarding table okay so what you is
39:08
doing now is to make the best judgment based on the gravity algorithm it is
39:15
running it can only tell oh from what I understand I need to forward this to W
39:21
but I don't know what will happen after that W may have a different opinion W
39:27
may make me forward it to to something else not to wait okay but W is running
39:33
its own routing algorithm and generating its own local formative table that is
39:39
something you need to pay us pay attention Okay pay attention
39:44
and then if the destination is uh y so can you guess the answer now can you
39:51
type in the answer in the chat now what is the outer link outgoing link if the
39:57
destination is y the answer should be u w again U is only controlling
40:05
itself this is the local
40:18
pay attention because you know what we are doing is a local forwarding table for you not for anybody else okay for
40:24
you okay um Anthony is asking uh so we assume the
40:30
machine will take care of the inputs yes the machine will look at look at uh I
40:36
don't know what you mean by inputs if you are meaning the destination of the package yes the the router will look at
40:43
the destination destination of the packet and then decide the outgoing link
40:49
okay so what is this what if the definition is z so what is that green link
40:57
so if the definition is Z then the um forwarding link the outgoing link is
41:04
still UW okay because we are looking at only the local 40 table for you okay you
41:12
will make the decision based on the destination of the package okay and it
41:18
can only forward to Three Links number one is the uwx number two is the UW and
41:26
then number three is the UE one okay so I'll remove this just to
41:36
okay um so there is another example
41:43
another example